//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LibertyPower.Business.MarketManagement.EdiParser.FileParser.DataSynchronizationServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataSynchronizationServiceReference.IDataSynchronization")]
    public interface IDataSynchronization {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataSynchronization/Synchronize", ReplyAction="http://tempuri.org/IDataSynchronization/SynchronizeResponse")]
        string Synchronize(string accountNumber, string utilityCode, string zone, string profile, string serviceClass, string billingCycle, string icap, string tcap);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataSynchronization/Synchronize", ReplyAction="http://tempuri.org/IDataSynchronization/SynchronizeResponse")]
        System.IAsyncResult BeginSynchronize(string accountNumber, string utilityCode, string zone, string profile, string serviceClass, string billingCycle, string icap, string tcap, System.AsyncCallback callback, object asyncState);
        
        string EndSynchronize(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataSynchronization/SynchronizeFromScrapers", ReplyAction="http://tempuri.org/IDataSynchronization/SynchronizeFromScrapersResponse")]
        string SynchronizeFromScrapers(string accountNumber, string utilityCode);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDataSynchronization/SynchronizeFromScrapers", ReplyAction="http://tempuri.org/IDataSynchronization/SynchronizeFromScrapersResponse")]
        System.IAsyncResult BeginSynchronizeFromScrapers(string accountNumber, string utilityCode, System.AsyncCallback callback, object asyncState);
        
        string EndSynchronizeFromScrapers(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDataSynchronizationChannel : LibertyPower.Business.MarketManagement.EdiParser.FileParser.DataSynchronizationServiceReference.IDataSynchronization, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SynchronizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SynchronizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SynchronizeFromScrapersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SynchronizeFromScrapersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataSynchronizationClient : System.ServiceModel.ClientBase<LibertyPower.Business.MarketManagement.EdiParser.FileParser.DataSynchronizationServiceReference.IDataSynchronization>, LibertyPower.Business.MarketManagement.EdiParser.FileParser.DataSynchronizationServiceReference.IDataSynchronization {
        
        private BeginOperationDelegate onBeginSynchronizeDelegate;
        
        private EndOperationDelegate onEndSynchronizeDelegate;
        
        private System.Threading.SendOrPostCallback onSynchronizeCompletedDelegate;
        
        private BeginOperationDelegate onBeginSynchronizeFromScrapersDelegate;
        
        private EndOperationDelegate onEndSynchronizeFromScrapersDelegate;
        
        private System.Threading.SendOrPostCallback onSynchronizeFromScrapersCompletedDelegate;
        
        public DataSynchronizationClient() {
        }
        
        public DataSynchronizationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataSynchronizationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataSynchronizationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataSynchronizationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<SynchronizeCompletedEventArgs> SynchronizeCompleted;
        
        public event System.EventHandler<SynchronizeFromScrapersCompletedEventArgs> SynchronizeFromScrapersCompleted;
        
        public string Synchronize(string accountNumber, string utilityCode, string zone, string profile, string serviceClass, string billingCycle, string icap, string tcap) {
            return base.Channel.Synchronize(accountNumber, utilityCode, zone, profile, serviceClass, billingCycle, icap, tcap);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSynchronize(string accountNumber, string utilityCode, string zone, string profile, string serviceClass, string billingCycle, string icap, string tcap, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSynchronize(accountNumber, utilityCode, zone, profile, serviceClass, billingCycle, icap, tcap, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndSynchronize(System.IAsyncResult result) {
            return base.Channel.EndSynchronize(result);
        }
        
        private System.IAsyncResult OnBeginSynchronize(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string accountNumber = ((string)(inValues[0]));
            string utilityCode = ((string)(inValues[1]));
            string zone = ((string)(inValues[2]));
            string profile = ((string)(inValues[3]));
            string serviceClass = ((string)(inValues[4]));
            string billingCycle = ((string)(inValues[5]));
            string icap = ((string)(inValues[6]));
            string tcap = ((string)(inValues[7]));
            return this.BeginSynchronize(accountNumber, utilityCode, zone, profile, serviceClass, billingCycle, icap, tcap, callback, asyncState);
        }
        
        private object[] OnEndSynchronize(System.IAsyncResult result) {
            string retVal = this.EndSynchronize(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSynchronizeCompleted(object state) {
            if ((this.SynchronizeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SynchronizeCompleted(this, new SynchronizeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SynchronizeAsync(string accountNumber, string utilityCode, string zone, string profile, string serviceClass, string billingCycle, string icap, string tcap) {
            this.SynchronizeAsync(accountNumber, utilityCode, zone, profile, serviceClass, billingCycle, icap, tcap, null);
        }
        
        public void SynchronizeAsync(string accountNumber, string utilityCode, string zone, string profile, string serviceClass, string billingCycle, string icap, string tcap, object userState) {
            if ((this.onBeginSynchronizeDelegate == null)) {
                this.onBeginSynchronizeDelegate = new BeginOperationDelegate(this.OnBeginSynchronize);
            }
            if ((this.onEndSynchronizeDelegate == null)) {
                this.onEndSynchronizeDelegate = new EndOperationDelegate(this.OnEndSynchronize);
            }
            if ((this.onSynchronizeCompletedDelegate == null)) {
                this.onSynchronizeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSynchronizeCompleted);
            }
            base.InvokeAsync(this.onBeginSynchronizeDelegate, new object[] {
                        accountNumber,
                        utilityCode,
                        zone,
                        profile,
                        serviceClass,
                        billingCycle,
                        icap,
                        tcap}, this.onEndSynchronizeDelegate, this.onSynchronizeCompletedDelegate, userState);
        }
        
        public string SynchronizeFromScrapers(string accountNumber, string utilityCode) {
            return base.Channel.SynchronizeFromScrapers(accountNumber, utilityCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSynchronizeFromScrapers(string accountNumber, string utilityCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSynchronizeFromScrapers(accountNumber, utilityCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndSynchronizeFromScrapers(System.IAsyncResult result) {
            return base.Channel.EndSynchronizeFromScrapers(result);
        }
        
        private System.IAsyncResult OnBeginSynchronizeFromScrapers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string accountNumber = ((string)(inValues[0]));
            string utilityCode = ((string)(inValues[1]));
            return this.BeginSynchronizeFromScrapers(accountNumber, utilityCode, callback, asyncState);
        }
        
        private object[] OnEndSynchronizeFromScrapers(System.IAsyncResult result) {
            string retVal = this.EndSynchronizeFromScrapers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSynchronizeFromScrapersCompleted(object state) {
            if ((this.SynchronizeFromScrapersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SynchronizeFromScrapersCompleted(this, new SynchronizeFromScrapersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SynchronizeFromScrapersAsync(string accountNumber, string utilityCode) {
            this.SynchronizeFromScrapersAsync(accountNumber, utilityCode, null);
        }
        
        public void SynchronizeFromScrapersAsync(string accountNumber, string utilityCode, object userState) {
            if ((this.onBeginSynchronizeFromScrapersDelegate == null)) {
                this.onBeginSynchronizeFromScrapersDelegate = new BeginOperationDelegate(this.OnBeginSynchronizeFromScrapers);
            }
            if ((this.onEndSynchronizeFromScrapersDelegate == null)) {
                this.onEndSynchronizeFromScrapersDelegate = new EndOperationDelegate(this.OnEndSynchronizeFromScrapers);
            }
            if ((this.onSynchronizeFromScrapersCompletedDelegate == null)) {
                this.onSynchronizeFromScrapersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSynchronizeFromScrapersCompleted);
            }
            base.InvokeAsync(this.onBeginSynchronizeFromScrapersDelegate, new object[] {
                        accountNumber,
                        utilityCode}, this.onEndSynchronizeFromScrapersDelegate, this.onSynchronizeFromScrapersCompletedDelegate, userState);
        }
    }
}
