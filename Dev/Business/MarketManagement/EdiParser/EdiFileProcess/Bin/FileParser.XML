<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FileParser</name>
    </assembly>
    <members>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityConfig">
            <summary>
            Utilit configuration object that inherits from the utility object
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityConfig.#ctor(LibertyPower.Business.MarketManagement.UtilityManagement.Utility,System.String,System.String,System.Char,System.Char,System.Boolean)">
            <summary>
            Constructor that takes necessary parameters for object
            </summary>
            <param name="utility">Utility identifier</param>
            <param name="marketCode">Market identifier</param>
            <param name="dunsNumber">DUNS number</param>
            <param name="rowDelimiter">Character row delimiter</param>
            <param name="fieldDelimiter">Character field delimiter</param>
            <param name="parsable">indicates if the utility is parsable or not</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityConfig.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityConfig.UtilityCode">
            <summary>
            Utility identifier
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityConfig.RowDelimiter">
            <summary>
            Character row delimiter
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityConfig.FieldDelimiter">
            <summary>
            Character field delimiter
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityConfig.Parsable">
            <summary>
            true if the utility is Scrapable
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiUsage">
            <summary>
            Edi usage object
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiUsage.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiUsage.UsageDataExistsRule">
            <summary>
            Usage data exists business rule
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiUsage.BeginDate">
            <summary>
            Begin date
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiUsage.EndDate">
            <summary>
            End date
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiUsage.MeterNumber">
            <summary>
            Meter number
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiUsage.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiUsage.TransactionSetPurposeCode">
            <summary>
            Transaction set purpose code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiUsage.UnitOfMeasurement">
            <summary>
            Unit of measurement
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiUsage.MeasurementSignificanceCode">
            <summary>
            Measurement significance code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiUsage.PtdLoop">
            <summary>
            Product transfer type code - indicates whether meter is billied, summary, meter level, etc
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiUsage.ServiceDeliveryPoint">
            <summary>
            Service delivery point, also called location number (MISO)
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.OrMarker">
            <summary>
            OandR utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase">
            <summary>
            Base class for utility markers that contain 
            the generic cell positions of property values.
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.UtilityCode">
            <summary>
            Utility identifier
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.AccountNumberCell">
            <summary>
            Account number cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.BeginDateCell">
            <summary>
            Begin date cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.BillingAccountNumberCell">
            <summary>
            Billing account number cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.CustomerNameCell">
            <summary>
            Customer name cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.DunsNumberCell">
            <summary>
            DUNS number cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.EndDateCell">
            <summary>
            End date cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.IcapCell">
            <summary>
            Icap cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.QuantityCell">
            <summary>
             Quantity cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.QuantityAltCell">
            <summary>
             Alternate quantity cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.MeasurementSignificanceCodeCell">
            <summary>
            Measurement significance code cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.MeterNumberCell">
            <summary>
            Meter number cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.NameKeyCell">
            <summary>
            Name key cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.PreviousAccountNumberCell">
            <summary>
            Previous account number cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.RateClassCell">
            <summary>
            Rate class cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.TcapCell">
            <summary>
            Tcap cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.TransactionSetPurposeCodeCell">
            <summary>
            Transaction set purpose code cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.UnitOfMeasurementCell">
            <summary>
            Unit of measurement cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.UnitOfMeasurementAltCell">
            <summary>
            Alternate unit of measurement cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.UtilityIdentifierCell">
            <summary>
            Utility identifier cell position (for ORNJ)
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.ZoneCell">
            <summary>
            Zone cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.LoadProfileCell">
            <summary>
            Load Profile position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.BillGroupCell">
            <summary>
            Bill Cycle, Trip Number, etc.. It's been called many things :)
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.AddressCell">
            <summary>
            BillingAddress cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.CityCell">
            <summary>
            CityCell cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.StateCell">
            <summary>
            State cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.ZipCell">
            <summary>
            Zip code cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.UsageTypeCell">
            <summary>
            Usage type cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.PtdLoopCell">
            <summary>
            Ptd loop cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.UsageMultiplierCell">
            <summary>
            Usage multiplier cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.AccountStatusCell">
            <summary>
            Account Status cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.BillingTypeCell">
            <summary>
            Billing Type cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.BillCalculationCell">
            <summary>
            Bill Calculation cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.ServicePeriodStartCell">
            <summary>
            Service Period Start cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.ServicePeriodEndCell">
            <summary>
            Service Period End cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.AnuualUsageCell">
            <summary>
            Anuual Usage cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.MonthsToComputeKwhCell">
            <summary>
            Months to compute kwh cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.MeterTypeCell">
            <summary>
            Meter type cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.MeterMultiplierCell">
            <summary>
            Meter multiplier cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.TransactionTypeCell">
            <summary>
            Transaction type cel position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.ServiceTypeCell">
            <summary>
            Service type position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.ProductTypeCell">
            <summary>
            Product type position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.ProductAltTypeCell">
            <summary>
            Service type position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.BillToCell">
            <summary>
            Bill To cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.EspAccountCell">
            <summary>
            Esp account number cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.ContactInfoCell">
            <summary>
            Contact information cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.VoltageCell">
            <summary>
            Voltage cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.LossFactorCell">
            <summary>
            Loss factor cell position
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.IdrDateCell">
            <summary>
            Idr date cell
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.IdrIntervalCell">
            <summary>
            Idr interval cell
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.IdrQuantityCell">
            <summary>
            Idr quantity cell
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.IdrUnitOfMeasurementCell">
            <summary>
            Idr unit of measurement cell
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase.ServiceDeliveryPointCell">
            <summary>
            Service delivery point location
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.OrMarker.UtilityNameResolverCell">
            <summary>
            Two utilities, one duns number.. only way to differentiate is by the name sent in row N1*8S
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.OrMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PgeMarker">
            <summary>
            PGE utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PgeMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.BgeMarker">
            <summary>
            BGE utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.BgeMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AceMarker814">
            <summary>
            Marker for Ace utility
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.StandardMarker814">
            <summary>
            Marker with the most common cell positions for files 814.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.StandardMarker814.#ctor(System.String)">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AceMarker814.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CtpenMarker814">
            <summary>
            Marker for CTPEN utility
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CtpenMarker814.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AceMapper867">
            <summary>
            ACE utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase">
            <summary>
            Base class for utility mappers.
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.account">
            <summary>
            Edi account object
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.accountList">
            <summary>
            Edi account list
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.usage">
            <summary>
            Edi usage object
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.idrList">
            <summary>
            Final idr usage list
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.idrTempList">
            <summary>
            Temp idr usage list (SD22759)
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.usageListTemp">
            <summary>
            Temp edi usage list
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.utilityCode">
            <summary>
            Utility identifier
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.marketCode">
            <summary>
            Market identifier
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.accountNumber">
            <summary>
            Account identifier
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.beginDate">
            <summary>
            Begin date
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.billingAccountNumber">
            <summary>
            Billing account number
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.customerName">
            <summary>
            Customer name
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.dunsNumber">
            <summary>
            DUNS number
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.endDate">
            <summary>
            End date
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.icap">
            <summary>
            Icap
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.measurementSignificanceCode">
            <summary>
            Measurement significance code
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.meterNumber">
            <summary>
            Meter number
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.nameKey">
            <summary>
            Name key
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.previousAccountNumber">
            <summary>
            Previous account number
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.rateClass">
            <summary>
            Rate class
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.tcap">
            <summary>
            Tcap
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.transactionSetPurposeCode">
            <summary>
            Transaction set purpose code
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.unitOfMeasurement">
            <summary>
            Unit of measurement
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.zone">
            <summary>
            Zone code
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.loadProfile">
            <summary>
            Load Profile
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.loadShapeId">
            <summary>
            Load shape id
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.ptdLoop">
            <summary>
            Ptd loop
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.billGroup">
            <summary>
            Bill Group
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.usageType">
            <summary>
            Usage type
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.usageMultiplier">
            <summary>
            Usage multiplier
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.serviceAddress">
            <summary>
            BillingAddress
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.accountStatus">
            <summary>
            Account's status (flowing, error's, etc)
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.billingType">
            <summary>
            SC, RR/BR or DUAL
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.billCalculation">
            <summary>
            Who calculates bill charges?
            
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.servicePeriodStart">
            <summary>
            Date that the service with the service provider will start.
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.servicePeriodEnd">
            <summary>
            Date that the service with the service provider will end.
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.annualUsage">
            <summary>
            Anuual usage
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.monthsToComputeKwh">
            <summary>
            Number of months over which Total kWh are calculated.
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.meterType">
            <summary>
            Meter type used to identify the type of consumption measured by this meter and the interval between measurements
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.meterMultiplier">
            <summary>
            Meter constant or meter multiplier. Billed Usage = (Ending Meter Reading - Beginning Meter Reading) * Meter Multiplier
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.transactionType">
            <summary>
            Transaction Type (request/response)
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.serviceType">
            <summary>
            Service type (EL, GAS, etc.)
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.productType">
            <summary>
            Product type (SW, RRC, MVO, etc)
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.productAltType">
            <summary>
            Additional product type (BB, MI, etc.)
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.billTo">
            <summary>
            Bill To (contact) person
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.billingAddress">
            <summary>
            Billing Address
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.espAccount">
            <summary>
            Esp Account #
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.lossFactor">
            <summary>
            Loss factor
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.voltage">
            <summary>
            Voltage
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.idrDate">
            <summary>
            Idr date
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.idrInterval">
            <summary>
            Idr interval
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.serviceDeliveryPoint">
            <summary>
            Service delivery point
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.CreateEdiUsage(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Overloaded method that creates an edi usage object
            </summary>
            <param name="quantity"></param>
            <param name="unitOfMeasurement"></param>
            <param name="measurementSignificanceCode"></param>
            <param name="transactionSetPurposeCode"></param>
            <param name="meterNumber"></param>
            <param name="fromDate"></param>
            <param name="toDate"></param>
            <param name="ptdValue"></param>
            <returns>EdiUsage instance</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.CreateEdiUsage(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Overloaded method that creates an edi usage object
            </summary>
            <param name="quantity"></param>
            <param name="unitOfMeasurement"></param>
            <param name="measurementSignificanceCode"></param>
            <param name="transactionSetPurposeCode"></param>
            <param name="meterNumber"></param>
            <param name="fromDate"></param>
            <param name="toDate"></param>
            <param name="ptdValue"></param>
            <param name="serviceDeliveryPoint"></param>
            <returns>EdiUsage instance</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.CreateEdiUsage(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Overloaded method that creates an edi usage object
            </summary>
            <param name="quantity"></param>
            <param name="unitOfMeasurement"></param>
            <param name="measurementSignificanceCode"></param>
            <param name="transactionSetPurposeCode"></param>
            <param name="meterNumber"></param>
            <param name="ptdValue"></param>
            <returns>EdiUsage instance</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.CreateEdiUsage(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an edi usage object
            </summary>
            <param name="quantity">Quantity</param>
            <param name="unitOfMeasurement">Unit of measurement</param>
            <param name="measurementSignificanceCode">Measurement significance code</param>
            <param name="transactionSetPurposeCode">Transaction set purpose code</param>
            <param name="meterNumber">Meter number</param>
            <returns>Returns an edi usage object.</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.createIdrUsage(System.String,System.String,System.String,System.String)">
            <summary>
            Overloaded method that creates an idr usage object
            </summary>
            <param name="quantity"></param>
            <param name="unitOfMeasurement"></param>
            <param name="transactionSetPurposeCode"></param>
            <param name="ptdValue"></param>
            <returns></returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.createIdrUsage(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an idr usage object
            </summary>
            <param name="quantity"></param>
            <param name="unitOfMeasurement"></param>
            <param name="transactionSetPurposeCode"></param>
            <param name="interval"></param>
            <param name="Date"></param>
            <param name="ptdValue"></param>
            <returns>EdiUsage instance</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.ClearUsageVariables">
            <summary>
            Resets usage related variables.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.ClearIdrVariables">
            <summary>
            Resets idr related variables.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.AddIdrUsagesToList(LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiIdrUsageList,LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount,System.String,System.String)">
            <summary>
            Adds the idr usages in temp idr edi usage list to the final idr usage list.
            </summary>
            <param name="idrTempList"></param>
            <param name="account"></param>
            <param name="date"></param>
            <param name="interval"></param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.AddUsagesToList(LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiUsageList,LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiUsageList,System.String,System.String)">
            <summary>
            Adds the usages in temp edi usage list to the final edi usage list.
            </summary>
            <param name="usageListTemp">Temp edi usage list</param>
            <param name="usageList">Final edi usage list</param>
            <param name="beginDate">Usage begin date</param>
            <param name="endDate">Usage end date</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.AddUsagesToList(LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiUsageList,LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiUsageList,System.String,System.String,System.String)">
            <summary>
            Overloaded method that adds the usages in temp edi usage list to the final edi usage list.
            </summary>
            <param name="usageListTemp">Temp edi usage list</param>
            <param name="usageList">Final edi usage list</param>
            <param name="beginDate">Usage begin date</param>
            <param name="endDate">Usage end date</param>
            <param name="ptdLoop">Ptd loop value</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.ResetAccountVariables(System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Resets variables in preparation for next iteration of generic collection.
            </summary>
            <param name="accountNumber">Account identifier</param>
            <param name="billingAccountNumber">Billing account number</param>
            <param name="customerName">Customer name</param>
            <param name="icap">Icap</param>
            <param name="nameKey">Name key</param>
            <param name="previousAccountNumber">Previous account number</param>
            <param name="rateClass">Rate class</param>
            <param name="tcap">Tcap</param>
            <param name="zone">Zone code</param>
            <param name="usageType">Usage type</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.ResetAccountVariables">
            <summary>
            Resets variables in preparation for next iteration of generic collection.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.DoAddToList(System.String,System.String,System.String,System.String)">
            <summary>
            Determines whether to add a usage object to list
            </summary>
            <param name="quantity">Quantity</param>
            <param name="unitOfMeasurement">Unit of measurement</param>
            <param name="measurementSignificanceCode">Measurement significance code</param>
            <param name="transactionSetPurposeCode">Transaction set purpose code</param>
            <returns>Returns a boolean indicating whether to add a usage object to list</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.CalculateUsage(System.String,System.String,System.String)">
            <summary>
            Calculates usage for certain types of file rows
            </summary>
            <param name="usageMultiplier"></param>
            <param name="usage1"></param>
            <param name="usage2"></param>
            <returns></returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MapperBase.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Map data to be overriden. Map data should define the rules for mapping the data for each file row
            </summary>
            <param name="fileRow">file row to be mapped to the EditAccount object</param>
            <param name="rowDelimiter">row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>EdiAccount intance</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AceMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AceMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AceMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow">
            <summary>
            File row class
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow.#ctor(System.String,System.Int32)">
            <summary>
            Constructor that takes the contents as a parameter.
            </summary>
            <param name="contents">Contents of file row</param>
            <param name="rowNumber"> the row number</param>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow.RowNumber">
            <summary>
            Row number
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow.Contents">
            <summary>
            File contents
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileController">
            <summary>
            Entry point for file processing.
             Processes one file at a time. Places file in managed storage and then
              passes responsibility to edi file manager for process flow.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileController.ProcessFiles(System.String)">
            <summary>
            Process files from directory
            </summary>
            <param name="directoryPath">File directory</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileController.ProcessFiles(System.String[])">
            <summary>
            Reprocess files in managed storage
            </summary>
            <param name="fileGuids">Managed storage file identifiers</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileController.ProcessFile(LibertyPower.Business.CommonBusiness.FileManager.FileContext,System.String,System.String,System.String)">
            <summary>
            Creates an edi file and process log and then passes 
            responsibility to edi file manager for process flow
            </summary>
            <param name="context">File context object from file manager</param>
            <param name="fileGuid">File identifier in managed storage</param>
            <param name="utilityCode">Utility identifier</param>
            <param name="info">Log information</param>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityIdrUsageList">
            <summary>
            Utility idr usage list
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Terminator">
            <summary>
            The schwarzenegger object.
             Class for removing bad data.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Terminator.RemoveBadAccounts(LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFile)">
            <summary>
            Removes accounts that have errors
            </summary>
            <param name="ediFile">Edi file object</param>
            <returns>Returns an edi account list that has no errors.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ClpMapper867">
            <summary>
            CLP utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ClpMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ClpMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ClpMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiUsageList">
            <summary>
            Edi usage list
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DunsNumberExistsRule">
            <summary>
            Business rule that ensures that the DUNS number exists
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DunsNumberExistsRule.#ctor(System.String)">
            <summary>
            Constructor that takes a DUNS number
            </summary>
            <param name="dunsNumber">DUNS number</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DunsNumberExistsRule.Validate">
            <summary>
            Validates the parameter(s) passed in to the constructor returning a boolean indicating success or failure.
            </summary>
            <returns>Returns a boolean indicating success or failure.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.SharylandMarker">
            <summary>
            SHARYLAND utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.SharylandMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AceMarker">
            <summary>
            ACE utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AceMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.WppMarker814">
            <summary>
            Marker for WPP
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.WppMarker814.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.OncorMarker814">
            <summary>
            Marker for ONCOR utility
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.OncorMarker814.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AepceMarker814">
            <summary>
            Marker for AEPCE utility
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AepceMarker814.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NimoMapper867">
            <summary>
            NIMO utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NimoMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NimoMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NimoMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MetedPenelec867">
            <summary>
            Both Meted and Penelec come in one single file; this is the 867 parser for these files..
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MetedPenelec867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MetedPenelec867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode"></param>
            <param name="marketCode"></param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MetedPenelec867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AepnoMapper867">
            <summary>
            AEPNO utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AepnoMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AepnoMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AepnoMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AmerenMapper867">
            <summary>
            AMEREN utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AmerenMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AmerenMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AmerenMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.IntParser">
            <summary>
            Parses string properties of a EdiAccount instance.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PropertyParser`1">
            <summary>
            Responsible for parsing a FileRow instance into a property of a EdiAccount instance.
            </summary>
            <typeparam name="T">Type of the property</typeparam>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.IPropertySetter">
            <summary>
            Sets the value of a property from a EdiAccount instance.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.IPropertySetter.SetValue(LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount,System.String@,System.Char)">
            <summary>
            Sets the value of the target account based in the content of the file row
            </summary>
            <param name="target">Target account instance</param>
            <param name="fileCellContent">FileRow containing the data</param>
            <param name="fieldDelimiter">field delimiter</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PropertyParser`1.#ctor(System.Linq.Expressions.Expression{System.Func{LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount,`0}},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="propertySetter">Setter expression of a property of a EdiAccount instance</param>
            <param name="cellIndex">Index of the in a FileRow wich contain the data that will be parsed</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PropertyParser`1.SetValue(LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount,System.String@,System.Char)">
            <summary>
            Parses a FileRow instance into a property of a EdiAccount instance and sets its value
            </summary>
            <param name="target">Property owner</param>
            <param name="fileCellContent">File Row Cell instance being parsed</param>
            <param name="fieldDelimiter">field delimiter</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PropertyParser`1.Parse(System.String@,System.Char)">
            <summary>
            Parses a FileRow instance into a property of a EdiAccount instance
            </summary>
            <param name="fileRowCell">FileRow Cell instance wich will be mapped to a property</param>
            <param name="fieldDelimiter"> Field delimiter used to split the file row cell</param>
            <returns>Parsed value of the FileRow instance</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PropertyParser`1.CellIndex">
            <summary>
            Index of the in a FileRow wich contain the data that will be parsed
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PropertyParser`1.Setter">
            <summary>
            Property setter
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.IntParser.#ctor(System.Linq.Expressions.Expression{System.Func{LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount,System.Int32}},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="propertySetter">Setter of the property that will be parsed</param>
            <param name="cellIndex">Positon of th data in the field</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.IntParser.Parse(System.String@,System.Char)">
            <summary>
            Parses field data
            </summary>
            <param name="fileRowCell">Row cell containing the field</param>
            <param name="fieldDelimiter">file delimiter used to split fileRowCell</param>
            <returns>Parsed value of the field</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Field">
            <summary>
            Represents a filed in a file row
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Field.Complement(System.String)">
            <summary>
            Adds a complement to the name of the filed. Ex.: N1 -> N18S
            </summary>
            <param name="complent"></param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Field.CreateCompositeField(System.String)">
            <summary>
            Creates a composite field
            </summary>
            <param name="name">Name of the field</param>
            <returns>Field instance</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Field.CreateSingleField(System.String)">
            <summary>
            Creates a field based on a single cell
            </summary>
            <param name="name">Name of the field</param>
            <returns>Field instance</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Field.IsAccountStart">
            <summary>
            Verifies if the field name represents Account Start
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Field.IsAccountEnd">
            <summary>
            Verifies if the field name represents Account End
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Field.IsEndOfFile">
            <summary>
            Verifies if the field name represents the End of the Fle
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Field.Name">
            <summary>
            Gets the name of the field
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Field.IsComposite">
            <summary>
            Verifies if the field is compose by more than one cell
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AddressParser">
            <summary>
            Parses GeographicalAddress properties of a EdiAccount instance.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.StringParser">
            <summary>
            Parses string properties of a EdiAccount instance.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.StringParser.#ctor(System.Linq.Expressions.Expression{System.Func{LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount,System.String}},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="propertySetter">Setter of the property that will be parsed</param>
            <param name="cellIndex">Positon of th data in the field</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.StringParser.Parse(System.String@,System.Char)">
            <summary>
            Parses field data
            </summary>
            <param name="fileRowCell">Row cell containing the field</param>
            <param name="fieldDelimiter">file delimiter used to split fileRowCell</param>
            <returns>Parsed value of the field</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AddressParser.#ctor(System.Linq.Expressions.Expression{System.Func{LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount,System.String}},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="propertySetter">Setter of the property that will be parsed</param>
            <param name="cellIndex">Index of the cell in a FileRow instance wich contains the data that will be parsed</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AddressParser.SetValue(LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount,System.String@,System.Char)">
            <summary>
            Assigns the parsed value to the property
            </summary>
            <param name="target">EdiAccount instance</param>
            <param name="fileRowCell">Row cell containing the field</param>
            <param name="fieldDelimiter">file delimiter used to split fileRowCell</param>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileAccountList">
            <summary>
            List of file account objects
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Mapper">
            <summary>
            Mapper class determines specific utility mapper to use.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Mapper.GetMapper(System.String,System.String)">
            <summary>
            Get the mapper depending on the utility code and market code
            </summary>
            <param name="utilityCode">the utility code</param>
            <param name="marketCode">the mapper code</param>
            <returns>Mapper instances</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Mapper.Get814Mapper(System.String,System.String)">
            <summary>
            Get the mapper instance depending on the utility code and market code
            </summary>
            <param name="utilityCode">the utility code</param>
            <param name="marketCode">the market code</param>
            <returns>FileMapper814 instance</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFile">
            <summary>
            Edi file object that contains among other items the
             generic collections of the utility file content.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFile.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFile.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor that takes a file name with full path, DUNS number and utility code
            </summary>
            <param name="file">file name with full path</param>
            <param name="dunsNumber">DUNS number</param>
            <param name="utilityCode">Utility identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFile.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that takes a file guid, file name with full path, DUNS number and utility code
            </summary>
            <param name="fileGuid">File identifier in managed storage.</param>
            <param name="file">file name with full path</param>
            <param name="dunsNumber">DUNS number</param>
            <param name="utilityCode">Utility identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFile.AddEdiAccountLog(LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountLog)">
            <summary>
            Adds an edi account log object to account log list
            </summary>
            <param name="log"></param>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFile.EdiFileValidRule">
            <summary>
            Edi file valid business rule
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFile.FileGuid">
            <summary>
            File identifier in managed storage
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFile.File">
            <summary>
            File name with full path
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFile.FileType">
            <summary>
            Edi file type (814, 867, status update)
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFile.DunsNumber">
            <summary>
            DUNS number
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFile.UtilityCode">
            <summary>
            Utiltiy identifier
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFile.FileRowList">
            <summary>
            Generic collection of rows with their respective cell collections
             for utility file.
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFile.EdiAccountList">
            <summary>
            Edi account list
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFile.UtilityUsageAccountList">
            <summary>
            Usage list
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFile.EdiFileLog">
            <summary>
            Edi file log
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFile.EdiProcessLog">
            <summary>
            Edi process log
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFile.EdiAccountLogList">
            <summary>
            Edi account log list
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DataMissingException">
            <summary>
            Data missing exception that inherits from BrokenRuleException
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DataMissingException.#ctor(LibertyPower.Business.CommonBusiness.CommonRules.BusinessRule)">
            <summary>
            
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DataMissingException.#ctor(LibertyPower.Business.CommonBusiness.CommonRules.BusinessRule,System.String)">
            <summary>
            
            </summary>
            <param name="brokenRule"></param>
            <param name="message"></param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DataMissingException.#ctor(LibertyPower.Business.CommonBusiness.CommonRules.BusinessRule,System.String,LibertyPower.Business.CommonBusiness.CommonRules.BrokenRuleSeverity)">
            <summary>
            
            </summary>
            <param name="brokenRule"></param>
            <param name="message"></param>
            <param name="severity"></param>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PplMarker">
            <summary>
            PPL utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PplMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NstarMarker">
            <summary>
            NSTAR-BOS utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NstarMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.SceMarker">
            <summary>
            SCE utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.SceMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PennPrMarker">
            <summary>
            PENNPR utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PennPrMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.WppMapper867">
            <summary>
            WPP utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.WppMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.WppMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode"></param>
            <param name="marketCode"></param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.WppMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.SdgeMapper867">
            <summary>
            SDGE utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.SdgeMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.SdgeMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.SdgeMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PecoMapper867">
            <summary>
            Constructor that takes the PECO market and utility codes
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PecoMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PecoMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PecoMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CmpMapper867">
            <summary>
            CMP utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CmpMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CmpMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CmpMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Clp814Mapper">
            <summary>
            Map for CL-and-P
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814">
            <summary>
            Represents a mapping between edi files and EdiAccount class
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ClassMap">
            <summary>
            Represents a mapping between a edi file and a EdiAccount instance
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ClassMap.#ctor(LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase)">
            <summary>
            Default constructor. Sets the cell marker.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ClassMap.AddFieldMap(System.String,LibertyPower.Business.MarketManagement.EdiParser.FileParser.IPropertySetter)">
            <summary>
            Adds a new field in the map.
            </summary>
            <param name="fieldName">The name of the field in the edi file</param>
            <param name="parser">The property parser used to parse data from the edi file</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ClassMap.RemoveFieldMap(System.String)">
            <summary>
            Removes a field map
            </summary>
            <param name="fieldName">Name of the field to be removed</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ClassMap.Map(LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount,System.String,System.String,System.Char)">
            <summary>
            Maps an field in a edi file to a property of an EdiAccount instance
            </summary>
            <param name="target">EdiAccount being mapped</param>
            <param name="fieldName">Name of the field in the edi file</param>
            <param name="fileCellContent">File row Cell wich contains the data that will be parsed</param>
            <param name="fieldDelimiter">field delimiter</param>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ClassMap.Marker">
            <summary>
            Cel marker.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814.#ctor(LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase)">
            <summary>
            Constructor
            </summary>
            <param name="marker">Marker containing the position of each data in the field</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Clp814Mapper.#ctor(LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase)">
            <summary>
            Map constructor
            </summary>
            <param name="marker">Marker containing the position of each data in the field</param>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileAccount">
            <summary>
            Class for file account data that is derived from WebAccount
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileAccount.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileAccount.TariffCode">
            <summary>
            Tariff code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileAccount.Grid">
            <summary>
            Grid
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileAccount.LbmpZone">
            <summary>
            LBMP Zone
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileAccount.LossFactor">
            <summary>
            Loss factor
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileAccount.MeterNumber">
            <summary>
            Meter number
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileLogList">
            <summary>
            Edi file log list
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileLogList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileLogList.#ctor(System.Linq.IOrderedEnumerable{LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileLog})">
            <summary>
            Constructor that takes an ordered enumerable list of edi file logs
            and adds them to this class.
            </summary>
            <param name="logs">Ordered enumerable list of edi file logs</param>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.OncorMarker">
            <summary>
            ONCOR utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.OncorMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ConedMarker">
            <summary>
             CONED utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CtpenMapper867">
            <summary>
            CTPEN utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CtpenMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CtpenMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CtpenMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ComedMapper867">
            <summary>
            COMED utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ComedMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ComedMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ComedMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.LogInsertException">
            <summary>
            Log insert exception that inherits from Exception
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.LogInsertException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.LogInsertException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.LogInsertException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileLog">
            <summary>
            Edi file log
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileLog.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileLog.#ctor(System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.Boolean,System.Nullable{System.DateTime},LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileType)">
            <summary>
            Constructor that takes all properties for object
            </summary>
            <param name="id">Edi file log record identifier</param>
            <param name="fileGuid">File identifier in managed storage</param>
            <param name="fileName">File name</param>
            <param name="utilityCode">Utility identifier</param>
            <param name="attempts">Processing attempts</param>
            <param name="information">Log information</param>
            <param name="isProcessed">Boolean indicating if successfully processed</param>
            <param name="timeStamp">Time stamp of record</param>
            <param name="ediFileType">Edi file type</param>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileLog.ID">
            <summary>
            Edi file log record identifier
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileLog.FileGuid">
            <summary>
            File identifier in managed storage
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileLog.FileName">
            <summary>
            File name
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileLog.UtilityCode">
            <summary>
            Utility identifier
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileLog.Information">
            <summary>
            Log information
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileLog.Attempts">
            <summary>
            Processing attempts
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileLog.IsProcessed">
            <summary>
            Boolean indicating if successfully processed
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileLog.TimeStamp">
            <summary>
            Time stamp of record
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileLog.EdiFileType">
            <summary>
            Edi file type (814, 867, status update)
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountLogList">
            <summary>
            Edi account log list
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountException">
            <summary>
            Edi account exception that inherits from Exception
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FieldDelimiterExistsRule">
            <summary>
            Business rule that ensures that the field delimiter exists.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FieldDelimiterExistsRule.#ctor(LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityConfig,System.Char)">
            <summary>
            Constructor that takes a utility configuration object and delimiter
            </summary>
            <param name="config">Utility configuration object</param>
            <param name="delimiter">Character delimiter</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FieldDelimiterExistsRule.Validate">
            <summary>
            Validates the parameter(s) passed in to the constructor returning a boolean indicating success or failure.
            </summary>
            <returns>Returns a boolean indicating success or failure.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.WppMarker">
            <summary>
            WPP utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.WppMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DelmdMarker814">
            <summary>
            Marker for DELMD utility
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DelmdMarker814.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PepcodcMapper867">
            <summary>
            PEPCO-DC utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PepcodcMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PepcodcMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PepcodcMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.SharylandMapper867">
            <summary>
            SHARYLAND utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.SharylandMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.SharylandMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.SharylandMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.OncorMapper867">
            <summary>
            ONCOR utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.OncorMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.OncorMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.OncorMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AepceMapper867">
            <summary>
            AEPCE utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AepceMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AepceMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AepceMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Or814Mapper">
            <summary>
            Represents a mapping between orange and rockland and the EdiAccount class
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Or814Mapper.#ctor(LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase)">
            <summary>
            Constructor
            </summary>
            <param name="marker">Marker containing the position of each data in the field</param>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder">
            <summary>
            Responsible for the creation of the markers for each utility. It implements the singleton pattern.
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.CreateMarkerFor">
            <summary>
            Singleton instance of the class
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Ace">
            <summary>
            Creates a class map for ace
            </summary>
            <returns>Class map for ace</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Allegmd">
            <summary>
            Creates a class map for allegheny
            </summary>
            <returns>Class map for allegheny</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Bge">
            <summary>
            Creates a class map for bge
            </summary>
            <returns>Class map for bge</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Clp">
            <summary>
            Creates a class map for Clp
            </summary>
            <returns>Class map for Clp</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Cmp">
            <summary>
            Creates a class map for Cmp
            </summary>
            <returns>Class map for Cmp</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Delde">
            <summary>
            Creates a class map for Delde
            </summary>
            <returns>Class map for Delde</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Delmd">
            <summary>
            Creates a class map for Delmd
            </summary>
            <returns>Class map for Delmd</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Duq">
            <summary>
            Creates a class map for Duq
            </summary>
            <returns>Class map for Delde</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Jcpl">
            <summary>
            Creates a class map for Jcpl
            </summary>
            <returns>Class map for Jcpl</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Meco">
            <summary>
            Creates a class map for Meco
            </summary>
            <returns>Class map for Meco</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Neco">
            <summary>
            Creates a class map for Neco
            </summary>
            <returns>Class map for Neco</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Nimo">
            <summary>
            Creates a class map for Nimo
            </summary>
            <returns>Class map for Nimo</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.NStarBos">
            <summary>
            Creates a class map for NStarBos
            </summary>
            <returns>Class map for NStarBos</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.NStarCamb">
            <summary>
            Creates a class map for NStarCamb
            </summary>
            <returns>Class map for NStarCamp</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.NStarComm">
            <summary>
            Creates a class map for NStarComm
            </summary>
            <returns>Class map for NStarComm</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.PepcoDC">
            <summary>
            Creates a class map for PepcoDC
            </summary>
            <returns>Class map for PepcoDC</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.PepcoMD">
            <summary>
            Creates a class map for PepcoMD
            </summary>
            <returns>Class map for PepcoMD</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.PSeg">
            <summary>
            Creates a class map for PSeg
            </summary>
            <returns>Class map for PSeg</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Sharyland">
            <summary>
            Creates a class map for Sharyland
            </summary>
            <returns>Class map for Sharyland</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Ui">
            <summary>
            Creates a class map for UI
            </summary>
            <returns>Class map for UI</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.WMeco">
            <summary>
            Creates a class map for WMECO
            </summary>
            <returns>Class map for WMECO</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Ameren">
            <summary>
            Creates a class map for Ameren
            </summary>
            <returns>Class map for Ameren</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Aepce">
            <summary>
            Creates a class map for AEPCE
            </summary>
            <returns>Class map for AEPCE</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Aepno">
            <summary>
            Creates a class map for AEPNO
            </summary>
            <returns>Class map for AEPNO</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Cenhud">
            <summary>
            Creates a class map for CENHUD
            </summary>
            <returns>Class map for Cenhud</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Comed">
            <summary>
            Creates a class map for Comed
            </summary>
            <returns>Class map for Comed</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Coned">
            <summary>
            Creates a class map for Coned
            </summary>
            <returns>Class map for Coned</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Ctpen">
            <summary>
            Creates a class map for Ctpen
            </summary>
            <returns>Class map for Ctpen</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Nant">
            <summary>
            Creates a class map for Nant
            </summary>
            <returns>Class map for Nant</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Nyseg">
            <summary>
            Creates a class map for Nyseg
            </summary>
            <returns>Class map for Nyseg</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Oncor">
            <summary>
            Creates a class map for Oncor
            </summary>
            <returns>Class map for Oncor</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Or">
            <summary>
            Creates a class map for OR
            </summary>
            <returns>Class map for OR</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Pge">
            <summary>
            Creates a class map for PGE
            </summary>
            <returns>Class map for PGE</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Ppl">
            <summary>
            Creates a class map for Ppl
            </summary>
            <returns>Class map for Ppl</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Sce">
            <summary>
            Creates a class map for SCE
            </summary>
            <returns>Class map for SCE</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Sdge">
            <summary>
            Creates a class map for SDGE
            </summary>
            <returns>Class map for SDGE</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Txnmp">
            <summary>
            Creates a class map for TXNMP
            </summary>
            <returns>Class map for TXNMP</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Ugi">
            <summary>
            Creates a class map for UGI
            </summary>
            <returns>Class map for UGI</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Unitil">
            <summary>
            Creates a class map for Unitil
            </summary>
            <returns>Class map for Unitil</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Rge">
            <summary>
            Creates a class map for Rge
            </summary>
            <returns>Class map for Rge</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Meted">
            <summary>
            Creates a class map for METED
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Peco">
            <summary>
            Creates a class map for PECO
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Penelec">
            <summary>
            Creates a class map for PENELEC
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.Wpp">
            <summary>
            Creates a class map for WPP
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Marker814Builder.PennPr">
            <summary>
            Creates a class map for PENNPR
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DecimalParser">
            <summary>
            Parses string properties of a EdiAccount instance.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DecimalParser.#ctor(System.Linq.Expressions.Expression{System.Func{LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount,System.Decimal}},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="propertySetter">Setter of the property that will be parsed</param>
            <param name="cellIndex">Positon of th data in the field</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DecimalParser.Parse(System.String@,System.Char)">
            <summary>
            Parses field data
            </summary>
            <param name="fileRowCell">Row cell containing the field</param>
            <param name="fieldDelimiter">file delimiter used to split fileRowCell</param>
            <returns>Parsed value of the field</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityConfigList">
            <summary>
            List of utility config objects
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityConfigList.GetUtilityConfigFromDuns(System.String)">
            <summary>
            Discovers the utility config based on DUNS number
            </summary>
            <param name="dunsNumber">DUNS number</param>
            <returns>Returns the utility config based on DUNS number.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.TransformationFactory">
            <summary>
            Class for transforming objects and data types
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.TransformationFactory.TransformEdiAccountList(LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountList,LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileType)">
            <summary>
            Transforms strings to correct data types for account and associated usage objects.
            </summary>
            <param name="ediAccountList">List of accounts with their associated usage  having all properties as strings.</param>
            <param name="fileType">Format of the file (814, 867 or status update).</param>
            <returns>Returns an account list and associated usage objects.</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.TransformationFactory.TransformEdiUsageList(LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiUsageList)">
            <summary>
            Transforms strings to correct data types for usage objects.
            </summary>
            <param name="ediUsageList">Edi usage list</param>
            <returns>Returns a usage list</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.TransformationFactory.TransformIdrUsageList(System.Collections.Generic.Dictionary{System.String,LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiIdrUsage})">
            <summary>
            Transforms strings to correct data types for idr-usage objects.
            </summary>
            <param name="idrList">Idr usage list</param>
            <returns>Returns an idr usage list</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AepceMarker">
            <summary>
            AEPCE utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AepceMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CenhudMarker">
            <summary>
            CENHUD utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CenhudMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.JcplMapper867">
            <summary>
            JCPL utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.JcplMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.JcplMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.JcplMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PplMapper867">
            <summary>
            PPL utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PplMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PplMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PplMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DuqMapper867">
            <summary>
            DUQ utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DuqMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DuqMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DuqMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DelmarvaMapper867">
            <summary>
            DELDE utility mapper for 867 file.
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DelmarvaMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DelmarvaMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DelmarvaMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.OrMapper867">
            <summary>
            NYSEG utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.OrMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.OrMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.OrMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileException">
            <summary>
            Edi file exception that inherits from Exception
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageList">
            <summary>
            Utility usage list
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PsegMarker">
            <summary>
            PSEG utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PsegMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityConfigExistsRule">
            <summary>
            Business rule that ensures that the utility configuration object exists.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityConfigExistsRule.#ctor(LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityConfig)">
            <summary>
            Constructor that takes a utility configuration object
            </summary>
            <param name="config">Utility configuration object</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityConfigExistsRule.Validate">
            <summary>
            Validates the parameter(s) passed in to the constructor returning a boolean indicating success or failure.
            </summary>
            <returns>Returns a boolean indicating success or failure.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MecoMarker">
            <summary>
            MECO utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MecoMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NysegMarker">
            <summary>
            NYSEG utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NysegMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CtpenMarker">
            <summary>
            CTPEN utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CtpenMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PecoMarker">
            <summary>
            PECO utility marker.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PecoMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UgiMapper867">
            <summary>
            UGI utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UgiMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UgiMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UgiMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PennPrMapper867">
            <summary>
            PENNPR utility mapper for 867 file (ticket 18673).
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PennPrMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PennPrMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode"></param>
            <param name="marketCode"></param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PennPrMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder">
            <summary>
            Responsible for creating maps for utilities files
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.BuildMapFor">
            <summary>
            Singleton instance of the class
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Ace">
            <summary>
            Creates a class map for ace
            </summary>
            <returns>Class map for ace</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Allegmd">
            <summary>
            Creates a class map for allegheny
            </summary>
            <returns>Class map for allegheny</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Bge">
            <summary>
            Creates a class map for bge
            </summary>
            <returns>Class map for bge</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Clp">
            <summary>
            Creates a class map for Clp
            </summary>
            <returns>Class map for Clp</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Cmp">
            <summary>
            Creates a class map for Cmp
            </summary>
            <returns>Class map for Cmp</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Delde">
            <summary>
            Creates a class map for Delde
            </summary>
            <returns>Class map for Delde</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Delmd">
            <summary>
            Creates a class map for Delmd
            </summary>
            <returns>Class map for Delmd</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Duq">
            <summary>
            Creates a class map for Duq
            </summary>
            <returns>Class map for Delde</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Jcpl">
            <summary>
            Creates a class map for Jcpl
            </summary>
            <returns>Class map for Jcpl</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Meco">
            <summary>
            Creates a class map for Meco
            </summary>
            <returns>Class map for Meco</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Neco">
            <summary>
            Creates a class map for Neco
            </summary>
            <returns>Class map for Neco</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Nimo">
            <summary>
            Creates a class map for Nimo
            </summary>
            <returns>Class map for Nimo</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.NStarBos">
            <summary>
            Creates a class map for NStarBos
            </summary>
            <returns>Class map for NStarBos</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.NStarCamb">
            <summary>
            Creates a class map for NStarCamb
            </summary>
            <returns>Class map for NStarCamp</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.NStarComm">
            <summary>
            Creates a class map for NStarComm
            </summary>
            <returns>Class map for NStarComm</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.PepcoDC">
            <summary>
            Creates a class map for PepcoDC
            </summary>
            <returns>Class map for PepcoDC</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.PepcoMD">
            <summary>
            Creates a class map for PepcoMD
            </summary>
            <returns>Class map for PepcoMD</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.PSeg">
            <summary>
            Creates a class map for PSeg
            </summary>
            <returns>Class map for PSeg</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Sharyland">
            <summary>
            Creates a class map for Sharyland
            </summary>
            <returns>Class map for Sharyland</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Ui">
            <summary>
            Creates a class map for UI
            </summary>
            <returns>Class map for UI</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.WMeco">
            <summary>
            Creates a class map for WMECO
            </summary>
            <returns>Class map for WMECO</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Ameren">
            <summary>
            Creates a class map for Ameren
            </summary>
            <returns>Class map for Ameren</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Aepce">
            <summary>
            Creates a class map for AEPCE
            </summary>
            <returns>Class map for AEPCE</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Aepno">
            <summary>
            Creates a class map for AEPNO
            </summary>
            <returns>Class map for AEPNO</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Cenhud">
            <summary>
            Creates a class map for CENHUD
            </summary>
            <returns>Class map for Cenhud</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Comed">
            <summary>
            Creates a class map for Comed
            </summary>
            <returns>Class map for Comed</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Coned">
            <summary>
            Creates a class map for Coned
            </summary>
            <returns>Class map for Coned</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Ctpen">
            <summary>
            Creates a class map for Ctpen
            </summary>
            <returns>Class map for Ctpen</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Nant">
            <summary>
            Creates a class map for Nant
            </summary>
            <returns>Class map for Nant</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Nyseg">
            <summary>
            Creates a class map for Nyseg
            </summary>
            <returns>Class map for Nyseg</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Oncor">
            <summary>
            Creates a class map for Oncor
            </summary>
            <returns>Class map for Oncor</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Or">
            <summary>
            Creates a class map for OR
            </summary>
            <returns>Class map for OR</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Pge">
            <summary>
            Creates a class map for PGE
            </summary>
            <returns>Class map for PGE</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Ppl">
            <summary>
            Creates a class map for Ppl
            </summary>
            <returns>Class map for Ppl</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Sce">
            <summary>
            Creates a class map for SCE
            </summary>
            <returns>Class map for SCE</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Sdge">
            <summary>
            Creates a class map for SDGE
            </summary>
            <returns>Class map for SDGE</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Txnmp">
            <summary>
            Creates a class map for TXNMP
            </summary>
            <returns>Class map for TXNMP</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Ugi">
            <summary>
            Creates a class map for UGI
            </summary>
            <returns>Class map for UGI</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Unitil">
            <summary>
            Creates a class map for Unitil
            </summary>
            <returns>Class map for Unitil</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Rge">
            <summary>
            Creates a class map for Rge
            </summary>
            <returns>Class map for Rge</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Meted">
            <summary>
            Creates a class map for METED
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Peco">
            <summary>
            Creates a class map for PECO
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Penelec">
            <summary>
            Creates a class map for PENELEC
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.Wpp">
            <summary>
            Creates a class map for WPP
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814Builder.PennPr">
            <summary>
            Creates a class map for PENNPR
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiIdrUsage">
            <summary>
            IDR Usage Object
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiIdrUsage.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiIdrUsage.Date">
            <summary>
            Date
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiIdrUsage.PtdLoop">
            <summary>
            PtdLoop value (i.e. BQ, SU, etc.)
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiIdrUsage.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiIdrUsage.TransactionSetPurposeCode">
            <summary>
            Transaction set purpose code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiIdrUsage.UnitOfMeasurement">
            <summary>
            Unit of measurement
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiIdrUsage.Interval">
            <summary>
            Interval (i.e. 15 mins, hourly, etc)
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileList">
            <summary>
            Edi file list
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AddressType">
            <summary>
            Enumeration of the possible types of addressess
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AddressType.BillingAddress">
            <summary>
            Billing address of an edi account
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AddressType.ServiceAddress">
            <summary>
            Service address of an edi account
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UsageListDataExistsRule">
            <summary>
            Business rule that ensures that the usages in list have data.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UsageListDataExistsRule.#ctor(System.String,LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiUsageList@)">
            <summary>
            Constructor that takes an account number and a edi usage list object
            </summary>
            <param name="accountNumber">Account identifier</param>
            <param name="usageList">Edi usage list object</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UsageListDataExistsRule.Validate">
            <summary>
            Validates the parameter(s) passed in to the constructor returning a boolean indicating success or failure.
            </summary>
            <returns>Returns a boolean indicating success or failure.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ConfigurationFactory">
            <summary>
            Class for creating utility configuration objects
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ConfigurationFactory.scrapbaleList">
            <summary>
            list that contains the list of the utilities to be scraped and not parsed
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ConfigurationFactory.GetUtilityConfigurations">
            <summary>
            Creates a utility configuration dictionary.
            </summary>
            <returns>Returns a utility configuration list.</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ConfigurationFactory.GetUtilityConfigurations(System.String)">
            <summary>
            get the utility configuration info from the database
            </summary>
            <param name="dunsNumber">duns number needed to get the info for</param>
            <returns>UtilityConfig object</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PepcodcMarker">
            <summary>
            PEPCO-DC utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PepcodcMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UiMarker">
            <summary>
            UI utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UiMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.TxnmpMarker814">
            <summary>
            Marker for TXNMP utility
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.TxnmpMarker814.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PsegMapper867">
            <summary>
            PSEG utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PsegMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PsegMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PsegMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MecoMapper867">
            <summary>
            MECO utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MecoMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MecoMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MecoMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityCodeSetter">
            <summary>
            Setter for utility code property from an Ediccount instance
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityCodeSetter.#ctor(System.String)">
            <summary>
            Constructor that receives an utility code as its input
            </summary>
            <param name="utilityCode"></param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityCodeSetter.SetValue(LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount,System.String@,System.Char)">
            <summary>
            Setts the utility code property from an Ediccount instance
            </summary>
            <param name="target">EdiAccount instance</param>
            <param name="fileCellContent">FileRow containing the data</param>
            <param name="fieldDelimiter">field delimiter</param>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814">
            <summary>
            Responsible for mapping files 814 to a list of EdiAccount instances
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814.#ctor(LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountMap814)">
            <summary>
            Constructor that receives its account map as input
            </summary>
            <param name="accountMap">Map for the fields contained in the rows that will be mapped to edi account instances</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814.WithMarketCode(System.String)">
            <summary>
            Sets the market code
            </summary>
            <param name="marketCode">Market code</param>
            <returns>FileMapper814 instance with market code defined</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814.Map(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Parses an edi file to a list of EdiAccount instances.
            </summary>
            <returns>Ediaccount list</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ContactParser">
            <summary>
            Parses the Contact property of a EdiAccount instance
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ContactParser.#ctor(System.Linq.Expressions.Expression{System.Func{LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount,LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountContact}},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="propertySetter">Setter of the Contact property</param>
            <param name="cellIndex">Index for the start of contact data</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ContactParser.Parse(System.String@,System.Char)">
            <summary>
            Parses a FileRow instance into a EdiAccountContact instance
            </summary>
            <param name="fileRowCell">Row cell containing the field</param>
            <param name="fieldDelimiter">file delimiter used to split fileRowCell</param>
            <returns>Parsed value of the FileRow instance</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ContactParser.IsContactName(System.String)">
            <summary>
            Verifies if the cell contents represents Contact Name information
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ContactParser.IsEmailAddress(System.String)">
            <summary>
            Verifies if the cell contents represents Email Address information
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ContactParser.IsFax(System.String)">
            <summary>
            Verifies if the cell contents represents Fax information
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ContactParser.IsHomePhone(System.String)">
            <summary>
            Verifies if the cell contents represents Home Phone information
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ContactParser.IsTelephone(System.String)">
            <summary>
            Verifies if the cell contents represents Telephone information
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ContactParser.IsWorkPhone(System.String)">
            <summary>
            Verifies if the cell contents represents Work Phone information
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccountList">
            <summary>
            Utility usage account list
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileConfigDataExistsRule">
            <summary>
            Business rule that ensures that the config data needed for utility exists.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileConfigDataExistsRule.#ctor(System.String,System.String@,System.Char,LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityConfig)">
            <summary>
            Constructor that takes a DUNS number, file content, character delimiter 
            and utility configuration object.
            </summary>
            <param name="dunsNumber">DUNS number</param>
            <param name="fileContent">Contents of file</param>
            <param name="delimiter">Character delimiter</param>
            <param name="config">Utility configuration object</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileConfigDataExistsRule.Validate">
            <summary>
            Validates the parameter(s) passed in to the constructor returning a boolean indicating success or failure.
            </summary>
            <returns>Returns a boolean indicating success or failure.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ParserFactory">
            <summary>
            Class for creating generic objects containing utility file data
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ParserFactory.CreateFileEdi(System.String@,System.Char,System.Char,System.String,System.String,LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileType,System.String,System.Int32)">
            <summary>
            Creates the file edi object with row and cell collections.
            </summary>
            <param name="fileContents">the content of the file</param>
            <param name="rowDelimiter">the row delimiter</param>
            <param name="fieldDelimiter">the field delimiter</param>
            <param name="utilityCode">the utlilty code</param>
            <param name="marketCode">the market code</param>
            <param name="fileType">the file type</param>
            <param name="fileGuid">the file GUID</param>
            <param name="logID">the Log ID</param>
            <returns>true is all the accounts were processed without any error</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ParserFactory.GetFileRows(System.String@,System.String)">
            <summary>
            Creates a file row list
            </summary>
            <param name="fileContents">Contents of file</param>
            <param name="newAccountDelimiter">new account Identifier (ST 867 or ST 814)</param>
            <returns>Returns a file row list</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ParserFactory.GetRowCells(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char)">
            <summary>
            Creates a file cell list
            </summary>
            <param name="row">File row object</param>
            <param name="fieldDelimiter">Character field delimiter</param>
            <returns>Returns a file cell list</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ParserFactory.CreateFileRow(System.String,System.Int32)">
            <summary>
            Creates a file row object
            </summary>
            <param name="rowContents">Contents of file row</param>
            <param name="rowNumber">File row position</param>
            <returns>Returns a file row object</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NantMarker">
            <summary>
            NANT utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NantMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ORMarker814">
            <summary>
            Marker for O and R utility
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ORMarker814.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NstarMapper867">
            <summary>
            NSTAR-BOS utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NstarMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NstarMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NstarMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileType">
            <summary>
            Enum for file type
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileType.EightOneFour">
            <summary>
            814
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileType.EightSixSeven">
            <summary>
            867
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileType.StatusUpdate">
            <summary>
            Status Update
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileType.DailyControlFile">
            <summary>
            Daily Control File
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiDailyTransaction">
            <summary>
            Edi account object
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiDailyTransaction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiDailyTransaction.#ctor(System.String,System.String,System.String,System.DateTime,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Constructor that takes all properties of account object.
            </summary>
            <param name="dunsNumber">Duns Number</param>
            <param name="customerName">Customer number</param>
            <param name="TransactionNumber">Transaction number</param>
            <param name="TransactionDate">Transaction date</param>
            <param name="RequestType">Request type</param>
            <param name="TransactionReferenceNumber">Transaction reference number</param>
            <param name="Direction">Direction</param>
            <param name="Tstatus">Status</param>
            <param name="fileName">File name</param>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiDailyTransaction.DunsNumber">
            <summary>
            DUNS number (ASP_TPID) 
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiDailyTransaction.AccountNumber">
            <summary>
            Account number (ACCTNUM)
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiDailyTransaction.TransactionNumber">
            <summary>
            Transaction Number (TRANSNO)
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiDailyTransaction.TransactionDate">
            <summary>
            Transaction Date (TRANSLATEDT)
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiDailyTransaction.RequestType">
            <summary>
            Request Type (TSET)
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiDailyTransaction.TransactionReferenceNumber">
            <summary>
            Request Type (TRANSREFNO)
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiDailyTransaction.Direction">
            <summary>
            Direction (DIRECTIONSW)
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiDailyTransaction.Tstatus">
            <summary>
            Tstatus (TSTATUS)
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiDailyTransaction.FileName">
            <summary>
            FileName (FILENAME)
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiUsageException">
            <summary>
            Edi usage exception that inherits from Exception
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiUsageException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiUsageException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiUsageException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UsageDataExistsRule">
            <summary>
            Business rule that ensures that usage data exists.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UsageDataExistsRule.#ctor(System.String,LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiUsage)">
            <summary>
            Constructor that takes an account number and a edi usage object
            </summary>
            <param name="accountNumber">Account identifier</param>
            <param name="usage">Edi usage object</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UsageDataExistsRule.Validate">
            <summary>
            Validates the parameter(s) passed in to the constructor returning a boolean indicating success or failure.
            </summary>
            <returns>Returns a boolean indicating success or failure.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileValidRule">
            <summary>
            Business rule that ensures that the generic edi file object has valid data.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileValidRule.#ctor(LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFile)">
            <summary>
            Constructor that takes and Edi file object containing a generic collection of utility file data.
            </summary>
            <param name="ediFile">Edi file object</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileValidRule.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileValidRule.Validate">
            <summary>
            Validates the parameter(s) passed in to the constructor returning a boolean indicating success or failure.
            </summary>
            <returns>Returns a boolean indicating success or failure.</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileValidRule.Validate(LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount@,LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileType)">
            <summary>
            Validate account information
            </summary>
            <param name="account">ediAccount to validate</param>
            <param name="fileType">file type</param>
            <returns>true if account is valid</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UnitilMarker">
            <summary>
            UNITIL utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UnitilMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.RgeMarker">
            <summary>
            RGE utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.RgeMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.RgeMarker814">
            <summary>
            Marker for files 814 from Rge utility
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.RgeMarker814.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.RgeMapper867">
            <summary>
            RGE utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.RgeMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.RgeMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.RgeMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ShortParser">
            <summary>
            Parses string properties of a EdiAccount instance.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ShortParser.#ctor(System.Linq.Expressions.Expression{System.Func{LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount,System.Int16}},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="propertySetter">Setter of the property that will be parsed</param>
            <param name="cellIndex">Positon of th data in the field</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ShortParser.Parse(System.String@,System.Char)">
            <summary>
            Parses field data
            </summary>
            <param name="fileRowCell">Row cell containing the field</param>
            <param name="fieldDelimiter">file delimiter used to split fileRowCell</param>
            <returns>Parsed value of the field</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileFactory">
            <summary>
            Factory for creating file and log objects
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileFactory.CreateManagedFile(System.String)">
            <summary>
            Place file in managed storage with app config flag for determining whether to delete original.
            </summary>
            <param name="file">file</param>
            <returns>Returnd a file context object of file in managed storage.</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileFactory.GetFileContents(LibertyPower.Business.CommonBusiness.FileManager.FileContext)">
            <summary>
            Get file contents from managed storage
            </summary>
            <param name="context">File context object</param>
            <returns>the file content in one string</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileFactory.GetManagedFileByFileGuid(System.String)">
            <summary>
            Gets a managed file by file guid
            </summary>
            <param name="fileGuid">Identifier in managed storage</param>
            <returns>Returns a file context object of the file.</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileFactory.CopyFilesFromManagedStorage(System.String[],System.String)">
            <summary>
            Copies files from managed storage to specified directory
            </summary>
            <param name="fileGuids">File identifier in managed storage</param>
            <param name="copyToDirectory">Destination directory for copied files.</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileFactory.GetEdiFileLogs(System.DateTime,System.String,System.String)">
            <summary>
            Gets edi file log records from database and builds list
            </summary>
            <param name="date">Date filter for log records returned</param>
            <param name="logType">Log type to filter on (errors, warnings, all)</param>
            <param name="fileType">File type to filter on (814, 867, status update files)</param>
            <returns>Returns an edi file log list</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileFactory.SearchEdiFileLogs(System.String,System.String)">
            <summary>
            Gets edi file log records from database and builds list
            </summary>
            <param name="field">Date filter for log records returned</param>
            <param name="searchText">Log type to filter on (errors, warnins, all)</param>
            <returns>Returns an edi file log list</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileFactory.GetEdiAccountLogs(System.String,System.String)">
            <summary>
            Gets edi account log records from database and builds list
            </summary>
            <param name="fileGuid">File identifier in managed storage</param>
            <param name="severity">Severity level of logs</param>
            <returns>Returns an edi account log list</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileFactory.CreateEdiFileLog(System.Data.DataRow)">
            <summary>
            Creates an edi file log object from data row
            </summary>
            <param name="dr">Data row</param>
            <returns>Returns an edi file log object</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileFactory.CreateEdiAccountLog(System.Data.DataRow)">
            <summary>
            Creates an edi account log object from data row
            </summary>
            <param name="dr">Data row</param>
            <returns>Returns an account file log object</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileFactory.GetAccountManagedFile(System.String,System.String,LibertyPower.Business.CommonBusiness.FileManager.AccountManagedFileType)">
            <summary>
            Gets an account managed file object for specified account number, utility code, and file type.
            </summary>
            <param name="accountNumber">Account number</param>
            <param name="utilityCode">Utility code</param>
            <param name="fileType">File type</param>
            <returns>Returns an account managed file object for specified account number, utility code, and file type.</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileFactory.InsertAccountManagedFile(System.String,System.String,LibertyPower.Business.CommonBusiness.FileManager.AccountManagedFileType,System.Guid)">
            <summary>
            Inserts an account managed file record.
            </summary>
            <param name="accountNumber">Account number</param>
            <param name="utilityCode">Utility code</param>
            <param name="fileType">Managed file type enum</param>
            <param name="fileGuid">Managed file guid</param>
            <returns>Returns an account managed file object from inserted data with record identifier.</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileFactory.AddManagedFile(System.String)">
            <summary>
            Adds file to managed files using file manager
            </summary>
            <param name="filePath">File path</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileFactory.GetWebAccountList(System.String,System.String)">
            <summary>
            Gets web account object and associated usage for specified account number and utility code.
            </summary>
            <param name="accountNumber">Account number</param>
            <param name="utilityCode">Utility code</param>
            <returns>Returns a web account object and associated usage for specified account number and utility code.</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileFactory.GetWebUsageList(System.String,System.String)">
            <summary>
            Gets web usage list for specified account number and utility code.
            </summary>
            <param name="accountNumber">Account number</param>
            <param name="utilityCode">Utility code</param>
            <returns>Returns a web usage list for specified account number and utility code.</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileFactory.GetFileAccountList(System.Collections.Generic.List{LibertyPower.Business.MarketManagement.UtilityManagement.UtilityAccount})">
            <summary>
            Gets a file account list from utility account list
            </summary>
            <param name="utilityAccounts">Utility account list</param>
            <returns>Returns a file account list from utility account list.</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileFactory.GetFileAccount(LibertyPower.Business.MarketManagement.UtilityManagement.UtilityAccount)">
            <summary>
            Gets a file account from utility account list
            </summary>
            <param name="utilityAccount">Utility account</param>
            <returns>Returns a file account from utility account list.</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileFactory.GetWebUsageList(LibertyPower.Business.MarketManagement.UtilityManagement.UsageDictionary)">
            <summary>
            Gets a web usage list from a usage dictionary
            </summary>
            <param name="usages">Usage dictionary</param>
            <returns>Returns a web usage list from a usage dictionary.</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileFactory.GetWebUsage(LibertyPower.Business.MarketManagement.UtilityManagement.Usage)">
            <summary>
            Gets a web usage object from a usage object
            </summary>
            <param name="usage">Usage object</param>
            <returns>Returns a web usage object from a usage object.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountList">
            <summary>
            Edi account list
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DuqMarker">
            <summary>
            DUQ utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DuqMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DuqMarker.MeasurementSignificanceCodeCellHistorical">
            <summary>
            Measurement Significance Code Cell (Historical records)
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NimoMarker">
            <summary>
            NIMO utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NimoMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UgiMarker">
            <summary>
            UGI utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UgiMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CmpMarker">
            <summary>
            CMP utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CmpMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UiMapper867">
            <summary>
            UI utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UiMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UiMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UiMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.TxnmpMapper867">
            <summary>
            TXNMP utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.TxnmpMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.TxnmpMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.TxnmpMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PgeMapper867">
            <summary>
            PGE utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PgeMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PgeMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PgeMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CenhudMapper867">
            <summary>
            CENHUD utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CenhudMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CenhudMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CenhudMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder">
            <summary>
            Responsible for building mappers for each utility
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.BuildMapperFor">
            <summary>
            Singleton instance of the class
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Ace">
            <summary>
            Creates a file mapper for a file of Ace
            </summary>
            <returns>File mapper for a file of Ace</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Allegmd">
            <summary>
            Creates a file mapper for a file of Allegheny
            </summary>
            <returns>File mapper for a file of Allegheny</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Bge">
            <summary>
            Creates a file mapper for a file of Bge
            </summary>
            <returns>File mapper for a file of Bge</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Coned">
            <summary>
            Creates a file mapper for a file of Coned
            </summary>
            <returns>File mapper for a file of Coned</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Clp">
            <summary>
            Creates a file mapper for a file of Clp
            </summary>
            <returns>File mapper for a file of Clp</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Cmp">
            <summary>
            Creates a file mapper for a file of Cmp
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Delde">
            <summary>
            Creates a file mapper for a file of Delde
            </summary>
            <returns>File mapper for a file of Delde</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Delmd">
            <summary>
            Creates a file mapper for a file of Delmd
            </summary>
            <returns>File mapper for a file of Delmd</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Duq">
            <summary>
            Creates a file mapper for a file of Duq
            </summary>
            <returns>File mapper for a file of Duq</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Jcpl">
            <summary>
            Creates a file mapper for a file of Jcpl
            </summary>
            <returns>File mapper for a file of Jcpl</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Meco">
            <summary>
            Creates a file mapper for a file of Meco
            </summary>
            <returns>File mapper for a file of Meco</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Neco">
            <summary>
            Creates a file mapper for a file of Neco
            </summary>
            <returns>File mapper for a file of Neco</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Nimo">
            <summary>
            Creates a file mapper for a file of Nimo
            </summary>
            <returns>File mapper for a file of Nimo</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.NStarBos">
            <summary>
            Creates a file mapper for a file of NStarBos
            </summary>
            <returns>File mapper for a file of NStarBos</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.NStarCamb">
            <summary>
            Creates a file mapper for a file of NStarCamb
            </summary>
            <returns>File mapper for a file of Nimo</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.NStarComm">
            <summary>
            Creates a file mapper for a file of NStarComm
            </summary>
            <returns>File mapper for a file of NStarComm</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.PepcoDC">
            <summary>
            Creates a file mapper for a file of PepcoDC
            </summary>
            <returns>File mapper for a file of PepcoDC</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.PepcoMD">
            <summary>
            Creates a file mapper for a file of PepcoMD
            </summary>
            <returns>File mapper for a file of PepcoMD</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.PSeg">
            <summary>
            Creates a file mapper for a file of PSeg
            </summary>
            <returns>File mapper for a file of PSeg</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Sharyland">
            <summary>
            Creates a file mapper for a file of Sharyland
            </summary>
            <returns>File mapper for a file of Sharyland</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.UI">
            <summary>
            Creates a file mapper for a file of UI
            </summary>
            <returns>File mapper for a file of UI</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.WMeco">
            <summary>
            Creates a file mapper for a file of WMECO
            </summary>
            <returns>File mapper for a file of WMECO</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Ameren">
            <summary>
            Creates a file mapper for a file of Ameren
            </summary>
            <returns>File mapper for a file of Ameren</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Aepce">
            <summary>
            Creates a file mapper for a file of Aepce
            </summary>
            <returns>File mapper for a file of Aepce</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Aepno">
            <summary>
            Creates a file mapper for a file of Aepno
            </summary>
            <returns>File mapper for a file of Aepno</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Cenhud">
            <summary>
            Creates a file mapper for a file of Cenhud
            </summary>
            <returns>File mapper for a file of Cenhud</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Comed">
            <summary>
            Creates a file mapper for a file of Comed
            </summary>
            <returns>File mapper for a file of Comed</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Ctpen">
            <summary>
            Creates a file mapper for a file of Ctpen
            </summary>
            <returns>File mapper for a file of Ctpen</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Nant">
            <summary>
            Creates a file mapper for a file of Nant
            </summary>
            <returns>File mapper for a file of Nant</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Nyseg">
            <summary>
            Creates a file mapper for a file of Nyseg
            </summary>
            <returns>File mapper for a file of Nyseg</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Oncor">
            <summary>
            Creates a file mapper for a file of Oncor
            </summary>
            <returns>File mapper for a file of Oncor</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Or">
            <summary>
            Creates a file mapper for a file of Or
            </summary>
            <returns>File mapper for a file of Or</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Pge">
            <summary>
            Creates a file mapper for a file of Pge
            </summary>
            <returns>File mapper for a file of Pge</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Ppl">
            <summary>
            Creates a file mapper for a file of Ppl
            </summary>
            <returns>File mapper for a file of Ppl</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Sce">
            <summary>
            Creates a file mapper for a file of Sce
            </summary>
            <returns>File mapper for a file of Sce</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Sdge">
            <summary>
            Creates a file mapper for a file of Sdge
            </summary>
            <returns>File mapper for a file of Sdge</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Txnmp">
            <summary>
            Creates a file mapper for a file of Txnmp
            </summary>
            <returns>File mapper for a file of Txnmp</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Ugi">
            <summary>
            Creates a file mapper for a file of Ugi
            </summary>
            <returns>File mapper for a file of Ugi</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Unitil">
            <summary>
            Creates a file mapper for a file of Unitil
            </summary>
            <returns>File mapper for a file of Unitil</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Rge">
            <summary>
            Creates a file mapper for a file of Rge
            </summary>
            <returns>File mapper for a file of Rge</returns>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Meted">
            <summary>
            Creates a file mapper for a file of METED
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Peco">
            <summary>
            Creates a file mapper for a file of PECO
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Penelec">
            <summary>
            Creates a file mapper for a file of PENELEC
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.Wpp">
            <summary>
            Creates a file mapper for a file of WPP
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileMapper814Builder.PennPr">
            <summary>
            Creates a file mapper for a file of PENNPR
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FieldResolver">
            <summary>
            Responsible for resolving the field name from a given FileRow
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FieldResolver.#ctor">
            <summary>
            Resolve all the fields
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FieldResolver.Resolve(System.String,System.Char)">
            <summary>
            Resolves the name of the field for a given FileRow
            </summary>
            <returns>Field</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountTexasMap814">
            <summary>
            Map for all utilities from Texas
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountTexasMap814.#ctor(LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase)">
            <summary>
            Map constructor
            </summary>
            <param name="marker">Marker containing the position of each data in the field</param>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityIdrUsage">
            <summary>
            Utility idr usage object that inherits from the idrUsage object
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityIdrUsage.PtdLoop">
            <summary>
            Ptd loop
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityIdrUsage.TransactionSetPurposeCode">
            <summary>
            Transaction set purpose code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityIdrUsage.UnitOfMeasurement">
            <summary>
            Unit of measurement
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AepnoMarker">
            <summary>
            AEPNO utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AepnoMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AmerenMarker">
            <summary>
            AMEREN utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AmerenMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.BgeMarker814">
            <summary>
            Marker for BGE utility
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.BgeMarker814.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.JcplMarker814">
            <summary>
            Marker for JCPL utility
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.JcplMarker814.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NecoMapper867">
            <summary>
            NECO utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NecoMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NecoMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NecoMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AlleghenyMapper867">
            <summary>
            ALLEGMD utility mapper for 867 file.
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AlleghenyMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AlleghenyMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AlleghenyMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DateHelper">
            <summary>
            DateHelper include essential computing needed to be done on date fields
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DateHelper.DefaultDate">
            <summary>
            Default date to be used accross the app
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DateHelper.ConvertDateString(System.String)">
            <summary>
            Converts a date string to a date time object
            </summary>
            <param name="date">Date string</param>
            <returns>Returns a date time objetc</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DateHelper.ConvertDateTimeString(System.String)">
            <summary>
            Converts a datetime string to a date time object
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DateHelper.ConvertDateTimeString(System.DateTime)">
            <summary>
            Converts a date time to a fixed size string
            </summary>
            <param name="date"></param>
            <returns>yyyymmddhhMM</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.JcplMarker">
            <summary>
            JCPL utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.JcplMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NecoMarker">
            <summary>
            NECO utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NecoMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.SharylandMarker814">
            <summary>
            Marker for SHARYLAND utility
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.SharylandMarker814.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NysegMarker814">
            <summary>
            Marker for NySeg utility
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NysegMarker814.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MecoMarker814">
            <summary>
            Marker for MECO utility
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MecoMarker814.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ConedMapper867">
            <summary>
            CONED utility mapper for 867 file.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ConedMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ConedMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ConedMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow"></param>
            <param name="rowDelimiter"></param>
            <param name="fieldDelimiter"></param>
            <returns></returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.BgeMapper867">
            <summary>
            BGE utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.BgeMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.BgeMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.BgeMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MeterMultiplierParser">
            <summary>
            Parser for meter multiplier property
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MeterMultiplierParser.#ctor(System.Linq.Expressions.Expression{System.Func{LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount,System.Int16}},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="propertySetter"></param>
            <param name="cellIndex"></param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MeterMultiplierParser.Parse(System.String@,System.Char)">
            <summary>
            Parses field data
            </summary>
            <param name="fileRowCell">Row cell containing the field</param>
            <param name="fieldDelimiter">file delimiter used to split fileRowCell</param>
            <returns>Parsed value of the field</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DateParser">
            <summary>
            Parses string properties of a EdiAccount instance.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DateParser.#ctor(System.Linq.Expressions.Expression{System.Func{LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount,System.DateTime}},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="propertySetter">Setter of the property that will be parsed</param>
            <param name="cellIndex">Positon of th data in the field</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DateParser.Parse(System.String@,System.Char)">
            <summary>
            Parses field data
            </summary>
            <param name="fileRowCell">Row cell containing the field</param>
            <param name="fieldDelimiter">file delimiter used to split fileRowCell</param>
            <returns>Parsed value of the field</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Logger">
            <summary>
            Class responsible for inserting log object data into database
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Logger.LogFileInfo(System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.Boolean,System.Int32)">
            <summary>
            Logs edi file log information
            </summary>
            <param name="ediFileLogID">Edi file log record identifier</param>
            <param name="fileGuid">File identifier in managed storage</param>
            <param name="fileName">File name</param>
            <param name="utilityCode">Utility identifier</param>
            <param name="attempts">Processing attempts</param>
            <param name="info">Log information</param>
            <param name="isProcessed">Boolean indicating if successfully processed</param>
            <param name="fileType">Enumerated file type</param>
            <returns>Returns an edi file log object with record ID and time stamp</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Logger.LogFileInfo(LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileLog)">
            <summary>
            Logs edi file log information taking edi file log object as parameter
            </summary>
            <param name="log">edi file log object</param>
            <returns>Returns an edi file log object with record ID and time stamp</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Logger.LogProcessInfo(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Logs edi process log information 
            </summary>
            <param name="ediProcessLogID">Edi process log record ID</param>
            <param name="ediFileLogID">Edi file log record ID</param>
            <param name="info">Log information</param>
            <param name="isProcessed">Boolean indicating if successfully processed</param>
            <returns>Returns an edi process log object with record ID and time stamp</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Logger.LogAccountInfo(System.Int32,System.String,System.String,System.String,LibertyPower.Business.CommonBusiness.CommonRules.BrokenRuleSeverity)">
            <summary>
            Logs edi account log information
            </summary>
            <param name="ediProcessLogID">Edi process log record ID</param>
            <param name="accountNumber">Account identifier</param>
            <param name="dunsNumber">DUNS number</param>
            <param name="info">Log information</param>
            <param name="severity">Severity level of exception</param>
            <returns>Returns an edi account log object with record ID and time stamp</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Logger.WriteLogFile(System.String,System.String)">
            <summary>
            Writes to a log file
            </summary>
            <param name="file">File name with full path</param>
            <param name="content">File content</param>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRowList">
            <summary>
            File row 
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ExceptionLogger">
            <summary>
            Class for logging exxceptions
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ExceptionLogger.LogFileExceptions(LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileLog,LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileConfigDataExistsRule)">
            <summary>
            Logs edi file exceptions
            </summary>
            <param name="ediFileLog">Edi file log object</param>
            <param name="configRule">File configuration data exists business rule</param>
            <returns>Returns an edi file log object that conatins record id and timestamp.</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ExceptionLogger.LogFileExceptions(LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileLog,System.String)">
            <summary>
            Logs edi file exceptions
            </summary>
            <param name="ediFileLog">Edi file log object</param>
            <param name="info">Exception message</param>
            <returns>Returns an edi file log object that conatins record id and timestamp.</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ExceptionLogger.LogAccountExceptions(LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFile@)">
            <summary>
            Logs edi account exceptions
            </summary>
            <param name="ediFile">Edi file log object</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ExceptionLogger.LogAccountExceptions(System.String,System.Int32,LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileType,LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount@)">
            <summary>
            we
            </summary>
            <param name="fileGuid"></param>
            <param name="ediProcessLogID"></param>
            <param name="fileType"></param>
            <param name="account"></param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ExceptionLogger.LogEdiException(System.String,System.String,System.String)">
            <summary>
            Logs edi exceptions
            </summary>
            <param name="fileGuid">File identifier in managed storgae</param>
            <param name="fileName">File name</param>
            <param name="info">Exception information</param>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiProcessLog">
            <summary>
            Edi process log
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiProcessLog.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiProcessLog.#ctor(System.Int32,System.Int32,System.String,System.Boolean,System.DateTime,System.DateTime)">
            <summary>
            Constructor that takes all properties of object.
            </summary>
            <param name="id">Edi process log record identifier</param>
            <param name="ediFileLogId">Edi file log record identifier</param>
            <param name="info">Log information</param>
            <param name="isProcessed">Boolean indicating if successfully processed</param>
            <param name="timeStampInsert">Time stamp of record insert</param>
            <param name="timeStampUpdate">Time stamp of record update</param>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiProcessLog.ID">
            <summary>
            Edi process log record identifier
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiProcessLog.EdiFileLogID">
            <summary>
            Edi file log record identifier
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiProcessLog.Information">
            <summary>
            Log information
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiProcessLog.IsProcessed">
            <summary>
            Boolean indicating if successfully processed
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiProcessLog.TimeStampInsert">
            <summary>
            Time stamp of record insert
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiProcessLog.TimeStampUpdate">
            <summary>
            Time stamp of record update
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiMappingFactory">
            <summary>
            Class for mapping related methods
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiMappingFactory.MapEdiRawData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount)">
            <summary>
            Gets mapped data for EDI raw data
            </summary>
            <param name="ediAccount">Edi account object</param>
            <returns>Returns a utility account object with mapped data</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiMappingFactory.UpdateDatabasesWithMappedData(LibertyPower.Business.MarketManagement.UtilityManagement.UtilityAccount)">
            <summary>
            Updates all necessary databases with mapped data
            </summary>
            <param name="account">Utility account object</param>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccount">
            <summary>
            Utility usage account object that inherits from utility account object
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccount.UtilityUsageList">
            <summary>
            Utility usage list
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccount.DunsNumber">
            <summary>
            DUNS number
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccount.PreviousAccountNumber">
            <summary>
            Previous account number
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccount.BillCalculation">
            <summary>
            Identifies the party that is to calculate the charges on the bill (LDC/ESP/Dual).
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccount.BillingType">
            <summary>
            Identifies whether the bill is consolidated by the Utility (LDC), by LP (ESP), or whether each party will render their own bill (DUAL).
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccount.MeterMultiplier">
            <summary>
            Meter constant or meter multiplier. Billed Usage = (Ending Meter Reading - Beginning Meter Reading) * Meter Multiplier
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccount.MeterType">
            <summary>
            Meter type used to identify the type of consumption measured by this meter and the interval between measurements
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccount.MonthsToComputeKwh">
            <summary>
            Number of months over which Total kWh are calculated.
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccount.TransactionType">
            <summary>
            Beginning Segment: 06-Confirmation; 11-Response; 13-Request; etc.
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccount.ServiceType">
            <summary>
            Electric Service (EL), Gas Service (GAS), Water Service (WA), etc.
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccount.ProductType">
            <summary>
            Customer Enrollment (CE), Historical Usage (HU), Historical Interval (HI), etc.
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccount.ProductAltType">
            <summary>
            Product (Alternate) Type
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccount.EnrollmentStatus">
            <summary>
            Enrollment Status
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccount.ContractStartDate">
            <summary>
            Contract Start Date
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccount.ContractEndDate">
            <summary>
            Contract End Date
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccount.AnnualUsage">
            <summary>
            Annual Usage
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccount.EspAccount">
            <summary>
            Esp account number
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccount.ContactName">
            <summary>
            Contact name information
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccount.EmailAddress">
            <summary>
            Contact email address information
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccount.Telephone">
            <summary>
            Contact telephone information
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccount.HomePhone">
            <summary>
            Contact home phone information
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccount.WorkPhone">
            <summary>
            Contact work phone information
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccount.Fax">
            <summary>
            Contact fax information
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccount.IdrUsageList">
            <summary>
            IDR usage list
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccount.MeterNumber">
            <summary>
            Meter number
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccount.ServiceDeliveryPoint">
            <summary>
            Service delivery point, also called location number (MISO)
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.WmecoMarker">
            <summary>
            WMECO utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.WmecoMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PepcomdMarker">
            <summary>
            PEPCO-MD utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PepcomdMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UnitilMapper867">
            <summary>
            UNITIL utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UnitilMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UnitilMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UnitilMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Bge814Mapper">
            <summary>
            Map for BGE
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Bge814Mapper.#ctor(LibertyPower.Business.MarketManagement.EdiParser.FileParser.MarkerBase)">
            <summary>
            BGE map constructor
            </summary>
            <param name="maker">Marker containing the position of each data in the field</param>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileTypeDiscoverer">
            <summary>
            Determines if file is 814 or 867
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileTypeDiscoverer.GetFileType(System.String@,System.Char)">
            <summary>
            Determines the edi file type
            </summary>
            <param name="fileContent">Content of file</param>
            <param name="delimiter">Character delimiter</param>
            <returns>Returns an edi file type enum</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.SerializationMethod">
            <summary>
            Defines how to serialize class members (fields and properties)
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.SerializationMethod.Shallow">
            <summary>
            Serialize public members
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.SerializationMethod.Deep">
            <summary>
            Serialize private, friend, and public members
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer">
             <summary>
             Serialize and deserialize objects into and from Xml.
             Write operations serialize the object into various target mediums.
             Read operations deserialize the object from various source mediums.
             </summary>
             <remarks>
             Designed and Created by Larry Steinle, 2006.
             
             Deserializing structure data types is not supported.
             Serialization/Deserialization of circular references is not supported.
             Designed for use with System.Xml.Serialization.IXmlSerializable.
             
             Standard FreeWare Licensing Applies. This software is to be used free of charge and may not be sold.
            
             Resources:
             http://www.programmersheaven.com/2/Dot-Net-Reflection-Part-1-Page2
             Elements are used with inner text at all times. Attributes aren't supported. 
             This ensures that we won't have any translation problems when loading the Xml into the target object.
             Note: This class does not support deserializing structures.
            
             Reason Structures Aren't Supported for Deserialization: http://www.dotnet247.com/247reference/msgs/31/158508.aspx
             The SetValue method takes an object parameter, which causes a boxing
             operation. SetValue ends up being called on the heap-based boxed copy
             rather than the stack-based copy. You need to unbox the heap-based copy
             back to the stack to see the end result of the SetValue call.
             
             FIX: December 9, 2006 - Code Changes to Correctly Manage IDictionary Object Types
             When serializing/deserializing classes that inherit from IDictionary the property
             IncludeClassNameAttribute must be set to a value of True. This is because the item
             property for an IDictionary class cannot be interogated for it's data type. The item
             property always returns a DictionaryEntry which has a value type of object.
             </remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.ReadXml(System.Xml.XmlReader,System.Object)">
            <summary>
            Deserialize Xml into the target object.
            </summary>
            <param name="reader">The source of the Xml to load.</param>
            <param name="target">The destination for the Xml.</param>
            <remarks>
            The target must be passed in ByVal and returned to support data type variable serialization.
            </remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.ReadXml(System.Xml.XmlNode,System.Object)">
            <summary>
            Deserialize Xml into the target object.
            </summary>
            <param name="node">The Xml to load into the object.</param>
            <param name="target">The destination for the Xml.</param>
            <remarks></remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.ReadXml(System.Xml.XmlDocument,System.Object)">
            <summary>
            Deserialize Xml into the target object.
            </summary>
            <param name="document">The Xml to load into the object.</param>
            <param name="target">The destination for the Xml.</param>
            <remarks></remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.ReadXml(System.String,System.Object)">
            <summary>
            Deserialize Xml into the target object.
            </summary>
            <param name="path">A path to the fileContents with the Xml to load into the object.</param>
            <param name="target">The destination for the Xml.</param>
            <remarks></remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.ReadXml(System.Text.StringBuilder,System.Object)">
            <summary>
            Deserialize Xml into the target object.
            </summary>
            <param name="text">The Xml to load into the object.</param>
            <param name="target">The destination for the Xml.</param>
            <remarks></remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.WriteDocument(System.Object)">
            <summary>
            Serialize the source object into an XmlDocument following "Shallow Copy" business logic.
            </summary>
            <param name="source">The object to serialize.</param>
            <returns>The serialized object.</returns>
            <remarks></remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.WriteFile(System.Object,System.String)">
            <summary>
            Serialize the source object into a fileContents following "Shallow Copy" business logic.
            </summary>
            <param name="source">The object to serialize.</param>
            <param name="path">The fileContents to save the Xml into.</param>
            <remarks>
            If the fileContents exists serialization is terminated.
            </remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.WriteFile(System.Object,System.String,System.Boolean)">
            <summary>
            Serialize the source object into a fileContents following "Shallow Copy" business logic.
            </summary>
            <param name="source">The object to serialize.</param>
            <param name="path">The fileContents to save the Xml into.</param>
            <param name="replaceFile">
            If true the fileContents is deleted before the contents are saved.
            If false and the fileContents exists serialization is terminated.
            </param>
            <remarks></remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.WriteString(System.Object)">
            <summary>
            Serialize the source object into a string following "Shallow Copy" business logic.
            </summary>
            <param name="source">The object to serialize.</param>
            <returns>The serialized object.</returns>
            <remarks></remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.WriteText(System.Object)">
            <summary>
            Serialize the source object into an StringBuilder following "Shallow Copy" business logic.
            </summary>
            <param name="source">The object to serialize.</param>
            <returns>The serialized object.</returns>
            <remarks></remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.WriteXml(System.Object,System.Xml.XmlWriter)">
            <summary>
            Serialize the source object into an XmlWriter following "Shallow Copy" business logic.
            </summary>
            <param name="source">The object to serialize.</param>
            <param name="writer">The destination for the xml.</param>
            <remarks>
            Shallow Copy means that only the exposed properties are serialized. 
            Hidden fields, properties, or protected properties are ignored.
            </remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.WriteXml(System.Object,System.Xml.XmlWriter,System.String)">
            <summary>
            Serialize the source object into an XmlWriter following "Shallow Copy" business logic.
            </summary>
            <param name="source">The object to serialize.</param>
            <param name="writer">The destination for the xml.</param>
            <param name="propertyName">If serializing a class property provide the name of the property. If serializing a class then set to null.</param>
            <remarks>
            Shallow Copy means that only the exposed properties are serialized. 
            Hidden fields, properties, or protected properties are ignored.
            </remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.ReadFields(System.Xml.XmlReader,System.Object)">
            <summary>
            Assings the Xml values to the fields.
            </summary>
            <param name="reader">The bufferred xml to analyze.</param>
            <param name="target">The class containing the fields to update.</param>
            <returns>The updated class.</returns>
            <remarks></remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.ReadProperties(System.Xml.XmlReader,System.Object)">
            <summary>
            Assings the Xml values to the properties.
            </summary>
            <param name="reader">The bufferred xml to analyze.</param>
            <param name="target">The class containing the fields to update.</param>
            <returns>The updated class.</returns>
            <remarks></remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.ReadChildren(System.Xml.XmlReader,System.Object,System.Object)">
            <summary>
            Analyzes the Xml to build the child objects adding them to the list property.
            </summary>
            <param name="reader">The bufferred xml to analyze.</param>
            <param name="target">The class containing the list field to update.</param>
            <param name="propertyMember">The IEnumerable property.</param>
            <returns>The updated class.</returns>
            <remarks></remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.IsNumeric(System.String)">
            <summary>
            Determines if string is a numeric type
            </summary>
            <param name="s">String to test</param>
            <returns>Returns a boolean indicating if string is a numeric type.</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.WriteFields(System.Object,System.Xml.XmlWriter)">
            <summary>
            Translates the fields of object, target, into Xml Elements.
            </summary>
            <param name="source">The object to serialize.</param>
            <param name="writer">The destination for the xml.</param>
            <remarks></remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.WriteProperties(System.Object,System.Xml.XmlWriter)">
            <summary>
            Translates the properties of object, target, into Xml Elements.
            </summary>
            <param name="source">The object to serialize.</param>
            <param name="writer">The destination for the xml.</param>
            <remarks></remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.MoveToRootNode(System.Xml.XmlReader)">
            <summary>
            Advances to the first node
            </summary>
            <param name="reader">The bufferred xml to analyze.</param>
            <remarks></remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.MoveToValueNode(System.Xml.XmlReader)">
            <summary>
            Advance to the inner node, the tag between the open and closing element tags to access the element's value.
            </summary>
            <param name="reader">The bufferred xml to analyze.</param>
            <remarks></remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.MoveToNextNode(System.Xml.XmlReader)">
            <summary>
            Advance to the next xml element.
            </summary>
            <param name="reader">The bufferred xml to analyze.</param>
            <remarks></remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.MoveToNextTag(System.Xml.XmlReader)">
            <summary>
            Advance to the next xml tag.
            </summary>
            <param name="reader">The bufferred xml to analyze.</param>
            <remarks></remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.GetAttributes(System.Xml.XmlReader)">
            <summary>
            Returns a key/value pair representing the attributes in the element.
            </summary>
            <param name="reader">The bufferred xml to analyze.</param>
            <returns>A sorted list of the attributes with the name as the key and the value as the value.</returns>
            <remarks>Executing this method querries the current node for the attributes without advancing to the next node.</remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.IsDataType(System.Object)">
            <summary>
            Identifies if the object is a data type.
            </summary>
            <param name="dataValue">The object to test.</param>
            <returns>true if the value is a data type.</returns>
            <remarks></remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.IsDataType(System.Object,System.Boolean)">
            <summary>
            Identifies if the object is a data type.
            </summary>
            <param name="dataValue">The object to test.</param>
            <param name="valueIsTypeName">Indicates that the dataValue is the name of the data type and not the actual data value.</param>
            <returns>true if the value is a data type.</returns>
            <remarks></remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.CreateClass(System.Collections.SortedList,System.Object,System.Reflection.MemberInfo)">
            <summary>
            Instantiates a new class.
            </summary>
            <param name="attributes">The attributes from the Xml used to identify the class type.</param>
            <param name="target">The class containing the reference to the member to create.</param>
            <param name="member">Information about the member to create.</param>
            <returns>The instantiated class.</returns>
            <remarks></remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.InstantiateMember(System.Reflection.Assembly,System.String)">
            <summary>
            Creates an instance of the class.
            </summary>
            <param name="classAssembly">The assembly where the class to create is stored.</param>
            <param name="className">The fullname of the class to create.</param>
            <returns>If successful the instantiated class, otherwise null.</returns>
            <remarks></remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.SaveValue(System.Object@,System.String,System.Object)">
            <summary>
            Assigns a casted value to the target object.
            </summary>
            <param name="target">The object to update.</param>
            <param name="valueType">The type to cast the value to.</param>
            <param name="dataValue">The value to cast and assign.</param>
            <remarks>
            This has to be done to support assignment to values of type object.
            Without this code all values would be assigned as strings.
            </remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.SaveValue(System.Object@,System.Reflection.FieldInfo,System.Object)">
            <summary>
            Assigns a strongly-typed data type to the member.
            </summary>
            <param name="target">The object containing the field.</param>
            <param name="targetField">A FieldInfo object representing the field to update.</param>
            <param name="dataValue">The value to assign to the field.</param>
            <remarks>
            This has to be done to support assignment to fields of type object.
            Without this code all values would be assigned as strings.
            </remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.SaveValue(System.Object@,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Assigns a strongly-typed data type to the member.
            </summary>
            <param name="target">The object containing the property.</param>
            <param name="targetProperty">A PropertyInfo object representing the property to update.</param>
            <param name="dataValue">The value to assign to the property.</param>
            <remarks>
            This has to be done to support assignment to properties of type object.
            Without this code all values would be assigned as strings.
            </remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.ExecuteAddMethod(System.Object,System.Object,System.Object)">
            <summary>
            Executes the add method of the list object when supported.
            </summary>
            <param name="target">The class containing the method to execute.</param>
            <param name="key">The key value for DictionaryEntries. Use null if a type other than DictionaryEntry.</param>
            <param name="dataValue">The value to assign to the class.</param>
            <remarks></remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.ExecuteEnqueueMethod(System.Object,System.Object,System.Object)">
            <summary>
            Executes the Enqueue method of the list object when supported.
            </summary>
            <param name="target">The class containing the method to execute.</param>
            <param name="key">The key value for DictionaryEntries. Use null if a type other than DictionaryEntry.</param>
            <param name="dataValue">The value to assign to the class.</param>
            <remarks></remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.ExecutePushMethod(System.Object,System.Object,System.Object)">
            <summary>
            Executes the Push method of the list object when supported.
            </summary>
            <param name="target">The class containing the method to execute.</param>
            <param name="key">The key value for DictionaryEntries. Use null if a type other than DictionaryEntry.</param>
            <param name="dataValue">The value to assign to the class.</param>
            <remarks></remarks>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.ExecuteClearMethod(System.Object)">
            <summary>
            Executes the clear method of the list object when supported.
            </summary>
            <param name="target">The class containing the method to execute.</param>
            <remarks></remarks>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.CDataStorage">
            <summary>
            Serialize string values into xml CData tags.
            </summary>
            <value>true to enable CData serialization, False to disable and store as string.</value>
            <returns>Boolean value identifing property state.</returns>
            <remarks>When enabled strings and enumerators are stored in CData tags.</remarks>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.IgnoreWarnings">
            <summary>
            Ignore warnings and allow operation to continue.
            </summary>
            <value>true to ignore warning errors, False to throw warning errors.</value>
            <returns>Boolean value identifing property state.</returns>
            <remarks>Use with caution as deserialization can load objects with incomplete data.</remarks>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.IncludeClassNameAttribute">
            <summary>
            Record the name of the class when serializing to ensure that the
            class can be deserialized.
            </summary>
            <value>true to include the className, False to exclude it.</value>
            <returns>The state of the property.</returns>
            <remarks></remarks>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.Method">
            <summary>
            Identifies how the class should be serialized.
            </summary>
            <value>Shallow to serialize public fields and properties. Deep to serialize private, friend, and public fields and properties.</value>
            <returns>The state of the property.</returns>
            <remarks></remarks>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.CustomXmlSerializer.BindingCriteria">
            <summary>
            Defines theSystem.Reflection BindingFlags required to support the selected SerializationMethod.
            </summary>
            <returns>The state of the property.</returns>
            <remarks></remarks>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount">
            <summary>
            Edi account object
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that takes all properties of account object.
            </summary>
            <param name="accountNumber">Account identifier</param>
            <param name="billGroup">Bill group</param>
            <param name="billingAccount">Billing account number</param>
            <param name="customerName">Customer name</param>
            <param name="icap">Icap</param>
            <param name="loadProfile">Load profile</param>
            <param name="nameKey">Name key</param>
            <param name="previousAccountNumber">Previous account number</param>
            <param name="rateClass">Rate class</param>
            <param name="marketCode">Market identifier</param>
            <param name="tcap">Tcap</param>
            <param name="utilityCode">Utility identifier</param>
            <param name="zoneCode">Zone code</param>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.AccountNumber">
            <summary>
            Account identifier
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.BillGroup">
            <summary>
            Bill group
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.BillingAccount">
            <summary>
            Billing account number
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.CustomerName">
            <summary>
            Customer name
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.DunsNumber">
            <summary>
            DUNS number
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.Icap">
            <summary>
            Icap
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.LoadProfile">
            <summary>
            Load profile
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.NameKey">
            <summary>
            Name key
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.PreviousAccountNumber">
            <summary>
            Previous account number
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.RateClass">
            <summary>
            Rate class
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.RetailMarketCode">
            <summary>
            Market identifier
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.Tcap">
            <summary>
            Tcap
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.UtilityCode">
            <summary>
            Utility identifier
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.UtilityIdentifier">
            <summary>
            Utility identifier (for ORNJ)
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.ZoneCode">
            <summary>
            Zone identifier
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.EdiUsageList">
            <summary>
            Edi usage list
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.AccountDataExistsRule">
            <summary>
            Account data exists business rule
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.UsageListDataExistsRule">
            <summary>
            Usage list data exists business rule
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.BillingAddress">
            <summary>
            BillingAddress identifier
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.AccountStatus">
            <summary>
            Account's Status (flowing, moved, closed, etc)
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.BillingType">
            <summary>
            Identifies whether the bill is consolidated by the Utility (LDC), by LP (ESP), or whether each party will render their own bill (DUAL).
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.BillCalculation">
            <summary>
            Identifies the party that is to calculate the charges on the bill (LDC/ESP/DUAL).
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.ServicePeriodStart">
            <summary>
            Date that the service with the Service Provider will start.
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.ServicePeriodEnd">
            <summary>
            Date that the service with the Service Provider will end.
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.AnnualUsage">
            <summary>
            Annual Usage (Total Kwh)
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.MonthsToComputeKwh">
            <summary>
            Number of months over which Total kWh are calculated.
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.MeterType">
            <summary>
            Meter type used to identify the type of consumption measured by this meter and the interval between measurements
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.MeterMultiplier">
            <summary>
            Meter constant or meter multiplier. Billed Usage = (Ending Meter Reading - Beginning Meter Reading) * Meter Multiplier
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.TransactionType">
            <summary>
            Beginning Segment: 06-Confirmation; 11-Response; 13-Request; etc.
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.ServiceType">
            <summary>
            Electric Service (EL), Gas Service (GAS), Water Service (WA), etc.
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.ProductType">
            <summary>
            Customer Enrollment (CE), Historical Usage (HU), Historical Interval (HI), etc.
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.ProductAltType">
            <summary>
            Electronic Credit (EC), Special Meter Read (SR), etc.
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.ServiceAddress">
            <summary>
            Service Address
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.BillTo">
            <summary>
            Bill To Customer (Contact) Name
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.Contact">
            <summary>
            Contact information 
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.MeterNumber">
            <summary>
            Meter Number
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.EspAccount">
            <summary>
            Esp Account Number
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.Voltage">
            <summary>
            Voltage description
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.LossFactor">
            <summary>
            Loss factor
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.IdrUsageList">
            <summary>
            Idr Usage List
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount.ServiceDeliveryPoint">
            <summary>
            Service delivery point, also called Location number in MISO
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileNotTruncatedRule">
            <summary>
            Business rule that ensures that the utility file is not truncated.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileNotTruncatedRule.#ctor(System.String@,System.Char)">
            <summary>
            Constructor that takes the file content and character delimiter
            </summary>
            <param name="fileContent">Contents of file</param>
            <param name="delimiter">Character delimiter</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileNotTruncatedRule.Validate">
            <summary>
            Validates the parameter(s) passed in to the constructor returning a boolean indicating success or failure.
            </summary>
            <returns>Returns a boolean indicating success or failure.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DataExistsRule">
            <summary>
            Business rule that ensures that data exists.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DataExistsRule.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor that takes an account number, property name and data.
            </summary>
            <param name="accountNumber">Account identifier</param>
            <param name="property">Property name</param>
            <param name="data">Property data</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DataExistsRule.Validate">
            <summary>
            Validates the parameter(s) passed in to the constructor returning a boolean indicating success or failure.
            </summary>
            <returns>Returns a boolean indicating success or failure.</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DataExistsRule.ValidateByType(System.Object)">
            <summary>
            Validates value according to its type: datetime, decimal, string
            </summary>
            <param name="objToValidate">value to validate</param>
            <returns>True if value is valid</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AlleghenyMarker">
            <summary>
            ALLEGMD utility mapper.
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AlleghenyMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.WmecoMapper867">
            <summary>
            WMECO utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.WmecoMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.WmecoMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.WmecoMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NantMapper867">
            <summary>
            NANT utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NantMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NantMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NantMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityCodeResolver">
            <summary>
            Utility Code Resolver
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityCodeResolver.#cctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityCodeResolver.ForDunsNumber(System.String)">
            <summary>
            Given a duns number, this method returns that same duns number
            </summary>
            <param name="dunsNumber"></param>
            <returns>UtilityCodeResolver instance</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityCodeResolver.#ctor(System.String)">
            <summary>
            Constructor..
            </summary>
            <param name="dunsNumber"></param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityCodeResolver.Resolve">
            <summary>
            Given a duns number, it returns a utility code
            </summary>
            <returns>utility code</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DunsNumberParser">
            <summary>
            Responsible for parsing a FileRow instance into DunsNumber property of EdiAccount
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DunsNumberParser.#ctor(System.Linq.Expressions.Expression{System.Func{LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount,System.String}},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="dusnNumberSetter">Setter expression of DunsNumber property of EdiAccount class</param>
            <param name="cellIndex"></param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DunsNumberParser.SetValue(LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount,System.String@,System.Char)">
            <summary>
            Sets the value of the DunsNumber for the target account and sets its utility code based on this DunsNumber
            </summary>
            <param name="target">EdiAccount target instance</param>
            <param name="fileCellContent">the content of the row</param>
            <param name="fieldDelimiter">the field delimiter</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DunsNumberParser.Parse(System.String@,System.Char)">
            <summary>
            Parses a FileRow instance into DusnNumber property of EdiAccount
            </summary>
            <param name="fileRowCell">Row cell containing the field</param>
            <param name="fieldDelimiter">file delimiter used to split fileRowCell</param>
            <returns>Parsed value of the FileRow instance</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileStatusInfo">
            <summary>
            File status info enum
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileStatusInfo.FileInManagedStorage">
            <summary>
            File In Managed Storage
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileStatusInfo.FileHasOneOrMoreErrors">
            <summary>
            File Has One Or More Errors
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileStatusInfo.FileReprocessing">
            <summary>
            File Reprocessing
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileStatusInfo.FileSuccessfullyParsed">
            <summary>
            File Successfully Parsed
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileStatusInfo.FileEightOneFour">
            <summary>
            814 File
            </summary>
        </member>
        <member name="F:LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileStatusInfo.FileStatusUpdate">
            <summary>
            Status Update File
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountLog">
            <summary>
            Edi account log object
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountLog.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountLog.#ctor(System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that takes all properties ob edi account log.
            </summary>
            <param name="ediFileLogID">Edi file log record identifier</param>
            <param name="ediProcessLogID">Edi process log record identifier</param>
            <param name="accountNumber">Account identifier</param>
            <param name="utilityCode">Utility identifier</param>
            <param name="dunsNumber">DUNS number</param>
            <param name="information">Log information</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountLog.#ctor(System.Int32,System.Int32,System.String,System.String,System.String,LibertyPower.Business.CommonBusiness.CommonRules.BrokenRuleSeverity,System.DateTime)">
            <summary>
            Constructor that takes all properties ob edi account log.
            </summary>
            <param name="id">Edi account log record identifier</param>
            <param name="ediProcessLogID">Edi process log record identifier</param>
            <param name="accountNumber">Account identifier</param>
            <param name="dunsNumber">DUNS number</param>
            <param name="information">Log information</param>
            <param name="severity">Severity of an exception</param>
            <param name="timeStamp">Time stamp of record</param>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountLog.ID">
            <summary>
            Edi account log record identifier
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountLog.EdiFileLogID">
            <summary>
            Edi file log record identifier
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountLog.EdiProcessLogID">
            <summary>
            Edi process log record identifier
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountLog.AccountNumber">
            <summary>
            Account identifier
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountLog.UtilityCode">
            <summary>
            Utility identifier
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountLog.DunsNumber">
            <summary>
            DUNS number
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountLog.Information">
            <summary>
            Log information
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountLog.Severity">
            <summary>
            Severity of an exception
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountLog.TimeStamp">
            <summary>
            Time stamp of record
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ClpMarker">
            <summary>
            CLP utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ClpMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Serializer">
            <summary>
            Class for serializing objects
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Serializer.SerializeEdiFile(LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFile,System.String)">
            <summary>
            
            </summary>
            <param name="ediFile">Edi file object</param>
            <param name="fileSuffix">File name suffix</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Serializer.SerializeEdiFileList(LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileList,System.String)">
            <summary>
            Serializes eid file list
            </summary>
            <param name="list">Edi file list</param>
            <param name="fileSuffix">File name suffix</param>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AccountDataExistsRule">
            <summary>
            Business rule that ensures that account data exists
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AccountDataExistsRule.#ctor(LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount@,LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileType)">
            <summary>
            Constructor that takes an edi account list + file type
            </summary>
            <param name="account">Edi account list</param>
            <param name="fileType">867/814, etc.</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AccountDataExistsRule.Validate">
            <summary>
            Validates the parameter(s) passed in to the constructor returning a boolean indicating success or failure.
            </summary>
            <returns>Returns a boolean indicating success or failure.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DelmarvaMarker">
            <summary>
            DELDE utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DelmarvaMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.TxnmpMarker">
            <summary>
            TXNMP utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.TxnmpMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.SdgeMarker">
            <summary>
            SDGE utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.SdgeMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MetedPenelecMaker">
            <summary>
            Both Meted and Penelec come in one single file
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MetedPenelecMaker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MetedMarker814">
            <summary>
            Marker for METED
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.MetedMarker814.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NysegMapper867">
            <summary>
            NYSEG utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NysegMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NysegMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NysegMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.SceMapper867">
            <summary>
            SCE utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.SceMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.SceMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.SceMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AceMapper814">
            <summary>
            ACE utility mapper for 814 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AceMapper814.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AceMapper814.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AceMapper814.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes">
            <summary>
            Contains codes of all utilities
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.CodeOf">
            <summary>
            Singleton instance of the class
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Ace">
            <summary>
            Gets ACE (ATLANTIC CITY ELECTRIC) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Aepce">
            <summary>
            Gets AEP Texas Central (Corpus Christi Area) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Aepno">
            <summary>
            Gets AEP Texas North (Abilene Area) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Allegmd">
            <summary>
            Gets ALLEGMD (ALLEGHENY POWER) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Ameren">
            <summary>
            Gets AMEREN ELECTRIC utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Bge">
            <summary>
            Gets BGE (BALTIMORE GAS AND ELECTRIC) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Cenhud">
            <summary>
            Gets CENHUD (CENTRAL HUDSON) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Clp">
            <summary>
            Gets CLP (CONNECTICUT LIGHT AND POWER) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Cmp">
            <summary>
            Gets CMP (CENTRAL MAINE POWER) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Comed">
            <summary>
            Gets COMED (COMMONWEALTH EDISON) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Coned">
            <summary>
            Gets CONED (CON EDISON COMPANY OF NEW YORK) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Ctpen">
            <summary>
            Gets Centerpoint Energy (Houston Area) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Delde">
            <summary>
            Gets DELDE (DELMARVA POWER) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Delmd">
            <summary>
            Gets DELMD (DELMARVA POWER) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Duq">
            <summary>
            Gets DUQ (DUQUESNE LIGHT AND POWER) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Jcpl">
            <summary>
            Gets JCPL (JERSEY CENTRAL POWER LIGHT) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Meco">
            <summary>
            Gets MECO (MASSACHUSETTS ELECTRIC CO - NATIONAL GRID) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Nant">
            <summary>
            Gets NANT (NANTUCKET ELECTRIC CO. - NATIONAL GRID) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Neco">
            <summary>
            Gets NECO (NARRANGANSETT ELECTRIC CO. - NATIONAL GRID) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Nimo">
            <summary>
            Gets NIMO (NIAGRA MOHAK) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.NStarBos">
            <summary>
            Gets NSTAR-BOS (NSTAR BOSTON EDISON) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.NStarCamb">
            <summary>
            Gets NSTAR-CAMB (NSTAR CAMBRIDGE) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.NStarComm">
            <summary>
            Gets NSTAR-COMM (NSTAR COMMONWEALTH) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.NySeg">
            <summary>
            Gets NYSEG (NEW YORK STATE ELECTRIC AND GAS) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Oncor">
            <summary>
            Gets Oncor Electric Delivery (DFW Area) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Or">
            <summary>
            Gets ORANGE AND ROCKLAND utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.PepcoDC">
            <summary>
            Gets PEPCO-DC (POTOMAC ELECTRIC POWER COMPANY DC) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.PepcoMD">
            <summary>
            Gets PEPCO-MD (POTOMAC ELECTRIC POWER COMPANY MARYLAND) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Pge">
            <summary>
            Gets PGE (PACIFIC GAS AND ELECTRIC COMPANY) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Ppl">
            <summary>
            Gets PPL (PENNSYLVANIA POWER AND LIGHT) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.PSeg">
            <summary>
            Gets PSEG (PUBLIC SERVICE ELECTRIC GAS) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Rge">
            <summary>
            Gets RGE (ROCHESTER GAS ELECTRIC) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Sce">
            <summary>
            Gets SCE (SOUTHERN CALIFORNIA EDISON) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Sdge">
            <summary>
            Gets SDGE (SAN DIEGO GAS AND ELECTRIC) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Sharyland">
            <summary>
            Gets SHARYLAND UTILITIES utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Txnmp">
            <summary>
            Gets TNMP (Texas New Mexico Power Area) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Ugi">
            <summary>
            Gets UGI (UGI UTILITIES) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Ui">
            <summary>
            Gets UI (UNITED ILLUMINATING) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Unitil">
            <summary>
            Gets UNITIL (FITCHBURG GAS ELECTRIC CO) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.WMeco">
            <summary>
            Gets WMECO (WESTERN MASSACHUSETTS CO) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Meted">
            <summary>
            Gets METED (METED (METROPOLITAN EDISON COMPANY)) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Peco">
            <summary>
            Gets PECO (PECO ENERGY (EXCELON)) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Penelec">
            <summary>
            Gets PENELEC (PENNSYLVANIA ELECTRIC COMPANY) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.Wpp">
            <summary>
            Gets WEST PENN POWER (ALLEGHENY) utility code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilitiesCodes.PennPr">
            <summary>
            Gets PENNPR (PENN POWER) utility code
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ServiceParser">
            <summary>
            Parser for services provided to a costumer (FIELD: LIN)
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ServiceParser.#ctor(System.Linq.Expressions.Expression{System.Func{LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount,System.String}},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="propertySetter">Setter of the service property from EdiAccount</param>
            <param name="cellIndex">Position of the data in the field</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ServiceParser.Parse(System.String@,System.Char)">
            <summary>
            Parses field data
            </summary>
            <param name="fileRowCell">Row cell containing the field</param>
            <param name="fieldDelimiter">file delimiter used to split fileRowCell</param>
            <returns>Parsed value of the field</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountContact">
            <summary>
            Contains all the contact information provided by the utlities
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountContact.Name">
            <summary>
            Contact name
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountContact.EmailAddress">
            <summary>
            Contact email address
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountContact.Fax">
            <summary>
            Contact fax
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountContact.HomePhone">
            <summary>
            Contact home phone
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountContact.WorkPhone">
            <summary>
            Contact work phone
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccountContact.Telephone">
            <summary>
            Contat telephone
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Validator">
            <summary>
            Class that validates file configuration and data.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Validator.ValidateFileConfiguration(System.String,System.String@,System.Char,LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityConfig)">
            <summary>
            Validates file configuration
            </summary>
            <param name="dunsNumber">DUNS number</param>
            <param name="fileContents">Contents of utility file</param>
            <param name="delimiter">Character delimiter</param>
            <param name="config">Utility configuration object</param>
            <returns>Returns the file configuration data exists business rule.</returns>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Validator.ValidateEdiFile(LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount@,LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileType)">
            <summary>
            validates an account
            </summary>
            <param name="account">account object</param>
            <param name="fileType">file type</param>
            <returns>true if valid</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsage">
            <summary>
            Utility usage object that inherits from the usage object
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsage.MeasurementSignificanceCode">
            <summary>
            Measurement significance code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsage.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsage.UnitOfMeasurement">
            <summary>
            Unit of measurement
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsage.TransactionSetPurposeCode">
            <summary>
            Transaction set purpose code
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsage.PtdLoop">
            <summary>
            PTD Loop identifier
            </summary>
        </member>
        <member name="P:LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsage.ServiceDeliveryPoint">
            <summary>
            Service delivery point, also called Location number in MISO
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Processor">
            <summary>
            Class for processing utility file data
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.Processor.breakTransactionTypes(System.String@,System.String@,System.String@,System.Char,System.Char)">
            <summary>
            Some Utilities come with 814's and 867's combined into 1 file
            </summary>
            <param name="original">Original Stream</param>
            <param name="eightSixSeven">867 Stream</param>
            <param name="eightOneFour">814 Strem</param>
            <param name="fieldDlmt">Utility field delimiter</param>
            <param name="rowDlmtr">Utility row delimiter</param>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DataInserter">
            <summary>
            Class for inserting account and usage data.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DataInserter.Insert(System.Int32,LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiAccount,LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileType)">
            <summary>
            Inserts account and usage data for utility file.
            </summary>
            <param name="ediFileLogID">Edi file log ID</param>
            <param name="account">Account list that contains account and respective usage data.</param>
            <param name="fileType">Format of the file (814, 867 or status update).</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DataInserter.Insert(System.Int32,LibertyPower.Business.MarketManagement.EdiParser.FileParser.UtilityUsageAccountList,LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiFileType)">
            <summary>
            insert all accounts
            </summary>
            <param name="ediFileLogID"></param>
            <param name="accounts"></param>
            <param name="fileType"></param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.DataInserter.InsertUsageDetail(System.Int32,System.String,System.DateTime,System.DateTime,System.Decimal,System.String,System.String,System.String,System.String)">
            <summary>
            Inserts edi usage detail record into the database
            </summary>
            <param name="ediAccountID"></param>
            <param name="ptdLoop"></param>
            <param name="beginDate"></param>
            <param name="endDate"></param>
            <param name="quantity"></param>
            <param name="meterNumber"></param>
            <param name="measurementSignificanceCode"></param>
            <param name="transactionSetPurposeCode"></param>
            <param name="unitOfMeasurement"></param>
            <returns></returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ComedMarker">
            <summary>
            COMED utility marker.
             Contains the generic cell positions of property values.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.ComedMarker.#ctor">
            <summary>
            Constructor that sets cell positions for utility.
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PenelecMarker814">
            <summary>
            Marker for PENELEC
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PenelecMarker814.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NecoMarker814">
            <summary>
            814 marker for NECO
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.NecoMarker814.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AepnoMarker814">
            <summary>
            Marker for AEPNO utility
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.AepnoMarker814.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PepcomdMapper867">
            <summary>
            PEPCO-MD utility mapper for 867 file.
             Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PepcomdMapper867.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PepcomdMapper867.#ctor(System.String,System.String)">
            <summary>
            Constructor that takes market and utility codes
            </summary>
            <param name="utilityCode">Utility identifier</param>
            <param name="marketCode">Market Identifier</param>
        </member>
        <member name="M:LibertyPower.Business.MarketManagement.EdiParser.FileParser.PepcomdMapper867.MapData(LibertyPower.Business.MarketManagement.EdiParser.FileParser.FileRow,System.Char,System.Char)">
            <summary>
            Maps markers in an EDI utility file to specific values in generic collections.
            </summary>
            <param name="fileRow">Generic collection of rows in utility file</param>
            <param name="rowDelimiter">Row delimiter</param>
            <param name="fieldDelimiter">field delimiter</param>
            <returns>Returns an Edi account list that contains accounts and their respective usage.</returns>
        </member>
        <member name="T:LibertyPower.Business.MarketManagement.EdiParser.FileParser.EdiIdrUsageList">
            <summary>
            Idr Usage List
            </summary>
        </member>
    </members>
</doc>
