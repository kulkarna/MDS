//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayerEntityFramework
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class Lp_UtilityManagementEntities : DbContext
    {
        public Lp_UtilityManagementEntities()
            : base("name=Lp_UtilityManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<RequestModeEnrollmentType> RequestModeEnrollmentTypes { get; set; }
        public DbSet<RequestModeHistoricalUsage> RequestModeHistoricalUsages { get; set; }
        public DbSet<RequestModeType> RequestModeTypes { get; set; }
        public DbSet<RequestModeTypeGenre> RequestModeTypeGenres { get; set; }
        public DbSet<RequestModeTypeToRequestModeEnrollmentType> RequestModeTypeToRequestModeEnrollmentTypes { get; set; }
        public DbSet<RequestModeTypeToRequestModeTypeGenre> RequestModeTypeToRequestModeTypeGenres { get; set; }
        public DbSet<UserInterfaceControlAndValueGoverningControlVisibility> UserInterfaceControlAndValueGoverningControlVisibilities { get; set; }
        public DbSet<UserInterfaceControlVisibility> UserInterfaceControlVisibilities { get; set; }
        public DbSet<UserInterfaceForm> UserInterfaceForms { get; set; }
        public DbSet<UserInterfaceFormControl> UserInterfaceFormControls { get; set; }
        public DbSet<UtilityLegacy> UtilityLegacies { get; set; }
        public DbSet<UtilityCompanyToUtilityLegacy> UtilityCompanyToUtilityLegacies { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<RequestModeIcap> RequestModeIcaps { get; set; }
        public DbSet<AccountType> AccountTypes { get; set; }
        public DbSet<RequestModeIdr> RequestModeIdrs { get; set; }
        public DbSet<MeterType> MeterTypes { get; set; }
        public DbSet<RequestModeHistoricalUsageParameter> RequestModeHistoricalUsageParameters { get; set; }
        public DbSet<TriStateValue> TriStateValues { get; set; }
        public DbSet<LpStandardRateClass> LpStandardRateClasses { get; set; }
        public DbSet<RateClassAlia> RateClassAlias { get; set; }
        public DbSet<zAuditLpStandardRateClass> zAuditLpStandardRateClasses { get; set; }
        public DbSet<zAuditRateClassAlia> zAuditRateClassAlias { get; set; }
        public DbSet<RateClass> RateClasses { get; set; }
        public DbSet<zAuditMeterType> zAuditMeterTypes { get; set; }
        public DbSet<zAuditRateClass> zAuditRateClasses { get; set; }
        public DbSet<zAuditRequestModeHistoricalUsage> zAuditRequestModeHistoricalUsages { get; set; }
        public DbSet<zAuditRequestModeIcap> zAuditRequestModeIcaps { get; set; }
        public DbSet<zAuditRequestModeIdr> zAuditRequestModeIdrs { get; set; }
        public DbSet<zAuditServiceClass> zAuditServiceClasses { get; set; }
        public DbSet<LoadProfileAlia> LoadProfileAlias { get; set; }
        public DbSet<LpStandardLoadProfile> LpStandardLoadProfiles { get; set; }
        public DbSet<LpStandardTariffCode> LpStandardTariffCodes { get; set; }
        public DbSet<TariffCodeAlia> TariffCodeAlias { get; set; }
        public DbSet<zAuditLoadProfileAlia> zAuditLoadProfileAlias { get; set; }
        public DbSet<zAuditLpStandardLoadProfile> zAuditLpStandardLoadProfiles { get; set; }
        public DbSet<zAuditLpStandardTariffCode> zAuditLpStandardTariffCodes { get; set; }
        public DbSet<zAuditTariffCodeAlia> zAuditTariffCodeAlias { get; set; }
        public DbSet<LoadProfile> LoadProfiles { get; set; }
        public DbSet<TariffCode> TariffCodes { get; set; }
        public DbSet<zAuditLoadProfile> zAuditLoadProfiles { get; set; }
        public DbSet<zAuditTariffCode> zAuditTariffCodes { get; set; }
        public DbSet<PorDriver> PorDrivers { get; set; }
        public DbSet<PorRecourse> PorRecourses { get; set; }
        public DbSet<PurchaseOfReceivable> PurchaseOfReceivables { get; set; }
        public DbSet<zAuditPurchaseOfReceivable> zAuditPurchaseOfReceivables { get; set; }
        public DbSet<BillingType> BillingTypes { get; set; }
        public DbSet<UtilityBillingType> UtilityBillingTypes { get; set; }
        public DbSet<zAuditBillingType> zAuditBillingTypes { get; set; }
        public DbSet<zAuditUtilityBillingType> zAuditUtilityBillingTypes { get; set; }
        public DbSet<MeterReadSchedule> MeterReadSchedules { get; set; }
        public DbSet<Month> Months { get; set; }
        public DbSet<UtilityTrip> UtilityTrips { get; set; }
        public DbSet<Year> Years { get; set; }
        public DbSet<zAuditMeterReadSchedule> zAuditMeterReadSchedules { get; set; }
        public DbSet<zAuditUtilityTrip> zAuditUtilityTrips { get; set; }
        public DbSet<LpBillingType> LpBillingTypes { get; set; }
        public DbSet<LpUtilityOfferedBillingType> LpUtilityOfferedBillingTypes { get; set; }
        public DbSet<zAuditLpBillingType> zAuditLpBillingTypes { get; set; }
        public DbSet<zAuditLpUtilityOfferedBillingType> zAuditLpUtilityOfferedBillingTypes { get; set; }
        public DbSet<LpApprovedBillingType> LpApprovedBillingTypes { get; set; }
        public DbSet<zAuditLpApprovedBillingType> zAuditLpApprovedBillingTypes { get; set; }
        public DbSet<AccountInfoField> AccountInfoFields { get; set; }
        public DbSet<zAuditAccountInfoField> zAuditAccountInfoFields { get; set; }
        public DbSet<zAuditAccountInfoFieldRequired> zAuditAccountInfoFieldRequireds { get; set; }
        public DbSet<AccountInfoFieldRequired> AccountInfoFieldRequireds { get; set; }
        public DbSet<ISO> ISOes { get; set; }
        public DbSet<Market> Markets { get; set; }
        public DbSet<TriStateValuePendingActiveInactive> TriStateValuePendingActiveInactives { get; set; }
        public DbSet<zAuditUtilityCompany> zAuditUtilityCompanies { get; set; }
        public DbSet<BillingAccountPattern> BillingAccountPatterns { get; set; }
        public DbSet<ICapTCapRefresh> ICapTCapRefreshes { get; set; }
        public DbSet<MeterNumberPattern> MeterNumberPatterns { get; set; }
        public DbSet<NameKeyPattern> NameKeyPatterns { get; set; }
        public DbSet<ServiceAccountPattern> ServiceAccountPatterns { get; set; }
        public DbSet<ServiceAddressZipPattern> ServiceAddressZipPatterns { get; set; }
        public DbSet<ServiceLevelAgreement> ServiceLevelAgreements { get; set; }
        public DbSet<StrataPattern> StrataPatterns { get; set; }
        public DbSet<UtilityCompany> UtilityCompanies { get; set; }
        public DbSet<UtilityPermission> UtilityPermissions { get; set; }
        public DbSet<UtilityPermissionLegacy> UtilityPermissionLegacies { get; set; }
        public DbSet<UtilityPermissionToUtilityPermissionLegacy> UtilityPermissionToUtilityPermissionLegacies { get; set; }
        public DbSet<IdrRule> IdrRules { get; set; }
        public DbSet<zAuditIdrRule> zAuditIdrRules { get; set; }
        public DbSet<ChangeTableVersioning> ChangeTableVersionings { get; set; }
        public DbSet<Log> Logs { get; set; }
        public DbSet<zAuditAccountType> zAuditAccountTypes { get; set; }
        public DbSet<zAuditBillingAccountPattern> zAuditBillingAccountPatterns { get; set; }
        public DbSet<zAuditICapTCapRefresh> zAuditICapTCapRefreshes { get; set; }
        public DbSet<zAuditMeterNumberPattern> zAuditMeterNumberPatterns { get; set; }
        public DbSet<zAuditNameKeyPattern> zAuditNameKeyPatterns { get; set; }
        public DbSet<zAuditRequestModeEnrollmentType> zAuditRequestModeEnrollmentTypes { get; set; }
        public DbSet<zAuditRequestModeType> zAuditRequestModeTypes { get; set; }
        public DbSet<zAuditRequestModeTypeGenre> zAuditRequestModeTypeGenres { get; set; }
        public DbSet<zAuditRequestModeTypeToRequestModeEnrollmentType> zAuditRequestModeTypeToRequestModeEnrollmentTypes { get; set; }
        public DbSet<zAuditRequestModeTypeToRequestModeTypeGenre> zAuditRequestModeTypeToRequestModeTypeGenres { get; set; }
        public DbSet<zAuditServiceAccountPattern> zAuditServiceAccountPatterns { get; set; }
        public DbSet<zAuditServiceAddressZipPattern> zAuditServiceAddressZipPatterns { get; set; }
        public DbSet<zAuditStrataPattern> zAuditStrataPatterns { get; set; }
        public DbSet<zAuditUserInterfaceControlAndValueGoverningControlVisibility> zAuditUserInterfaceControlAndValueGoverningControlVisibilities { get; set; }
        public DbSet<zAuditUserInterfaceControlVisibility> zAuditUserInterfaceControlVisibilities { get; set; }
        public DbSet<zAuditUserInterfaceForm> zAuditUserInterfaceForms { get; set; }
        public DbSet<zAuditUserInterfaceFormControl> zAuditUserInterfaceFormControls { get; set; }
        public DbSet<MeterReadCalendar> MeterReadCalendars { get; set; }
        public DbSet<ZETL_meter_read_calendar> ZETL_meter_read_calendar { get; set; }
        public DbSet<BusinessAccountType> BusinessAccountTypes { get; set; }
        public DbSet<PaymentTerm> PaymentTerms { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<CustomerAccountType> CustomerAccountTypes { get; set; }
        public DbSet<CapacityThresholdRule> CapacityThresholdRules { get; set; }
    
        public virtual ObjectResult<Nullable<int>> usp_CheckForExistingUtilityCompanyIdRequestEnrollmentTypeIds(string requestModeEnrollmentTypeId, string utilityCompanyId)
        {
            var requestModeEnrollmentTypeIdParameter = requestModeEnrollmentTypeId != null ?
                new ObjectParameter("RequestModeEnrollmentTypeId", requestModeEnrollmentTypeId) :
                new ObjectParameter("RequestModeEnrollmentTypeId", typeof(string));
    
            var utilityCompanyIdParameter = utilityCompanyId != null ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_CheckForExistingUtilityCompanyIdRequestEnrollmentTypeIds", requestModeEnrollmentTypeIdParameter, utilityCompanyIdParameter);
        }
    
        public virtual ObjectResult<string> usp_RequestModeEnrollmentType_SELECT_NameById(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_RequestModeEnrollmentType_SELECT_NameById", idParameter);
        }
    
        public virtual ObjectResult<string> usp_RequestModeType_SELECT_NameById(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_RequestModeType_SELECT_NameById", idParameter);
        }
    
        public virtual ObjectResult<usp_RequestModeTypes_SELECT_By_RequestModeEnrollmentTypeId_Result> usp_RequestModeTypes_SELECT_By_RequestModeEnrollmentTypeId(string requestModeEnrollmentTypeId)
        {
            var requestModeEnrollmentTypeIdParameter = requestModeEnrollmentTypeId != null ?
                new ObjectParameter("RequestModeEnrollmentTypeId", requestModeEnrollmentTypeId) :
                new ObjectParameter("RequestModeEnrollmentTypeId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RequestModeTypes_SELECT_By_RequestModeEnrollmentTypeId_Result>("usp_RequestModeTypes_SELECT_By_RequestModeEnrollmentTypeId", requestModeEnrollmentTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_RequestModeType_SELECT_DropDownValues_ByRequestModeEnrollmentTypeIdAndRequestModeTypeGenreName_Result> usp_RequestModeType_SELECT_DropDownValues_ByRequestModeEnrollmentTypeIdAndRequestModeTypeGenreName(string requestModeEnrollmentTypeId, string requestModeTypeGenreName)
        {
            var requestModeEnrollmentTypeIdParameter = requestModeEnrollmentTypeId != null ?
                new ObjectParameter("RequestModeEnrollmentTypeId", requestModeEnrollmentTypeId) :
                new ObjectParameter("RequestModeEnrollmentTypeId", typeof(string));
    
            var requestModeTypeGenreNameParameter = requestModeTypeGenreName != null ?
                new ObjectParameter("RequestModeTypeGenreName", requestModeTypeGenreName) :
                new ObjectParameter("RequestModeTypeGenreName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RequestModeType_SELECT_DropDownValues_ByRequestModeEnrollmentTypeIdAndRequestModeTypeGenreName_Result>("usp_RequestModeType_SELECT_DropDownValues_ByRequestModeEnrollmentTypeIdAndRequestModeTypeGenreName", requestModeEnrollmentTypeIdParameter, requestModeTypeGenreNameParameter);
        }
    
        public virtual ObjectResult<usp_UserInterfaceForm_GET_ControllingControlsAndVisibilityByForm_Result> usp_UserInterfaceForm_GET_ControllingControlsAndVisibilityByForm(string formName)
        {
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserInterfaceForm_GET_ControllingControlsAndVisibilityByForm_Result>("usp_UserInterfaceForm_GET_ControllingControlsAndVisibilityByForm", formNameParameter);
        }
    
        public virtual ObjectResult<usp_zAuditRequestModeHistoricalUsage_SELECT_Result> usp_zAuditRequestModeHistoricalUsage_SELECT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_zAuditRequestModeHistoricalUsage_SELECT_Result>("usp_zAuditRequestModeHistoricalUsage_SELECT");
        }
    
        public virtual ObjectResult<usp_zAuditRequestModeHistoricalUsage_SELECT1_Result> usp_zAuditRequestModeHistoricalUsage_SELECT1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_zAuditRequestModeHistoricalUsage_SELECT1_Result>("usp_zAuditRequestModeHistoricalUsage_SELECT1");
        }
    
        public virtual ObjectResult<usp_UserInterfaceFormControl_SELECT_By_UserInterfaceFormId_Result> usp_UserInterfaceFormControl_SELECT_By_UserInterfaceFormId(string userInterfaceFormId)
        {
            var userInterfaceFormIdParameter = userInterfaceFormId != null ?
                new ObjectParameter("UserInterfaceFormId", userInterfaceFormId) :
                new ObjectParameter("UserInterfaceFormId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserInterfaceFormControl_SELECT_By_UserInterfaceFormId_Result>("usp_UserInterfaceFormControl_SELECT_By_UserInterfaceFormId", userInterfaceFormIdParameter);
        }
    
        public virtual ObjectResult<usp_UserInterfaceFormControls_SELECT_By_UserInterfaceFormId_Result> usp_UserInterfaceFormControls_SELECT_By_UserInterfaceFormId(string userInterfaceFormId)
        {
            var userInterfaceFormIdParameter = userInterfaceFormId != null ?
                new ObjectParameter("UserInterfaceFormId", userInterfaceFormId) :
                new ObjectParameter("UserInterfaceFormId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserInterfaceFormControls_SELECT_By_UserInterfaceFormId_Result>("usp_UserInterfaceFormControls_SELECT_By_UserInterfaceFormId", userInterfaceFormIdParameter);
        }
    
        public virtual ObjectResult<usp_UserInterfaceFormControlValues_SELECT_By_UserInterfaceFormControlId_Result> usp_UserInterfaceFormControlValues_SELECT_By_UserInterfaceFormControlId(string userInterfaceFormControlId)
        {
            var userInterfaceFormControlIdParameter = userInterfaceFormControlId != null ?
                new ObjectParameter("UserInterfaceFormControlId", userInterfaceFormControlId) :
                new ObjectParameter("UserInterfaceFormControlId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserInterfaceFormControlValues_SELECT_By_UserInterfaceFormControlId_Result>("usp_UserInterfaceFormControlValues_SELECT_By_UserInterfaceFormControlId", userInterfaceFormControlIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_CheckForExistingUtilityCompanyIdRequestEnrollmentTypeIdsRequestModeIcap(string requestModeEnrollmentTypeId, string utilityCompanyId)
        {
            var requestModeEnrollmentTypeIdParameter = requestModeEnrollmentTypeId != null ?
                new ObjectParameter("RequestModeEnrollmentTypeId", requestModeEnrollmentTypeId) :
                new ObjectParameter("RequestModeEnrollmentTypeId", typeof(string));
    
            var utilityCompanyIdParameter = utilityCompanyId != null ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_CheckForExistingUtilityCompanyIdRequestEnrollmentTypeIdsRequestModeIcap", requestModeEnrollmentTypeIdParameter, utilityCompanyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_RequestModeHistoricalUsage_VALIDATE_RequestModeIcapRequestModeType(string utilityCompanyId, string requestModeTypeId)
        {
            var utilityCompanyIdParameter = utilityCompanyId != null ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(string));
    
            var requestModeTypeIdParameter = requestModeTypeId != null ?
                new ObjectParameter("RequestModeTypeId", requestModeTypeId) :
                new ObjectParameter("RequestModeTypeId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_RequestModeHistoricalUsage_VALIDATE_RequestModeIcapRequestModeType", utilityCompanyIdParameter, requestModeTypeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_RequestModeHistoricalUsage_VALIDATE_RequestModeIcapRequestModeType_EDIT(string requestModeIcapId, string requestModeTypeId)
        {
            var requestModeIcapIdParameter = requestModeIcapId != null ?
                new ObjectParameter("RequestModeIcapId", requestModeIcapId) :
                new ObjectParameter("RequestModeIcapId", typeof(string));
    
            var requestModeTypeIdParameter = requestModeTypeId != null ?
                new ObjectParameter("RequestModeTypeId", requestModeTypeId) :
                new ObjectParameter("RequestModeTypeId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_RequestModeHistoricalUsage_VALIDATE_RequestModeIcapRequestModeType_EDIT", requestModeIcapIdParameter, requestModeTypeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_RequestModeIcap_VALIDATE_RequestModeHistoricalUsageRequestModeType(string utilityCompanyId, string requestModeTypeId)
        {
            var utilityCompanyIdParameter = utilityCompanyId != null ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(string));
    
            var requestModeTypeIdParameter = requestModeTypeId != null ?
                new ObjectParameter("RequestModeTypeId", requestModeTypeId) :
                new ObjectParameter("RequestModeTypeId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_RequestModeIcap_VALIDATE_RequestModeHistoricalUsageRequestModeType", utilityCompanyIdParameter, requestModeTypeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_RequestModeIcap_VALIDATE_RequestModeHistoricalUsageRequestModeType_EDIT(string requestModeHistoricalUsageId, string requestModeTypeId)
        {
            var requestModeHistoricalUsageIdParameter = requestModeHistoricalUsageId != null ?
                new ObjectParameter("RequestModeHistoricalUsageId", requestModeHistoricalUsageId) :
                new ObjectParameter("RequestModeHistoricalUsageId", typeof(string));
    
            var requestModeTypeIdParameter = requestModeTypeId != null ?
                new ObjectParameter("RequestModeTypeId", requestModeTypeId) :
                new ObjectParameter("RequestModeTypeId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_RequestModeIcap_VALIDATE_RequestModeHistoricalUsageRequestModeType_EDIT", requestModeHistoricalUsageIdParameter, requestModeTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_zAuditRequestModeIcap_SELECT_Result> usp_zAuditRequestModeIcap_SELECT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_zAuditRequestModeIcap_SELECT_Result>("usp_zAuditRequestModeIcap_SELECT");
        }
    
        public virtual ObjectResult<usp_zAuditRequestModeIcap_SELECT1_Result> usp_zAuditRequestModeIcap_SELECT1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_zAuditRequestModeIcap_SELECT1_Result>("usp_zAuditRequestModeIcap_SELECT1");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_TEST_SELECT_RequestModeHistoricalUsage_BY_EnrollmentTypeAndUtility(string requestModeEnrollmentTypeId, string utilityCompanyId, Nullable<int> utilityLegacyId, string utilityCode)
        {
            var requestModeEnrollmentTypeIdParameter = requestModeEnrollmentTypeId != null ?
                new ObjectParameter("RequestModeEnrollmentTypeId", requestModeEnrollmentTypeId) :
                new ObjectParameter("RequestModeEnrollmentTypeId", typeof(string));
    
            var utilityCompanyIdParameter = utilityCompanyId != null ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(string));
    
            var utilityLegacyIdParameter = utilityLegacyId.HasValue ?
                new ObjectParameter("UtilityLegacyId", utilityLegacyId) :
                new ObjectParameter("UtilityLegacyId", typeof(int));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_TEST_SELECT_RequestModeHistoricalUsage_BY_EnrollmentTypeAndUtility", requestModeEnrollmentTypeIdParameter, utilityCompanyIdParameter, utilityLegacyIdParameter, utilityCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_TEST_SELECT_RequestModeIcap_BY_EnrollmentTypeAndUtility(string requestModeEnrollmentTypeId, string utilityCompanyId, Nullable<int> utilityLegacyId, string utilityCode)
        {
            var requestModeEnrollmentTypeIdParameter = requestModeEnrollmentTypeId != null ?
                new ObjectParameter("RequestModeEnrollmentTypeId", requestModeEnrollmentTypeId) :
                new ObjectParameter("RequestModeEnrollmentTypeId", typeof(string));
    
            var utilityCompanyIdParameter = utilityCompanyId != null ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(string));
    
            var utilityLegacyIdParameter = utilityLegacyId.HasValue ?
                new ObjectParameter("UtilityLegacyId", utilityLegacyId) :
                new ObjectParameter("UtilityLegacyId", typeof(int));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_TEST_SELECT_RequestModeIcap_BY_EnrollmentTypeAndUtility", requestModeEnrollmentTypeIdParameter, utilityCompanyIdParameter, utilityLegacyIdParameter, utilityCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_CheckForExistingUtilityCompanyIdRequestEnrollmentTypeIdsRequestModeIdr(string requestModeEnrollmentTypeId, string utilityCompanyId)
        {
            var requestModeEnrollmentTypeIdParameter = requestModeEnrollmentTypeId != null ?
                new ObjectParameter("RequestModeEnrollmentTypeId", requestModeEnrollmentTypeId) :
                new ObjectParameter("RequestModeEnrollmentTypeId", typeof(string));
    
            var utilityCompanyIdParameter = utilityCompanyId != null ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_CheckForExistingUtilityCompanyIdRequestEnrollmentTypeIdsRequestModeIdr", requestModeEnrollmentTypeIdParameter, utilityCompanyIdParameter);
        }
    
        public virtual ObjectResult<usp_RateClass_SELECT_By_UtilityCompanyId_Result> usp_RateClass_SELECT_By_UtilityCompanyId(Nullable<System.Guid> utilityCompanyId)
        {
            var utilityCompanyIdParameter = utilityCompanyId.HasValue ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RateClass_SELECT_By_UtilityCompanyId_Result>("usp_RateClass_SELECT_By_UtilityCompanyId", utilityCompanyIdParameter);
        }
    
        public virtual ObjectResult<usp_LoadProfile_SELECT_By_UtilityCompanyId_Result> usp_LoadProfile_SELECT_By_UtilityCompanyId(Nullable<System.Guid> utilityCompanyId)
        {
            var utilityCompanyIdParameter = utilityCompanyId.HasValue ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LoadProfile_SELECT_By_UtilityCompanyId_Result>("usp_LoadProfile_SELECT_By_UtilityCompanyId", utilityCompanyIdParameter);
        }
    
        public virtual ObjectResult<usp_MeterType_SELECT_By_UtilityCompanyId_Result> usp_MeterType_SELECT_By_UtilityCompanyId(string utilityCompanyId)
        {
            var utilityCompanyIdParameter = utilityCompanyId != null ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MeterType_SELECT_By_UtilityCompanyId_Result>("usp_MeterType_SELECT_By_UtilityCompanyId", utilityCompanyIdParameter);
        }
    
        public virtual ObjectResult<usp_ServiceClass_SELECT_By_UtilityCompanyId_Result> usp_ServiceClass_SELECT_By_UtilityCompanyId(string utilityCompanyId)
        {
            var utilityCompanyIdParameter = utilityCompanyId != null ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ServiceClass_SELECT_By_UtilityCompanyId_Result>("usp_ServiceClass_SELECT_By_UtilityCompanyId", utilityCompanyIdParameter);
        }
    
        public virtual ObjectResult<usp_UtilityCompanies_SELECT_All_Result> usp_UtilityCompanies_SELECT_All()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UtilityCompanies_SELECT_All_Result>("usp_UtilityCompanies_SELECT_All");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_TEST_SELECT_RequestModeIdr_BY_EnrollmentTypeAndUtility(string requestModeEnrollmentTypeId, string utilityCompanyId, Nullable<int> utilityLegacyId, string utilityCode)
        {
            var requestModeEnrollmentTypeIdParameter = requestModeEnrollmentTypeId != null ?
                new ObjectParameter("RequestModeEnrollmentTypeId", requestModeEnrollmentTypeId) :
                new ObjectParameter("RequestModeEnrollmentTypeId", typeof(string));
    
            var utilityCompanyIdParameter = utilityCompanyId != null ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(string));
    
            var utilityLegacyIdParameter = utilityLegacyId.HasValue ?
                new ObjectParameter("UtilityLegacyId", utilityLegacyId) :
                new ObjectParameter("UtilityLegacyId", typeof(int));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_TEST_SELECT_RequestModeIdr_BY_EnrollmentTypeAndUtility", requestModeEnrollmentTypeIdParameter, utilityCompanyIdParameter, utilityLegacyIdParameter, utilityCodeParameter);
        }
    
        public virtual ObjectResult<usp_zAuditRequestModeIdr_SELECT_Result> usp_zAuditRequestModeIdr_SELECT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_zAuditRequestModeIdr_SELECT_Result>("usp_zAuditRequestModeIdr_SELECT");
        }
    
        public virtual ObjectResult<usp_zAuditLoadProfile_SELECT_Result> usp_zAuditLoadProfile_SELECT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_zAuditLoadProfile_SELECT_Result>("usp_zAuditLoadProfile_SELECT");
        }
    
        public virtual ObjectResult<usp_zAuditMeterType_SELECT_Result> usp_zAuditMeterType_SELECT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_zAuditMeterType_SELECT_Result>("usp_zAuditMeterType_SELECT");
        }
    
        public virtual ObjectResult<usp_zAuditRateClass_SELECT_Result> usp_zAuditRateClass_SELECT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_zAuditRateClass_SELECT_Result>("usp_zAuditRateClass_SELECT");
        }
    
        public virtual ObjectResult<usp_zAuditServiceClass_SELECT_Result> usp_zAuditServiceClass_SELECT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_zAuditServiceClass_SELECT_Result>("usp_zAuditServiceClass_SELECT");
        }
    
        public virtual ObjectResult<usp_zAuditTariffCode_SELECT_Result> usp_zAuditTariffCode_SELECT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_zAuditTariffCode_SELECT_Result>("usp_zAuditTariffCode_SELECT");
        }
    
        public virtual ObjectResult<usp_PurchaseOfReceivables_SELECT_ByUtilityAndPorDriver_Result> usp_PurchaseOfReceivables_SELECT_ByUtilityAndPorDriver(Nullable<int> utilityIdInt, Nullable<System.DateTime> effectiveDate, Nullable<System.Guid> porDriverId, string porDriver)
        {
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var porDriverIdParameter = porDriverId.HasValue ?
                new ObjectParameter("PorDriverId", porDriverId) :
                new ObjectParameter("PorDriverId", typeof(System.Guid));
    
            var porDriverParameter = porDriver != null ?
                new ObjectParameter("PorDriver", porDriver) :
                new ObjectParameter("PorDriver", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PurchaseOfReceivables_SELECT_ByUtilityAndPorDriver_Result>("usp_PurchaseOfReceivables_SELECT_ByUtilityAndPorDriver", utilityIdIntParameter, effectiveDateParameter, porDriverIdParameter, porDriverParameter);
        }
    
        public virtual ObjectResult<usp_PurchaseOfReceivables_SELECT_ByUtilityAndPorDriver1_Result> usp_PurchaseOfReceivables_SELECT_ByUtilityAndPorDriver1(Nullable<int> utilityIdInt, Nullable<System.DateTime> effectiveDate, Nullable<System.Guid> porDriverId, string porDriver)
        {
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var porDriverIdParameter = porDriverId.HasValue ?
                new ObjectParameter("PorDriverId", porDriverId) :
                new ObjectParameter("PorDriverId", typeof(System.Guid));
    
            var porDriverParameter = porDriver != null ?
                new ObjectParameter("PorDriver", porDriver) :
                new ObjectParameter("PorDriver", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PurchaseOfReceivables_SELECT_ByUtilityAndPorDriver1_Result>("usp_PurchaseOfReceivables_SELECT_ByUtilityAndPorDriver1", utilityIdIntParameter, effectiveDateParameter, porDriverIdParameter, porDriverParameter);
        }
    
        public virtual ObjectResult<usp_IdrRule_Retrieval_Result> usp_IdrRule_Retrieval(string rateClassCode, string loadProfileCode, Nullable<int> utilityIdInt, Nullable<int> annualUsage)
        {
            var rateClassCodeParameter = rateClassCode != null ?
                new ObjectParameter("RateClassCode", rateClassCode) :
                new ObjectParameter("RateClassCode", typeof(string));
    
            var loadProfileCodeParameter = loadProfileCode != null ?
                new ObjectParameter("LoadProfileCode", loadProfileCode) :
                new ObjectParameter("LoadProfileCode", typeof(string));
    
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var annualUsageParameter = annualUsage.HasValue ?
                new ObjectParameter("AnnualUsage", annualUsage) :
                new ObjectParameter("AnnualUsage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IdrRule_Retrieval_Result>("usp_IdrRule_Retrieval", rateClassCodeParameter, loadProfileCodeParameter, utilityIdIntParameter, annualUsageParameter);
        }
    
        public virtual ObjectResult<string> usp_IdrRule_Retrieval_Fields(string rateClassCode, string loadProfileCode, Nullable<int> utilityIdInt, Nullable<int> annualUsage)
        {
            var rateClassCodeParameter = rateClassCode != null ?
                new ObjectParameter("RateClassCode", rateClassCode) :
                new ObjectParameter("RateClassCode", typeof(string));
    
            var loadProfileCodeParameter = loadProfileCode != null ?
                new ObjectParameter("LoadProfileCode", loadProfileCode) :
                new ObjectParameter("LoadProfileCode", typeof(string));
    
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var annualUsageParameter = annualUsage.HasValue ?
                new ObjectParameter("AnnualUsage", annualUsage) :
                new ObjectParameter("AnnualUsage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_IdrRule_Retrieval_Fields", rateClassCodeParameter, loadProfileCodeParameter, utilityIdIntParameter, annualUsageParameter);
        }
    
        public virtual ObjectResult<usp_IdrRule_Retrieval_IsEligibleList_Result> usp_IdrRule_Retrieval_IsEligibleList(Nullable<int> utilityIdInt)
        {
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IdrRule_Retrieval_IsEligibleList_Result>("usp_IdrRule_Retrieval_IsEligibleList", utilityIdIntParameter);
        }
    
        public virtual ObjectResult<usp_IdrRule_Retrieval_Idr_Result> usp_IdrRule_Retrieval_Idr(string rateClassCode, string loadProfileCode, Nullable<int> utilityIdInt, Nullable<int> annualUsage)
        {
            var rateClassCodeParameter = rateClassCode != null ?
                new ObjectParameter("RateClassCode", rateClassCode) :
                new ObjectParameter("RateClassCode", typeof(string));
    
            var loadProfileCodeParameter = loadProfileCode != null ?
                new ObjectParameter("LoadProfileCode", loadProfileCode) :
                new ObjectParameter("LoadProfileCode", typeof(string));
    
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var annualUsageParameter = annualUsage.HasValue ?
                new ObjectParameter("AnnualUsage", annualUsage) :
                new ObjectParameter("AnnualUsage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IdrRule_Retrieval_Idr_Result>("usp_IdrRule_Retrieval_Idr", rateClassCodeParameter, loadProfileCodeParameter, utilityIdIntParameter, annualUsageParameter);
        }
    
        public virtual ObjectResult<usp_IdrRule_Retrieval_IdrRequestMode_Result> usp_IdrRule_Retrieval_IdrRequestMode(string rateClassCode, string loadProfileCode, Nullable<int> utilityIdInt, Nullable<int> annualUsage)
        {
            var rateClassCodeParameter = rateClassCode != null ?
                new ObjectParameter("RateClassCode", rateClassCode) :
                new ObjectParameter("RateClassCode", typeof(string));
    
            var loadProfileCodeParameter = loadProfileCode != null ?
                new ObjectParameter("LoadProfileCode", loadProfileCode) :
                new ObjectParameter("LoadProfileCode", typeof(string));
    
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var annualUsageParameter = annualUsage.HasValue ?
                new ObjectParameter("AnnualUsage", annualUsage) :
                new ObjectParameter("AnnualUsage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IdrRule_Retrieval_IdrRequestMode_Result>("usp_IdrRule_Retrieval_IdrRequestMode", rateClassCodeParameter, loadProfileCodeParameter, utilityIdIntParameter, annualUsageParameter);
        }
    
        public virtual ObjectResult<usp_IdrRuleAndRequestMode_Retrieval_Result> usp_IdrRuleAndRequestMode_Retrieval(string rateClassCode, string loadProfileCode, Nullable<int> utilityIdInt, Nullable<int> annualUsage)
        {
            var rateClassCodeParameter = rateClassCode != null ?
                new ObjectParameter("RateClassCode", rateClassCode) :
                new ObjectParameter("RateClassCode", typeof(string));
    
            var loadProfileCodeParameter = loadProfileCode != null ?
                new ObjectParameter("LoadProfileCode", loadProfileCode) :
                new ObjectParameter("LoadProfileCode", typeof(string));
    
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var annualUsageParameter = annualUsage.HasValue ?
                new ObjectParameter("AnnualUsage", annualUsage) :
                new ObjectParameter("AnnualUsage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IdrRuleAndRequestMode_Retrieval_Result>("usp_IdrRuleAndRequestMode_Retrieval", rateClassCodeParameter, loadProfileCodeParameter, utilityIdIntParameter, annualUsageParameter);
        }
    
        public virtual ObjectResult<usp_IdrRuleAndRequestMode_Selection_Result> usp_IdrRuleAndRequestMode_Selection(string rateClassCode, string loadProfileCode, Nullable<int> utilityIdInt, Nullable<int> annualUsage)
        {
            var rateClassCodeParameter = rateClassCode != null ?
                new ObjectParameter("RateClassCode", rateClassCode) :
                new ObjectParameter("RateClassCode", typeof(string));
    
            var loadProfileCodeParameter = loadProfileCode != null ?
                new ObjectParameter("LoadProfileCode", loadProfileCode) :
                new ObjectParameter("LoadProfileCode", typeof(string));
    
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var annualUsageParameter = annualUsage.HasValue ?
                new ObjectParameter("AnnualUsage", annualUsage) :
                new ObjectParameter("AnnualUsage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IdrRuleAndRequestMode_Selection_Result>("usp_IdrRuleAndRequestMode_Selection", rateClassCodeParameter, loadProfileCodeParameter, utilityIdIntParameter, annualUsageParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_IdrRule_InsufficientInformation(Nullable<int> utilityIdInt, string rateClass, string loadProfile, Nullable<int> usage, Nullable<bool> eligibility, Nullable<bool> hia)
        {
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var rateClassParameter = rateClass != null ?
                new ObjectParameter("RateClass", rateClass) :
                new ObjectParameter("RateClass", typeof(string));
    
            var loadProfileParameter = loadProfile != null ?
                new ObjectParameter("LoadProfile", loadProfile) :
                new ObjectParameter("LoadProfile", typeof(string));
    
            var usageParameter = usage.HasValue ?
                new ObjectParameter("Usage", usage) :
                new ObjectParameter("Usage", typeof(int));
    
            var eligibilityParameter = eligibility.HasValue ?
                new ObjectParameter("Eligibility", eligibility) :
                new ObjectParameter("Eligibility", typeof(bool));
    
            var hiaParameter = hia.HasValue ?
                new ObjectParameter("Hia", hia) :
                new ObjectParameter("Hia", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_IdrRule_InsufficientInformation", utilityIdIntParameter, rateClassParameter, loadProfileParameter, usageParameter, eligibilityParameter, hiaParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_IdrRule_InsufficientInfo(Nullable<int> utilityIdInt, string rateClass, string loadProfile, Nullable<int> usage, Nullable<bool> eligibility, Nullable<bool> hia)
        {
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var rateClassParameter = rateClass != null ?
                new ObjectParameter("RateClass", rateClass) :
                new ObjectParameter("RateClass", typeof(string));
    
            var loadProfileParameter = loadProfile != null ?
                new ObjectParameter("LoadProfile", loadProfile) :
                new ObjectParameter("LoadProfile", typeof(string));
    
            var usageParameter = usage.HasValue ?
                new ObjectParameter("Usage", usage) :
                new ObjectParameter("Usage", typeof(int));
    
            var eligibilityParameter = eligibility.HasValue ?
                new ObjectParameter("Eligibility", eligibility) :
                new ObjectParameter("Eligibility", typeof(bool));
    
            var hiaParameter = hia.HasValue ?
                new ObjectParameter("Hia", hia) :
                new ObjectParameter("Hia", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_IdrRule_InsufficientInfo", utilityIdIntParameter, rateClassParameter, loadProfileParameter, usageParameter, eligibilityParameter, hiaParameter);
        }
    
        public virtual ObjectResult<usp_IdrRuleAndRequestMode_Select_Result> usp_IdrRuleAndRequestMode_Select(string rateClassCode, string loadProfileCode, Nullable<int> utilityIdInt, Nullable<int> annualUsage)
        {
            var rateClassCodeParameter = rateClassCode != null ?
                new ObjectParameter("RateClassCode", rateClassCode) :
                new ObjectParameter("RateClassCode", typeof(string));
    
            var loadProfileCodeParameter = loadProfileCode != null ?
                new ObjectParameter("LoadProfileCode", loadProfileCode) :
                new ObjectParameter("LoadProfileCode", typeof(string));
    
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var annualUsageParameter = annualUsage.HasValue ?
                new ObjectParameter("AnnualUsage", annualUsage) :
                new ObjectParameter("AnnualUsage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IdrRuleAndRequestMode_Select_Result>("usp_IdrRuleAndRequestMode_Select", rateClassCodeParameter, loadProfileCodeParameter, utilityIdIntParameter, annualUsageParameter);
        }
    
        public virtual ObjectResult<usp_IdrRuleAndRequestMode_SelectByParams_Result> usp_IdrRuleAndRequestMode_SelectByParams(string rateClassCode, string loadProfileCode, Nullable<int> utilityIdInt, Nullable<int> annualUsage, string enrollmentType, Nullable<bool> hia)
        {
            var rateClassCodeParameter = rateClassCode != null ?
                new ObjectParameter("RateClassCode", rateClassCode) :
                new ObjectParameter("RateClassCode", typeof(string));
    
            var loadProfileCodeParameter = loadProfileCode != null ?
                new ObjectParameter("LoadProfileCode", loadProfileCode) :
                new ObjectParameter("LoadProfileCode", typeof(string));
    
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var annualUsageParameter = annualUsage.HasValue ?
                new ObjectParameter("AnnualUsage", annualUsage) :
                new ObjectParameter("AnnualUsage", typeof(int));
    
            var enrollmentTypeParameter = enrollmentType != null ?
                new ObjectParameter("EnrollmentType", enrollmentType) :
                new ObjectParameter("EnrollmentType", typeof(string));
    
            var hiaParameter = hia.HasValue ?
                new ObjectParameter("Hia", hia) :
                new ObjectParameter("Hia", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IdrRuleAndRequestMode_SelectByParams_Result>("usp_IdrRuleAndRequestMode_SelectByParams", rateClassCodeParameter, loadProfileCodeParameter, utilityIdIntParameter, annualUsageParameter, enrollmentTypeParameter, hiaParameter);
        }
    
        public virtual ObjectResult<string> usp_BillingType_RetrieveByUtilityRateClassLoadProfileTariffCode(Nullable<int> utilityIdInt, string rateClass, string loadProfile, string tariffCode)
        {
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var rateClassParameter = rateClass != null ?
                new ObjectParameter("RateClass", rateClass) :
                new ObjectParameter("RateClass", typeof(string));
    
            var loadProfileParameter = loadProfile != null ?
                new ObjectParameter("LoadProfile", loadProfile) :
                new ObjectParameter("LoadProfile", typeof(string));
    
            var tariffCodeParameter = tariffCode != null ?
                new ObjectParameter("TariffCode", tariffCode) :
                new ObjectParameter("TariffCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_BillingType_RetrieveByUtilityRateClassLoadProfileTariffCode", utilityIdIntParameter, rateClassParameter, loadProfileParameter, tariffCodeParameter);
        }
    
        public virtual ObjectResult<usp_MeterReadSchedule_GetNext_Result> usp_MeterReadSchedule_GetNext(Nullable<int> utilityIdInt, string tripNumber, Nullable<System.DateTime> referenceDate, string serviceAccountNumber)
        {
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var tripNumberParameter = tripNumber != null ?
                new ObjectParameter("TripNumber", tripNumber) :
                new ObjectParameter("TripNumber", typeof(string));
    
            var referenceDateParameter = referenceDate.HasValue ?
                new ObjectParameter("ReferenceDate", referenceDate) :
                new ObjectParameter("ReferenceDate", typeof(System.DateTime));
    
            var serviceAccountNumberParameter = serviceAccountNumber != null ?
                new ObjectParameter("ServiceAccountNumber", serviceAccountNumber) :
                new ObjectParameter("ServiceAccountNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MeterReadSchedule_GetNext_Result>("usp_MeterReadSchedule_GetNext", utilityIdIntParameter, tripNumberParameter, referenceDateParameter, serviceAccountNumberParameter);
        }
    
        public virtual ObjectResult<usp_PurchaseOfReceivables_SELECT_ByUtilityLoadProfileRateClassTariffCodeEffectiveDate_Result> usp_PurchaseOfReceivables_SELECT_ByUtilityLoadProfileRateClassTariffCodeEffectiveDate(Nullable<int> utilityIdInt, Nullable<System.DateTime> effectiveDate, string loadProfile, string rateClass, string tariffCode)
        {
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var loadProfileParameter = loadProfile != null ?
                new ObjectParameter("LoadProfile", loadProfile) :
                new ObjectParameter("LoadProfile", typeof(string));
    
            var rateClassParameter = rateClass != null ?
                new ObjectParameter("RateClass", rateClass) :
                new ObjectParameter("RateClass", typeof(string));
    
            var tariffCodeParameter = tariffCode != null ?
                new ObjectParameter("TariffCode", tariffCode) :
                new ObjectParameter("TariffCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PurchaseOfReceivables_SELECT_ByUtilityLoadProfileRateClassTariffCodeEffectiveDate_Result>("usp_PurchaseOfReceivables_SELECT_ByUtilityLoadProfileRateClassTariffCodeEffectiveDate", utilityIdIntParameter, effectiveDateParameter, loadProfileParameter, rateClassParameter, tariffCodeParameter);
        }
    
        public virtual ObjectResult<usp_IdrRuleAndRequestMode_SelectByParam_Result> usp_IdrRuleAndRequestMode_SelectByParam(string rateClassCode, string loadProfileCode, Nullable<int> utilityIdInt, Nullable<int> annualUsage, Nullable<int> enrollmentType, Nullable<bool> hia)
        {
            var rateClassCodeParameter = rateClassCode != null ?
                new ObjectParameter("RateClassCode", rateClassCode) :
                new ObjectParameter("RateClassCode", typeof(string));
    
            var loadProfileCodeParameter = loadProfileCode != null ?
                new ObjectParameter("LoadProfileCode", loadProfileCode) :
                new ObjectParameter("LoadProfileCode", typeof(string));
    
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var annualUsageParameter = annualUsage.HasValue ?
                new ObjectParameter("AnnualUsage", annualUsage) :
                new ObjectParameter("AnnualUsage", typeof(int));
    
            var enrollmentTypeParameter = enrollmentType.HasValue ?
                new ObjectParameter("EnrollmentType", enrollmentType) :
                new ObjectParameter("EnrollmentType", typeof(int));
    
            var hiaParameter = hia.HasValue ?
                new ObjectParameter("Hia", hia) :
                new ObjectParameter("Hia", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IdrRuleAndRequestMode_SelectByParam_Result>("usp_IdrRuleAndRequestMode_SelectByParam", rateClassCodeParameter, loadProfileCodeParameter, utilityIdIntParameter, annualUsageParameter, enrollmentTypeParameter, hiaParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_BillingType_RetrieveByParams(Nullable<int> utilityIdInt, string rateClass, string loadProfile, string tariffCode)
        {
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var rateClassParameter = rateClass != null ?
                new ObjectParameter("RateClass", rateClass) :
                new ObjectParameter("RateClass", typeof(string));
    
            var loadProfileParameter = loadProfile != null ?
                new ObjectParameter("LoadProfile", loadProfile) :
                new ObjectParameter("LoadProfile", typeof(string));
    
            var tariffCodeParameter = tariffCode != null ?
                new ObjectParameter("TariffCode", tariffCode) :
                new ObjectParameter("TariffCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_BillingType_RetrieveByParams", utilityIdIntParameter, rateClassParameter, loadProfileParameter, tariffCodeParameter);
        }
    
        public virtual ObjectResult<usp_ChartOne_Result> usp_ChartOne()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ChartOne_Result>("usp_ChartOne");
        }
    
        public virtual ObjectResult<usp_Chart_PorCount_Result> usp_Chart_PorCount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Chart_PorCount_Result>("usp_Chart_PorCount");
        }
    
        public virtual ObjectResult<usp_Chart_PorAvgDiscountRate_Result> usp_Chart_PorAvgDiscountRate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Chart_PorAvgDiscountRate_Result>("usp_Chart_PorAvgDiscountRate");
        }
    
        public virtual ObjectResult<usp_Chart_PorAvgFlatFee_Result> usp_Chart_PorAvgFlatFee()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Chart_PorAvgFlatFee_Result>("usp_Chart_PorAvgFlatFee");
        }
    
        public virtual ObjectResult<usp_Chart_HuLpSla_Result> usp_Chart_HuLpSla()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Chart_HuLpSla_Result>("usp_Chart_HuLpSla");
        }
    
        public virtual ObjectResult<usp_Chart_HuUtilitySla_Result> usp_Chart_HuUtilitySla()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Chart_HuUtilitySla_Result>("usp_Chart_HuUtilitySla");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_MeterType_GetCountOfUtilityCompanyIdAndMeterTypeCode(string utilityCompanyId, string meterTypeCode)
        {
            var utilityCompanyIdParameter = utilityCompanyId != null ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(string));
    
            var meterTypeCodeParameter = meterTypeCode != null ?
                new ObjectParameter("MeterTypeCode", meterTypeCode) :
                new ObjectParameter("MeterTypeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_MeterType_GetCountOfUtilityCompanyIdAndMeterTypeCode", utilityCompanyIdParameter, meterTypeCodeParameter);
        }
    
        public virtual ObjectResult<usp_TariffCode_SELECT_By_UtilityCompanyId_Result> usp_TariffCode_SELECT_By_UtilityCompanyId(Nullable<System.Guid> utilityCompanyId)
        {
            var utilityCompanyIdParameter = utilityCompanyId.HasValue ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TariffCode_SELECT_By_UtilityCompanyId_Result>("usp_TariffCode_SELECT_By_UtilityCompanyId", utilityCompanyIdParameter);
        }
    
        public virtual ObjectResult<usp_AccountInfoFieldRequired_GetByUtility_Result> usp_AccountInfoFieldRequired_GetByUtility()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AccountInfoFieldRequired_GetByUtility_Result>("usp_AccountInfoFieldRequired_GetByUtility");
        }
    
        public virtual int usp_AccountAccountInfoFieldRequired_GetAsGrid()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AccountAccountInfoFieldRequired_GetAsGrid");
        }
    
        public virtual ObjectResult<usp_UtilityCompany_NotInAccountInfoFieldRequired_Result> usp_UtilityCompany_NotInAccountInfoFieldRequired()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UtilityCompany_NotInAccountInfoFieldRequired_Result>("usp_UtilityCompany_NotInAccountInfoFieldRequired");
        }
    
        public virtual ObjectResult<usp_IdrRule_Integrated_Result> usp_IdrRule_Integrated(string rateClassCode, string loadProfileCode, string tariffCodeCode, Nullable<bool> eligibility, Nullable<bool> hia, Nullable<int> utilityIdInt, Nullable<int> usage)
        {
            var rateClassCodeParameter = rateClassCode != null ?
                new ObjectParameter("RateClassCode", rateClassCode) :
                new ObjectParameter("RateClassCode", typeof(string));
    
            var loadProfileCodeParameter = loadProfileCode != null ?
                new ObjectParameter("LoadProfileCode", loadProfileCode) :
                new ObjectParameter("LoadProfileCode", typeof(string));
    
            var tariffCodeCodeParameter = tariffCodeCode != null ?
                new ObjectParameter("TariffCodeCode", tariffCodeCode) :
                new ObjectParameter("TariffCodeCode", typeof(string));
    
            var eligibilityParameter = eligibility.HasValue ?
                new ObjectParameter("Eligibility", eligibility) :
                new ObjectParameter("Eligibility", typeof(bool));
    
            var hiaParameter = hia.HasValue ?
                new ObjectParameter("Hia", hia) :
                new ObjectParameter("Hia", typeof(bool));
    
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var usageParameter = usage.HasValue ?
                new ObjectParameter("Usage", usage) :
                new ObjectParameter("Usage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IdrRule_Integrated_Result>("usp_IdrRule_Integrated", rateClassCodeParameter, loadProfileCodeParameter, tariffCodeCodeParameter, eligibilityParameter, hiaParameter, utilityIdIntParameter, usageParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_BillingType_RetrieveBy_UtilityRateClassLoadProfileTariffCode(Nullable<int> utilityIdInt, string rateClass, string loadProfile, string tariffCode)
        {
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var rateClassParameter = rateClass != null ?
                new ObjectParameter("RateClass", rateClass) :
                new ObjectParameter("RateClass", typeof(string));
    
            var loadProfileParameter = loadProfile != null ?
                new ObjectParameter("LoadProfile", loadProfile) :
                new ObjectParameter("LoadProfile", typeof(string));
    
            var tariffCodeParameter = tariffCode != null ?
                new ObjectParameter("TariffCode", tariffCode) :
                new ObjectParameter("TariffCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_BillingType_RetrieveBy_UtilityRateClassLoadProfileTariffCode", utilityIdIntParameter, rateClassParameter, loadProfileParameter, tariffCodeParameter);
        }
    
        public virtual ObjectResult<usp_zAuditLoadProfiles_SELECT_Result> usp_zAuditLoadProfiles_SELECT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_zAuditLoadProfiles_SELECT_Result>("usp_zAuditLoadProfiles_SELECT");
        }
    
        public virtual ObjectResult<usp_zAuditRateClasses_SELECT_Result> usp_zAuditRateClasses_SELECT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_zAuditRateClasses_SELECT_Result>("usp_zAuditRateClasses_SELECT");
        }
    
        public virtual ObjectResult<usp_zAuditTariffCodes_SELECT_Result> usp_zAuditTariffCodes_SELECT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_zAuditTariffCodes_SELECT_Result>("usp_zAuditTariffCodes_SELECT");
        }
    
        public virtual ObjectResult<usp_zAuditAccountInfoFieldRequired_SELECT_Result> usp_zAuditAccountInfoFieldRequired_SELECT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_zAuditAccountInfoFieldRequired_SELECT_Result>("usp_zAuditAccountInfoFieldRequired_SELECT");
        }
    
        public virtual ObjectResult<usp_Chart_HistoricalUsageRequestModeParameters_Result> usp_Chart_HistoricalUsageRequestModeParameters()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Chart_HistoricalUsageRequestModeParameters_Result>("usp_Chart_HistoricalUsageRequestModeParameters");
        }
    
        public virtual ObjectResult<usp_Chart_HistoricalUsageRequestModeParameters_Count_Result> usp_Chart_HistoricalUsageRequestModeParameters_Count()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Chart_HistoricalUsageRequestModeParameters_Count_Result>("usp_Chart_HistoricalUsageRequestModeParameters_Count");
        }
    
        public virtual ObjectResult<usp_Chart_IdrRuleCount_Result> usp_Chart_IdrRuleCount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Chart_IdrRuleCount_Result>("usp_Chart_IdrRuleCount");
        }
    
        public virtual ObjectResult<usp_UtilityCompany_NotIn_AccountInfoFieldRequired_Result> usp_UtilityCompany_NotIn_AccountInfoFieldRequired()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UtilityCompany_NotIn_AccountInfoFieldRequired_Result>("usp_UtilityCompany_NotIn_AccountInfoFieldRequired");
        }
    
        public virtual ObjectResult<usp_IdrRule_IndexSelect_Result> usp_IdrRule_IndexSelect(Nullable<System.Guid> utilityCompanyId, Nullable<int> requestModeEnrollmentTypeEnum)
        {
            var utilityCompanyIdParameter = utilityCompanyId.HasValue ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(System.Guid));
    
            var requestModeEnrollmentTypeEnumParameter = requestModeEnrollmentTypeEnum.HasValue ?
                new ObjectParameter("RequestModeEnrollmentTypeEnum", requestModeEnrollmentTypeEnum) :
                new ObjectParameter("RequestModeEnrollmentTypeEnum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IdrRule_IndexSelect_Result>("usp_IdrRule_IndexSelect", utilityCompanyIdParameter, requestModeEnrollmentTypeEnumParameter);
        }
    
        public virtual ObjectResult<usp_Chart_LpBillingTypeCount_Result> usp_Chart_LpBillingTypeCount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Chart_LpBillingTypeCount_Result>("usp_Chart_LpBillingTypeCount");
        }
    
        public virtual int usp_UtilityCompany_Create(string utilityCode, string fullName, Nullable<System.Guid> isoId, Nullable<System.Guid> marketId, string primaryDunsNumber, string lpEntityId, string parentCompany, Nullable<System.Guid> utilityStatusId, Nullable<bool> inactive, string user)
        {
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var isoIdParameter = isoId.HasValue ?
                new ObjectParameter("IsoId", isoId) :
                new ObjectParameter("IsoId", typeof(System.Guid));
    
            var marketIdParameter = marketId.HasValue ?
                new ObjectParameter("MarketId", marketId) :
                new ObjectParameter("MarketId", typeof(System.Guid));
    
            var primaryDunsNumberParameter = primaryDunsNumber != null ?
                new ObjectParameter("PrimaryDunsNumber", primaryDunsNumber) :
                new ObjectParameter("PrimaryDunsNumber", typeof(string));
    
            var lpEntityIdParameter = lpEntityId != null ?
                new ObjectParameter("LpEntityId", lpEntityId) :
                new ObjectParameter("LpEntityId", typeof(string));
    
            var parentCompanyParameter = parentCompany != null ?
                new ObjectParameter("ParentCompany", parentCompany) :
                new ObjectParameter("ParentCompany", typeof(string));
    
            var utilityStatusIdParameter = utilityStatusId.HasValue ?
                new ObjectParameter("UtilityStatusId", utilityStatusId) :
                new ObjectParameter("UtilityStatusId", typeof(System.Guid));
    
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(bool));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UtilityCompany_Create", utilityCodeParameter, fullNameParameter, isoIdParameter, marketIdParameter, primaryDunsNumberParameter, lpEntityIdParameter, parentCompanyParameter, utilityStatusIdParameter, inactiveParameter, userParameter);
        }
    
        public virtual ObjectResult<usp_UtilityCompany_Detail_Result> usp_UtilityCompany_Detail(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UtilityCompany_Detail_Result>("usp_UtilityCompany_Detail", idParameter);
        }
    
        public virtual int usp_UtilityCompany_EditSave(Nullable<System.Guid> id, string utilityCode, string fullName, Nullable<System.Guid> isoId, Nullable<System.Guid> marketId, string primaryDunsNumber, string lpEntityId, string parentCompany, Nullable<System.Guid> utilityStatusId, Nullable<bool> inactive, string lastModifiedBy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var isoIdParameter = isoId.HasValue ?
                new ObjectParameter("IsoId", isoId) :
                new ObjectParameter("IsoId", typeof(System.Guid));
    
            var marketIdParameter = marketId.HasValue ?
                new ObjectParameter("MarketId", marketId) :
                new ObjectParameter("MarketId", typeof(System.Guid));
    
            var primaryDunsNumberParameter = primaryDunsNumber != null ?
                new ObjectParameter("PrimaryDunsNumber", primaryDunsNumber) :
                new ObjectParameter("PrimaryDunsNumber", typeof(string));
    
            var lpEntityIdParameter = lpEntityId != null ?
                new ObjectParameter("LpEntityId", lpEntityId) :
                new ObjectParameter("LpEntityId", typeof(string));
    
            var parentCompanyParameter = parentCompany != null ?
                new ObjectParameter("ParentCompany", parentCompany) :
                new ObjectParameter("ParentCompany", typeof(string));
    
            var utilityStatusIdParameter = utilityStatusId.HasValue ?
                new ObjectParameter("UtilityStatusId", utilityStatusId) :
                new ObjectParameter("UtilityStatusId", typeof(System.Guid));
    
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy != null ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UtilityCompany_EditSave", idParameter, utilityCodeParameter, fullNameParameter, isoIdParameter, marketIdParameter, primaryDunsNumberParameter, lpEntityIdParameter, parentCompanyParameter, utilityStatusIdParameter, inactiveParameter, lastModifiedByParameter);
        }
    
        public virtual ObjectResult<usp_UtilityCompany_Index_Result> usp_UtilityCompany_Index()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UtilityCompany_Index_Result>("usp_UtilityCompany_Index");
        }
    
        public virtual ObjectResult<usp_zAuditLpBillingType_SELECT_Result> usp_zAuditLpBillingType_SELECT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_zAuditLpBillingType_SELECT_Result>("usp_zAuditLpBillingType_SELECT");
        }
    
        public virtual ObjectResult<usp_UtilityCompany_IndexView_Result> usp_UtilityCompany_IndexView()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UtilityCompany_IndexView_Result>("usp_UtilityCompany_IndexView");
        }
    
        public virtual ObjectResult<usp_UtilityCompany_Index_Select_Result> usp_UtilityCompany_Index_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UtilityCompany_Index_Select_Result>("usp_UtilityCompany_Index_Select");
        }
    
        public virtual ObjectResult<usp_IdrRule_IndexSelected_Result> usp_IdrRule_IndexSelected(Nullable<System.Guid> utilityCompanyId, Nullable<int> requestModeEnrollmentTypeEnum)
        {
            var utilityCompanyIdParameter = utilityCompanyId.HasValue ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(System.Guid));
    
            var requestModeEnrollmentTypeEnumParameter = requestModeEnrollmentTypeEnum.HasValue ?
                new ObjectParameter("RequestModeEnrollmentTypeEnum", requestModeEnrollmentTypeEnum) :
                new ObjectParameter("RequestModeEnrollmentTypeEnum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IdrRule_IndexSelected_Result>("usp_IdrRule_IndexSelected", utilityCompanyIdParameter, requestModeEnrollmentTypeEnumParameter);
        }
    
        public virtual ObjectResult<usp_IdrRule_IntegratedWithTariffCode_Result> usp_IdrRule_IntegratedWithTariffCode(string rateClassCode, string loadProfileCode, string tariffCodeCode, Nullable<bool> eligibility, Nullable<bool> hia, Nullable<int> utilityIdInt, Nullable<int> usage)
        {
            var rateClassCodeParameter = rateClassCode != null ?
                new ObjectParameter("RateClassCode", rateClassCode) :
                new ObjectParameter("RateClassCode", typeof(string));
    
            var loadProfileCodeParameter = loadProfileCode != null ?
                new ObjectParameter("LoadProfileCode", loadProfileCode) :
                new ObjectParameter("LoadProfileCode", typeof(string));
    
            var tariffCodeCodeParameter = tariffCodeCode != null ?
                new ObjectParameter("TariffCodeCode", tariffCodeCode) :
                new ObjectParameter("TariffCodeCode", typeof(string));
    
            var eligibilityParameter = eligibility.HasValue ?
                new ObjectParameter("Eligibility", eligibility) :
                new ObjectParameter("Eligibility", typeof(bool));
    
            var hiaParameter = hia.HasValue ?
                new ObjectParameter("Hia", hia) :
                new ObjectParameter("Hia", typeof(bool));
    
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var usageParameter = usage.HasValue ?
                new ObjectParameter("Usage", usage) :
                new ObjectParameter("Usage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IdrRule_IntegratedWithTariffCode_Result>("usp_IdrRule_IntegratedWithTariffCode", rateClassCodeParameter, loadProfileCodeParameter, tariffCodeCodeParameter, eligibilityParameter, hiaParameter, utilityIdIntParameter, usageParameter);
        }
    
        public virtual ObjectResult<usp_IdrRuleAndRequestMode_SelectByParamWithTariffCode_Result> usp_IdrRuleAndRequestMode_SelectByParamWithTariffCode(string rateClassCode, string loadProfileCode, string tariffCodeCode, Nullable<int> utilityIdInt, Nullable<int> annualUsage, Nullable<int> enrollmentType, Nullable<bool> hia)
        {
            var rateClassCodeParameter = rateClassCode != null ?
                new ObjectParameter("RateClassCode", rateClassCode) :
                new ObjectParameter("RateClassCode", typeof(string));
    
            var loadProfileCodeParameter = loadProfileCode != null ?
                new ObjectParameter("LoadProfileCode", loadProfileCode) :
                new ObjectParameter("LoadProfileCode", typeof(string));
    
            var tariffCodeCodeParameter = tariffCodeCode != null ?
                new ObjectParameter("TariffCodeCode", tariffCodeCode) :
                new ObjectParameter("TariffCodeCode", typeof(string));
    
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var annualUsageParameter = annualUsage.HasValue ?
                new ObjectParameter("AnnualUsage", annualUsage) :
                new ObjectParameter("AnnualUsage", typeof(int));
    
            var enrollmentTypeParameter = enrollmentType.HasValue ?
                new ObjectParameter("EnrollmentType", enrollmentType) :
                new ObjectParameter("EnrollmentType", typeof(int));
    
            var hiaParameter = hia.HasValue ?
                new ObjectParameter("Hia", hia) :
                new ObjectParameter("Hia", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IdrRuleAndRequestMode_SelectByParamWithTariffCode_Result>("usp_IdrRuleAndRequestMode_SelectByParamWithTariffCode", rateClassCodeParameter, loadProfileCodeParameter, tariffCodeCodeParameter, utilityIdIntParameter, annualUsageParameter, enrollmentTypeParameter, hiaParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_UtilityCompany_DoesUtilityCodeBelongToIso(string isoName, string utilityCode)
        {
            var isoNameParameter = isoName != null ?
                new ObjectParameter("IsoName", isoName) :
                new ObjectParameter("IsoName", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_UtilityCompany_DoesUtilityCodeBelongToIso", isoNameParameter, utilityCodeParameter);
        }
    
        public virtual ObjectResult<usp_IdrRule_Integrated_WithAlwaysRequestCheck_Result> usp_IdrRule_Integrated_WithAlwaysRequestCheck(string rateClassCode, string loadProfileCode, string tariffCodeCode, Nullable<bool> eligibility, Nullable<bool> hia, Nullable<int> utilityIdInt, Nullable<int> usage, string requestModeEnrollmentTypeId)
        {
            var rateClassCodeParameter = rateClassCode != null ?
                new ObjectParameter("RateClassCode", rateClassCode) :
                new ObjectParameter("RateClassCode", typeof(string));
    
            var loadProfileCodeParameter = loadProfileCode != null ?
                new ObjectParameter("LoadProfileCode", loadProfileCode) :
                new ObjectParameter("LoadProfileCode", typeof(string));
    
            var tariffCodeCodeParameter = tariffCodeCode != null ?
                new ObjectParameter("TariffCodeCode", tariffCodeCode) :
                new ObjectParameter("TariffCodeCode", typeof(string));
    
            var eligibilityParameter = eligibility.HasValue ?
                new ObjectParameter("Eligibility", eligibility) :
                new ObjectParameter("Eligibility", typeof(bool));
    
            var hiaParameter = hia.HasValue ?
                new ObjectParameter("Hia", hia) :
                new ObjectParameter("Hia", typeof(bool));
    
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var usageParameter = usage.HasValue ?
                new ObjectParameter("Usage", usage) :
                new ObjectParameter("Usage", typeof(int));
    
            var requestModeEnrollmentTypeIdParameter = requestModeEnrollmentTypeId != null ?
                new ObjectParameter("RequestModeEnrollmentTypeId", requestModeEnrollmentTypeId) :
                new ObjectParameter("RequestModeEnrollmentTypeId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IdrRule_Integrated_WithAlwaysRequestCheck_Result>("usp_IdrRule_Integrated_WithAlwaysRequestCheck", rateClassCodeParameter, loadProfileCodeParameter, tariffCodeCodeParameter, eligibilityParameter, hiaParameter, utilityIdIntParameter, usageParameter, requestModeEnrollmentTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_IdrRule_IntegratedWithTariffCodeAndAlwaysRequestCheck_Result> usp_IdrRule_IntegratedWithTariffCodeAndAlwaysRequestCheck(string rateClassCode, string loadProfileCode, string tariffCodeCode, Nullable<bool> eligibility, Nullable<bool> hia, Nullable<int> utilityIdInt, Nullable<int> usage, string requestModeEnrollmentTypeId)
        {
            var rateClassCodeParameter = rateClassCode != null ?
                new ObjectParameter("RateClassCode", rateClassCode) :
                new ObjectParameter("RateClassCode", typeof(string));
    
            var loadProfileCodeParameter = loadProfileCode != null ?
                new ObjectParameter("LoadProfileCode", loadProfileCode) :
                new ObjectParameter("LoadProfileCode", typeof(string));
    
            var tariffCodeCodeParameter = tariffCodeCode != null ?
                new ObjectParameter("TariffCodeCode", tariffCodeCode) :
                new ObjectParameter("TariffCodeCode", typeof(string));
    
            var eligibilityParameter = eligibility.HasValue ?
                new ObjectParameter("Eligibility", eligibility) :
                new ObjectParameter("Eligibility", typeof(bool));
    
            var hiaParameter = hia.HasValue ?
                new ObjectParameter("Hia", hia) :
                new ObjectParameter("Hia", typeof(bool));
    
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var usageParameter = usage.HasValue ?
                new ObjectParameter("Usage", usage) :
                new ObjectParameter("Usage", typeof(int));
    
            var requestModeEnrollmentTypeIdParameter = requestModeEnrollmentTypeId != null ?
                new ObjectParameter("RequestModeEnrollmentTypeId", requestModeEnrollmentTypeId) :
                new ObjectParameter("RequestModeEnrollmentTypeId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IdrRule_IntegratedWithTariffCodeAndAlwaysRequestCheck_Result>("usp_IdrRule_IntegratedWithTariffCodeAndAlwaysRequestCheck", rateClassCodeParameter, loadProfileCodeParameter, tariffCodeCodeParameter, eligibilityParameter, hiaParameter, utilityIdIntParameter, usageParameter, requestModeEnrollmentTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_IdrRule_IntegratedWithTariffCodeAndAlwaysRequest_Result> usp_IdrRule_IntegratedWithTariffCodeAndAlwaysRequest(string rateClassCode, string loadProfileCode, string tariffCodeCode, Nullable<bool> eligibility, Nullable<bool> hia, Nullable<int> utilityIdInt, Nullable<int> usage, string requestModeEnrollmentTypeId)
        {
            var rateClassCodeParameter = rateClassCode != null ?
                new ObjectParameter("RateClassCode", rateClassCode) :
                new ObjectParameter("RateClassCode", typeof(string));
    
            var loadProfileCodeParameter = loadProfileCode != null ?
                new ObjectParameter("LoadProfileCode", loadProfileCode) :
                new ObjectParameter("LoadProfileCode", typeof(string));
    
            var tariffCodeCodeParameter = tariffCodeCode != null ?
                new ObjectParameter("TariffCodeCode", tariffCodeCode) :
                new ObjectParameter("TariffCodeCode", typeof(string));
    
            var eligibilityParameter = eligibility.HasValue ?
                new ObjectParameter("Eligibility", eligibility) :
                new ObjectParameter("Eligibility", typeof(bool));
    
            var hiaParameter = hia.HasValue ?
                new ObjectParameter("Hia", hia) :
                new ObjectParameter("Hia", typeof(bool));
    
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var usageParameter = usage.HasValue ?
                new ObjectParameter("Usage", usage) :
                new ObjectParameter("Usage", typeof(int));
    
            var requestModeEnrollmentTypeIdParameter = requestModeEnrollmentTypeId != null ?
                new ObjectParameter("RequestModeEnrollmentTypeId", requestModeEnrollmentTypeId) :
                new ObjectParameter("RequestModeEnrollmentTypeId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IdrRule_IntegratedWithTariffCodeAndAlwaysRequest_Result>("usp_IdrRule_IntegratedWithTariffCodeAndAlwaysRequest", rateClassCodeParameter, loadProfileCodeParameter, tariffCodeCodeParameter, eligibilityParameter, hiaParameter, utilityIdIntParameter, usageParameter, requestModeEnrollmentTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_IdrRule_IntegratedWithTariffCodeAndAlwaysRequestAsSeparateField_Result> usp_IdrRule_IntegratedWithTariffCodeAndAlwaysRequestAsSeparateField(string rateClassCode, string loadProfileCode, string tariffCodeCode, Nullable<bool> eligibility, Nullable<bool> hia, Nullable<int> utilityIdInt, Nullable<int> usage, string requestModeEnrollmentTypeId)
        {
            var rateClassCodeParameter = rateClassCode != null ?
                new ObjectParameter("RateClassCode", rateClassCode) :
                new ObjectParameter("RateClassCode", typeof(string));
    
            var loadProfileCodeParameter = loadProfileCode != null ?
                new ObjectParameter("LoadProfileCode", loadProfileCode) :
                new ObjectParameter("LoadProfileCode", typeof(string));
    
            var tariffCodeCodeParameter = tariffCodeCode != null ?
                new ObjectParameter("TariffCodeCode", tariffCodeCode) :
                new ObjectParameter("TariffCodeCode", typeof(string));
    
            var eligibilityParameter = eligibility.HasValue ?
                new ObjectParameter("Eligibility", eligibility) :
                new ObjectParameter("Eligibility", typeof(bool));
    
            var hiaParameter = hia.HasValue ?
                new ObjectParameter("Hia", hia) :
                new ObjectParameter("Hia", typeof(bool));
    
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var usageParameter = usage.HasValue ?
                new ObjectParameter("Usage", usage) :
                new ObjectParameter("Usage", typeof(int));
    
            var requestModeEnrollmentTypeIdParameter = requestModeEnrollmentTypeId != null ?
                new ObjectParameter("RequestModeEnrollmentTypeId", requestModeEnrollmentTypeId) :
                new ObjectParameter("RequestModeEnrollmentTypeId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IdrRule_IntegratedWithTariffCodeAndAlwaysRequestAsSeparateField_Result>("usp_IdrRule_IntegratedWithTariffCodeAndAlwaysRequestAsSeparateField", rateClassCodeParameter, loadProfileCodeParameter, tariffCodeCodeParameter, eligibilityParameter, hiaParameter, utilityIdIntParameter, usageParameter, requestModeEnrollmentTypeIdParameter);
        }
    
        public virtual ObjectResult<string> usp_DownloadData_BillingAccountPattern()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_DownloadData_BillingAccountPattern");
        }
    
        public virtual ObjectResult<string> usp_DownloadData_ICapTCapRefresh()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_DownloadData_ICapTCapRefresh");
        }
    
        public virtual ObjectResult<string> usp_DownloadData_MeterNumberPattern()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_DownloadData_MeterNumberPattern");
        }
    
        public virtual ObjectResult<string> usp_DownloadData_NameKeyPattern()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_DownloadData_NameKeyPattern");
        }
    
        public virtual ObjectResult<string> usp_DownloadData_RequestModeHistoricalUsage()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_DownloadData_RequestModeHistoricalUsage");
        }
    
        public virtual ObjectResult<string> usp_DownloadData_RequestModeICap()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_DownloadData_RequestModeICap");
        }
    
        public virtual ObjectResult<string> usp_DownloadData_RequestModeIdr()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_DownloadData_RequestModeIdr");
        }
    
        public virtual ObjectResult<string> usp_DownloadData_ServiceAccountPattern()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_DownloadData_ServiceAccountPattern");
        }
    
        public virtual ObjectResult<string> usp_DownloadData_ServiceAddressZipPattern()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_DownloadData_ServiceAddressZipPattern");
        }
    
        public virtual ObjectResult<string> usp_DownloadData_StrataPattern()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_DownloadData_StrataPattern");
        }
    
        public virtual ObjectResult<string> usp_DownloadData_UtilityCompany()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_DownloadData_UtilityCompany");
        }
    
        public virtual ObjectResult<usp_LpStandardTariffCode_GetByUtilityCode_Result> usp_LpStandardTariffCode_GetByUtilityCode(string utilityCode)
        {
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LpStandardTariffCode_GetByUtilityCode_Result>("usp_LpStandardTariffCode_GetByUtilityCode", utilityCodeParameter);
        }
    
        public virtual int usp_LoadProfile_INSERT(Nullable<System.Guid> id, string utilityCode, Nullable<int> loadProfileId, string loadProfileCode, string description, string libertyPowerStandardLoadProfile, string accountTypeName, string inactive, string user)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var loadProfileIdParameter = loadProfileId.HasValue ?
                new ObjectParameter("LoadProfileId", loadProfileId) :
                new ObjectParameter("LoadProfileId", typeof(int));
    
            var loadProfileCodeParameter = loadProfileCode != null ?
                new ObjectParameter("LoadProfileCode", loadProfileCode) :
                new ObjectParameter("LoadProfileCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var libertyPowerStandardLoadProfileParameter = libertyPowerStandardLoadProfile != null ?
                new ObjectParameter("LibertyPowerStandardLoadProfile", libertyPowerStandardLoadProfile) :
                new ObjectParameter("LibertyPowerStandardLoadProfile", typeof(string));
    
            var accountTypeNameParameter = accountTypeName != null ?
                new ObjectParameter("AccountTypeName", accountTypeName) :
                new ObjectParameter("AccountTypeName", typeof(string));
    
            var inactiveParameter = inactive != null ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_LoadProfile_INSERT", idParameter, utilityCodeParameter, loadProfileIdParameter, loadProfileCodeParameter, descriptionParameter, libertyPowerStandardLoadProfileParameter, accountTypeNameParameter, inactiveParameter, userParameter);
        }
    
        public virtual int usp_LoadProfileAlias_INSERT(Nullable<System.Guid> id, string utilityCode, Nullable<int> loadProfileId, string loadProfileCodeAlias, string inactive, string user)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var loadProfileIdParameter = loadProfileId.HasValue ?
                new ObjectParameter("LoadProfileId", loadProfileId) :
                new ObjectParameter("LoadProfileId", typeof(int));
    
            var loadProfileCodeAliasParameter = loadProfileCodeAlias != null ?
                new ObjectParameter("LoadProfileCodeAlias", loadProfileCodeAlias) :
                new ObjectParameter("LoadProfileCodeAlias", typeof(string));
    
            var inactiveParameter = inactive != null ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_LoadProfileAlias_INSERT", idParameter, utilityCodeParameter, loadProfileIdParameter, loadProfileCodeAliasParameter, inactiveParameter, userParameter);
        }
    
        public virtual int usp_LpStandardTariffCode_INSERT(Nullable<System.Guid> id, string lpStandardTariffCodeCode, string utilityCode, string user)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var lpStandardTariffCodeCodeParameter = lpStandardTariffCodeCode != null ?
                new ObjectParameter("LpStandardTariffCodeCode", lpStandardTariffCodeCode) :
                new ObjectParameter("LpStandardTariffCodeCode", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_LpStandardTariffCode_INSERT", idParameter, lpStandardTariffCodeCodeParameter, utilityCodeParameter, userParameter);
        }
    
        public virtual int usp_LpStandardLoadProfile_INSERT(Nullable<System.Guid> id, string utilityCode, string lpStandardProfileCode, string inactive, string user)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var lpStandardProfileCodeParameter = lpStandardProfileCode != null ?
                new ObjectParameter("LpStandardProfileCode", lpStandardProfileCode) :
                new ObjectParameter("LpStandardProfileCode", typeof(string));
    
            var inactiveParameter = inactive != null ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_LpStandardLoadProfile_INSERT", idParameter, utilityCodeParameter, lpStandardProfileCodeParameter, inactiveParameter, userParameter);
        }
    
        public virtual int usp_LpStandardTariffCode_UPSERT(Nullable<System.Guid> id, string lpStandardTariffCode, string utilityCode, Nullable<bool> inactive, string user)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var lpStandardTariffCodeParameter = lpStandardTariffCode != null ?
                new ObjectParameter("LpStandardTariffCode", lpStandardTariffCode) :
                new ObjectParameter("LpStandardTariffCode", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(bool));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_LpStandardTariffCode_UPSERT", idParameter, lpStandardTariffCodeParameter, utilityCodeParameter, inactiveParameter, userParameter);
        }
    
        public virtual int usp_TariffCode_UPSERT(Nullable<System.Guid> id, string utilityCode, string lpStandardTariffCode, string tariffCode, string description, string accountType, Nullable<bool> inactive, string user)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var lpStandardTariffCodeParameter = lpStandardTariffCode != null ?
                new ObjectParameter("LpStandardTariffCode", lpStandardTariffCode) :
                new ObjectParameter("LpStandardTariffCode", typeof(string));
    
            var tariffCodeParameter = tariffCode != null ?
                new ObjectParameter("TariffCode", tariffCode) :
                new ObjectParameter("TariffCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var accountTypeParameter = accountType != null ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(string));
    
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(bool));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TariffCode_UPSERT", idParameter, utilityCodeParameter, lpStandardTariffCodeParameter, tariffCodeParameter, descriptionParameter, accountTypeParameter, inactiveParameter, userParameter);
        }
    
        public virtual int usp_TariffCodeAlias_UPSERT(Nullable<System.Guid> id, string utilityCode, Nullable<int> tariffCodeId, string tariffCodeAlias, Nullable<bool> inactive, string user)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var tariffCodeIdParameter = tariffCodeId.HasValue ?
                new ObjectParameter("TariffCodeId", tariffCodeId) :
                new ObjectParameter("TariffCodeId", typeof(int));
    
            var tariffCodeAliasParameter = tariffCodeAlias != null ?
                new ObjectParameter("TariffCodeAlias", tariffCodeAlias) :
                new ObjectParameter("TariffCodeAlias", typeof(string));
    
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(bool));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TariffCodeAlias_UPSERT", idParameter, utilityCodeParameter, tariffCodeIdParameter, tariffCodeAliasParameter, inactiveParameter, userParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_PurchaseOfReceivables_UPSERT(Nullable<System.Guid> id, string utilityCode, string porDriver, string rateClassCode, string loadProfileCode, string tariffCodeCode, Nullable<bool> isOffered, Nullable<bool> isParticipated, Nullable<bool> isAssurance, string recourse, Nullable<decimal> discountRate, Nullable<decimal> flatFee, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expirationDate, Nullable<bool> inactive, string user)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var porDriverParameter = porDriver != null ?
                new ObjectParameter("PorDriver", porDriver) :
                new ObjectParameter("PorDriver", typeof(string));
    
            var rateClassCodeParameter = rateClassCode != null ?
                new ObjectParameter("RateClassCode", rateClassCode) :
                new ObjectParameter("RateClassCode", typeof(string));
    
            var loadProfileCodeParameter = loadProfileCode != null ?
                new ObjectParameter("LoadProfileCode", loadProfileCode) :
                new ObjectParameter("LoadProfileCode", typeof(string));
    
            var tariffCodeCodeParameter = tariffCodeCode != null ?
                new ObjectParameter("TariffCodeCode", tariffCodeCode) :
                new ObjectParameter("TariffCodeCode", typeof(string));
    
            var isOfferedParameter = isOffered.HasValue ?
                new ObjectParameter("IsOffered", isOffered) :
                new ObjectParameter("IsOffered", typeof(bool));
    
            var isParticipatedParameter = isParticipated.HasValue ?
                new ObjectParameter("IsParticipated", isParticipated) :
                new ObjectParameter("IsParticipated", typeof(bool));
    
            var isAssuranceParameter = isAssurance.HasValue ?
                new ObjectParameter("IsAssurance", isAssurance) :
                new ObjectParameter("IsAssurance", typeof(bool));
    
            var recourseParameter = recourse != null ?
                new ObjectParameter("Recourse", recourse) :
                new ObjectParameter("Recourse", typeof(string));
    
            var discountRateParameter = discountRate.HasValue ?
                new ObjectParameter("DiscountRate", discountRate) :
                new ObjectParameter("DiscountRate", typeof(decimal));
    
            var flatFeeParameter = flatFee.HasValue ?
                new ObjectParameter("FlatFee", flatFee) :
                new ObjectParameter("FlatFee", typeof(decimal));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(bool));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_PurchaseOfReceivables_UPSERT", idParameter, utilityCodeParameter, porDriverParameter, rateClassCodeParameter, loadProfileCodeParameter, tariffCodeCodeParameter, isOfferedParameter, isParticipatedParameter, isAssuranceParameter, recourseParameter, discountRateParameter, flatFeeParameter, effectiveDateParameter, expirationDateParameter, inactiveParameter, userParameter);
        }
    
        public virtual ObjectResult<usp_PurchaseOfReceivables_GetByUtilityCode_Result> usp_PurchaseOfReceivables_GetByUtilityCode(string utilityCode)
        {
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PurchaseOfReceivables_GetByUtilityCode_Result>("usp_PurchaseOfReceivables_GetByUtilityCode", utilityCodeParameter);
        }
    
        public virtual ObjectResult<usp_LibertyPowerBillingType_SELECT_ByUtilityCompanyId_Result> usp_LibertyPowerBillingType_SELECT_ByUtilityCompanyId(string utilityCompanyId)
        {
            var utilityCompanyIdParameter = utilityCompanyId != null ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LibertyPowerBillingType_SELECT_ByUtilityCompanyId_Result>("usp_LibertyPowerBillingType_SELECT_ByUtilityCompanyId", utilityCompanyIdParameter);
        }
    
        public virtual ObjectResult<usp_LibertyPowerBillingType_SELECT_Id_Result> usp_LibertyPowerBillingType_SELECT_Id(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LibertyPowerBillingType_SELECT_Id_Result>("usp_LibertyPowerBillingType_SELECT_Id", idParameter);
        }
    
        public virtual int usp_LibertyPowerBillingType_INSERT(string id, string utilityCompanyId, string porDriverId, string loadProfileId, string rateClassId, string tariffCodeId, string defaultBillingTypeId, string lpUtilityOfferedBillingTypeId, string lpApprovedBillingTypeId, Nullable<int> terms, Nullable<bool> inactive, string createdBy)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            var utilityCompanyIdParameter = utilityCompanyId != null ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(string));
    
            var porDriverIdParameter = porDriverId != null ?
                new ObjectParameter("PorDriverId", porDriverId) :
                new ObjectParameter("PorDriverId", typeof(string));
    
            var loadProfileIdParameter = loadProfileId != null ?
                new ObjectParameter("LoadProfileId", loadProfileId) :
                new ObjectParameter("LoadProfileId", typeof(string));
    
            var rateClassIdParameter = rateClassId != null ?
                new ObjectParameter("RateClassId", rateClassId) :
                new ObjectParameter("RateClassId", typeof(string));
    
            var tariffCodeIdParameter = tariffCodeId != null ?
                new ObjectParameter("TariffCodeId", tariffCodeId) :
                new ObjectParameter("TariffCodeId", typeof(string));
    
            var defaultBillingTypeIdParameter = defaultBillingTypeId != null ?
                new ObjectParameter("DefaultBillingTypeId", defaultBillingTypeId) :
                new ObjectParameter("DefaultBillingTypeId", typeof(string));
    
            var lpUtilityOfferedBillingTypeIdParameter = lpUtilityOfferedBillingTypeId != null ?
                new ObjectParameter("LpUtilityOfferedBillingTypeId", lpUtilityOfferedBillingTypeId) :
                new ObjectParameter("LpUtilityOfferedBillingTypeId", typeof(string));
    
            var lpApprovedBillingTypeIdParameter = lpApprovedBillingTypeId != null ?
                new ObjectParameter("LpApprovedBillingTypeId", lpApprovedBillingTypeId) :
                new ObjectParameter("LpApprovedBillingTypeId", typeof(string));
    
            var termsParameter = terms.HasValue ?
                new ObjectParameter("Terms", terms) :
                new ObjectParameter("Terms", typeof(int));
    
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_LibertyPowerBillingType_INSERT", idParameter, utilityCompanyIdParameter, porDriverIdParameter, loadProfileIdParameter, rateClassIdParameter, tariffCodeIdParameter, defaultBillingTypeIdParameter, lpUtilityOfferedBillingTypeIdParameter, lpApprovedBillingTypeIdParameter, termsParameter, inactiveParameter, createdByParameter);
        }
    
        public virtual int usp_LibertyPowerBillingType_UPDATE(string id, string utilityCompanyId, string porDriverId, string loadProfileId, string rateClassId, string tariffCodeId, string defaultBillingTypeId, string lpUtilityOfferedBillingId, string lpUtilityOfferedBillingTypeId, string lpApprovedBillingId, string lpApprovedBillingTypeId, Nullable<int> terms, Nullable<bool> inactive, string modifiedBy)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            var utilityCompanyIdParameter = utilityCompanyId != null ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(string));
    
            var porDriverIdParameter = porDriverId != null ?
                new ObjectParameter("PorDriverId", porDriverId) :
                new ObjectParameter("PorDriverId", typeof(string));
    
            var loadProfileIdParameter = loadProfileId != null ?
                new ObjectParameter("LoadProfileId", loadProfileId) :
                new ObjectParameter("LoadProfileId", typeof(string));
    
            var rateClassIdParameter = rateClassId != null ?
                new ObjectParameter("RateClassId", rateClassId) :
                new ObjectParameter("RateClassId", typeof(string));
    
            var tariffCodeIdParameter = tariffCodeId != null ?
                new ObjectParameter("TariffCodeId", tariffCodeId) :
                new ObjectParameter("TariffCodeId", typeof(string));
    
            var defaultBillingTypeIdParameter = defaultBillingTypeId != null ?
                new ObjectParameter("DefaultBillingTypeId", defaultBillingTypeId) :
                new ObjectParameter("DefaultBillingTypeId", typeof(string));
    
            var lpUtilityOfferedBillingIdParameter = lpUtilityOfferedBillingId != null ?
                new ObjectParameter("LpUtilityOfferedBillingId", lpUtilityOfferedBillingId) :
                new ObjectParameter("LpUtilityOfferedBillingId", typeof(string));
    
            var lpUtilityOfferedBillingTypeIdParameter = lpUtilityOfferedBillingTypeId != null ?
                new ObjectParameter("LpUtilityOfferedBillingTypeId", lpUtilityOfferedBillingTypeId) :
                new ObjectParameter("LpUtilityOfferedBillingTypeId", typeof(string));
    
            var lpApprovedBillingIdParameter = lpApprovedBillingId != null ?
                new ObjectParameter("LpApprovedBillingId", lpApprovedBillingId) :
                new ObjectParameter("LpApprovedBillingId", typeof(string));
    
            var lpApprovedBillingTypeIdParameter = lpApprovedBillingTypeId != null ?
                new ObjectParameter("LpApprovedBillingTypeId", lpApprovedBillingTypeId) :
                new ObjectParameter("LpApprovedBillingTypeId", typeof(string));
    
            var termsParameter = terms.HasValue ?
                new ObjectParameter("Terms", terms) :
                new ObjectParameter("Terms", typeof(int));
    
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(bool));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_LibertyPowerBillingType_UPDATE", idParameter, utilityCompanyIdParameter, porDriverIdParameter, loadProfileIdParameter, rateClassIdParameter, tariffCodeIdParameter, defaultBillingTypeIdParameter, lpUtilityOfferedBillingIdParameter, lpUtilityOfferedBillingTypeIdParameter, lpApprovedBillingIdParameter, lpApprovedBillingTypeIdParameter, termsParameter, inactiveParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<string> Insert_Generator(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Insert_Generator", tableNameParameter);
        }
    
        public virtual int InsertGenerator(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertGenerator", tableNameParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<usp_DataSync_BillingAccountPattern_GetByLastModifiedDate_Result> usp_DataSync_BillingAccountPattern_GetByLastModifiedDate(Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate)
        {
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("BeginDate", beginDate) :
                new ObjectParameter("BeginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DataSync_BillingAccountPattern_GetByLastModifiedDate_Result>("usp_DataSync_BillingAccountPattern_GetByLastModifiedDate", beginDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<usp_DataSync_ICapTCapRefresh_GetByLastModifiedDate_Result> usp_DataSync_ICapTCapRefresh_GetByLastModifiedDate(Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate)
        {
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("BeginDate", beginDate) :
                new ObjectParameter("BeginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DataSync_ICapTCapRefresh_GetByLastModifiedDate_Result>("usp_DataSync_ICapTCapRefresh_GetByLastModifiedDate", beginDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<usp_DataSync_IdrRequestCost_GetByLastModifiedDate_Result> usp_DataSync_IdrRequestCost_GetByLastModifiedDate(Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate)
        {
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("BeginDate", beginDate) :
                new ObjectParameter("BeginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DataSync_IdrRequestCost_GetByLastModifiedDate_Result>("usp_DataSync_IdrRequestCost_GetByLastModifiedDate", beginDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<usp_DataSync_MeterNumberPattern_GetByLastModifiedDate_Result> usp_DataSync_MeterNumberPattern_GetByLastModifiedDate(Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate)
        {
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("BeginDate", beginDate) :
                new ObjectParameter("BeginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DataSync_MeterNumberPattern_GetByLastModifiedDate_Result>("usp_DataSync_MeterNumberPattern_GetByLastModifiedDate", beginDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<usp_DataSync_NameKeyPattern_GetByLastModifiedDate_Result> usp_DataSync_NameKeyPattern_GetByLastModifiedDate(Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate)
        {
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("BeginDate", beginDate) :
                new ObjectParameter("BeginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DataSync_NameKeyPattern_GetByLastModifiedDate_Result>("usp_DataSync_NameKeyPattern_GetByLastModifiedDate", beginDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<usp_DataSync_ServiceAccountPattern_GetByLastModifiedDate_Result> usp_DataSync_ServiceAccountPattern_GetByLastModifiedDate(Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate)
        {
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("BeginDate", beginDate) :
                new ObjectParameter("BeginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DataSync_ServiceAccountPattern_GetByLastModifiedDate_Result>("usp_DataSync_ServiceAccountPattern_GetByLastModifiedDate", beginDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<usp_DataSync_ServiceAddressZipPattern_GetByLastModifiedDate_Result> usp_DataSync_ServiceAddressZipPattern_GetByLastModifiedDate(Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate)
        {
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("BeginDate", beginDate) :
                new ObjectParameter("BeginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DataSync_ServiceAddressZipPattern_GetByLastModifiedDate_Result>("usp_DataSync_ServiceAddressZipPattern_GetByLastModifiedDate", beginDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<usp_DataSync_ServiceLevelAgreements_GetByLastModifiedDate_Result> usp_DataSync_ServiceLevelAgreements_GetByLastModifiedDate(Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate)
        {
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("BeginDate", beginDate) :
                new ObjectParameter("BeginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DataSync_ServiceLevelAgreements_GetByLastModifiedDate_Result>("usp_DataSync_ServiceLevelAgreements_GetByLastModifiedDate", beginDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<usp_DataSync_StrataPattern_GetByLastModifiedDate_Result> usp_DataSync_StrataPattern_GetByLastModifiedDate(Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate)
        {
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("BeginDate", beginDate) :
                new ObjectParameter("BeginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DataSync_StrataPattern_GetByLastModifiedDate_Result>("usp_DataSync_StrataPattern_GetByLastModifiedDate", beginDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<usp_DataSync_UtiiltyAttributes_GetByLastModifiedDate_Result> usp_DataSync_UtiiltyAttributes_GetByLastModifiedDate(Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate)
        {
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("BeginDate", beginDate) :
                new ObjectParameter("BeginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DataSync_UtiiltyAttributes_GetByLastModifiedDate_Result>("usp_DataSync_UtiiltyAttributes_GetByLastModifiedDate", beginDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<usp_IdrRule_Conglomeration_Result> usp_IdrRule_Conglomeration(string rateClassCode, string loadProfileCode, Nullable<bool> eligibility, Nullable<bool> hia, Nullable<int> utilityIdInt, Nullable<int> usage)
        {
            var rateClassCodeParameter = rateClassCode != null ?
                new ObjectParameter("RateClassCode", rateClassCode) :
                new ObjectParameter("RateClassCode", typeof(string));
    
            var loadProfileCodeParameter = loadProfileCode != null ?
                new ObjectParameter("LoadProfileCode", loadProfileCode) :
                new ObjectParameter("LoadProfileCode", typeof(string));
    
            var eligibilityParameter = eligibility.HasValue ?
                new ObjectParameter("Eligibility", eligibility) :
                new ObjectParameter("Eligibility", typeof(bool));
    
            var hiaParameter = hia.HasValue ?
                new ObjectParameter("Hia", hia) :
                new ObjectParameter("Hia", typeof(bool));
    
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var usageParameter = usage.HasValue ?
                new ObjectParameter("Usage", usage) :
                new ObjectParameter("Usage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IdrRule_Conglomeration_Result>("usp_IdrRule_Conglomeration", rateClassCodeParameter, loadProfileCodeParameter, eligibilityParameter, hiaParameter, utilityIdIntParameter, usageParameter);
        }
    
        public virtual ObjectResult<usp_IdrRule_GuaranteedFactorNotMet_Result> usp_IdrRule_GuaranteedFactorNotMet(string rateClassCode, string loadProfileCode, Nullable<bool> eligibility, Nullable<bool> hia, Nullable<int> utilityIdInt, Nullable<int> usage)
        {
            var rateClassCodeParameter = rateClassCode != null ?
                new ObjectParameter("RateClassCode", rateClassCode) :
                new ObjectParameter("RateClassCode", typeof(string));
    
            var loadProfileCodeParameter = loadProfileCode != null ?
                new ObjectParameter("LoadProfileCode", loadProfileCode) :
                new ObjectParameter("LoadProfileCode", typeof(string));
    
            var eligibilityParameter = eligibility.HasValue ?
                new ObjectParameter("Eligibility", eligibility) :
                new ObjectParameter("Eligibility", typeof(bool));
    
            var hiaParameter = hia.HasValue ?
                new ObjectParameter("Hia", hia) :
                new ObjectParameter("Hia", typeof(bool));
    
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var usageParameter = usage.HasValue ?
                new ObjectParameter("Usage", usage) :
                new ObjectParameter("Usage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IdrRule_GuaranteedFactorNotMet_Result>("usp_IdrRule_GuaranteedFactorNotMet", rateClassCodeParameter, loadProfileCodeParameter, eligibilityParameter, hiaParameter, utilityIdIntParameter, usageParameter);
        }
    
        public virtual ObjectResult<usp_IdrRule_Index_Result> usp_IdrRule_Index()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IdrRule_Index_Result>("usp_IdrRule_Index");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_IdrRule_Match(Nullable<int> utilityIdInt, string rateClassValue, string loadProfileValue, Nullable<bool> hia, Nullable<bool> isEligibleFromUsage, Nullable<int> usage)
        {
            var utilityIdIntParameter = utilityIdInt.HasValue ?
                new ObjectParameter("UtilityIdInt", utilityIdInt) :
                new ObjectParameter("UtilityIdInt", typeof(int));
    
            var rateClassValueParameter = rateClassValue != null ?
                new ObjectParameter("RateClassValue", rateClassValue) :
                new ObjectParameter("RateClassValue", typeof(string));
    
            var loadProfileValueParameter = loadProfileValue != null ?
                new ObjectParameter("LoadProfileValue", loadProfileValue) :
                new ObjectParameter("LoadProfileValue", typeof(string));
    
            var hiaParameter = hia.HasValue ?
                new ObjectParameter("Hia", hia) :
                new ObjectParameter("Hia", typeof(bool));
    
            var isEligibleFromUsageParameter = isEligibleFromUsage.HasValue ?
                new ObjectParameter("IsEligibleFromUsage", isEligibleFromUsage) :
                new ObjectParameter("IsEligibleFromUsage", typeof(bool));
    
            var usageParameter = usage.HasValue ?
                new ObjectParameter("Usage", usage) :
                new ObjectParameter("Usage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_IdrRule_Match", utilityIdIntParameter, rateClassValueParameter, loadProfileValueParameter, hiaParameter, isEligibleFromUsageParameter, usageParameter);
        }
    
        public virtual ObjectResult<usp_LoadProfile_GetByUtilityCode_Result> usp_LoadProfile_GetByUtilityCode(string utilityCode)
        {
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LoadProfile_GetByUtilityCode_Result>("usp_LoadProfile_GetByUtilityCode", utilityCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_LoadProfile_UPSERT(Nullable<System.Guid> id, string utilityCode, string lpStandardLoadProfile, string loadProfile, string description, string accountType, Nullable<bool> inactive, string user)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var lpStandardLoadProfileParameter = lpStandardLoadProfile != null ?
                new ObjectParameter("LpStandardLoadProfile", lpStandardLoadProfile) :
                new ObjectParameter("LpStandardLoadProfile", typeof(string));
    
            var loadProfileParameter = loadProfile != null ?
                new ObjectParameter("LoadProfile", loadProfile) :
                new ObjectParameter("LoadProfile", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var accountTypeParameter = accountType != null ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(string));
    
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(bool));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_LoadProfile_UPSERT", idParameter, utilityCodeParameter, lpStandardLoadProfileParameter, loadProfileParameter, descriptionParameter, accountTypeParameter, inactiveParameter, userParameter);
        }
    
        public virtual ObjectResult<usp_LoadProfileAlias_GetByUtilityCode_Result> usp_LoadProfileAlias_GetByUtilityCode(string utilityCode)
        {
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LoadProfileAlias_GetByUtilityCode_Result>("usp_LoadProfileAlias_GetByUtilityCode", utilityCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_LoadProfileAlias_UPSERT(Nullable<System.Guid> id, string utilityCode, Nullable<int> loadProfileId, string loadProfileAlias, Nullable<bool> inactive, string user)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var loadProfileIdParameter = loadProfileId.HasValue ?
                new ObjectParameter("LoadProfileId", loadProfileId) :
                new ObjectParameter("LoadProfileId", typeof(int));
    
            var loadProfileAliasParameter = loadProfileAlias != null ?
                new ObjectParameter("LoadProfileAlias", loadProfileAlias) :
                new ObjectParameter("LoadProfileAlias", typeof(string));
    
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(bool));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_LoadProfileAlias_UPSERT", idParameter, utilityCodeParameter, loadProfileIdParameter, loadProfileAliasParameter, inactiveParameter, userParameter);
        }
    
        public virtual ObjectResult<usp_LpStandardLoadProfile_GetByUtilityCode_Result> usp_LpStandardLoadProfile_GetByUtilityCode(string utilityCode)
        {
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LpStandardLoadProfile_GetByUtilityCode_Result>("usp_LpStandardLoadProfile_GetByUtilityCode", utilityCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_LpStandardLoadProfile_UPSERT(Nullable<System.Guid> id, string lpStandardLoadProfile, string utilityCode, Nullable<bool> inactive, string user)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var lpStandardLoadProfileParameter = lpStandardLoadProfile != null ?
                new ObjectParameter("LpStandardLoadProfile", lpStandardLoadProfile) :
                new ObjectParameter("LpStandardLoadProfile", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(bool));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_LpStandardLoadProfile_UPSERT", idParameter, lpStandardLoadProfileParameter, utilityCodeParameter, inactiveParameter, userParameter);
        }
    
        public virtual ObjectResult<usp_LpStandardRateClass_GetByUtilityCode_Result> usp_LpStandardRateClass_GetByUtilityCode(string utilityCode)
        {
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LpStandardRateClass_GetByUtilityCode_Result>("usp_LpStandardRateClass_GetByUtilityCode", utilityCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_LpStandardRateClass_UPSERT(Nullable<System.Guid> id, string lpStandardRateClass, string utilityCode, Nullable<bool> inactive, string user)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var lpStandardRateClassParameter = lpStandardRateClass != null ?
                new ObjectParameter("LpStandardRateClass", lpStandardRateClass) :
                new ObjectParameter("LpStandardRateClass", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(bool));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_LpStandardRateClass_UPSERT", idParameter, lpStandardRateClassParameter, utilityCodeParameter, inactiveParameter, userParameter);
        }
    
        public virtual ObjectResult<usp_RateClass_GetByUtilityCode_Result> usp_RateClass_GetByUtilityCode(string utilityCode)
        {
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RateClass_GetByUtilityCode_Result>("usp_RateClass_GetByUtilityCode", utilityCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_RateClass_UPSERT(Nullable<System.Guid> id, string utilityCode, string lpStandardRateClass, string rateClass, string description, string accountType, Nullable<bool> inactive, string user)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var lpStandardRateClassParameter = lpStandardRateClass != null ?
                new ObjectParameter("LpStandardRateClass", lpStandardRateClass) :
                new ObjectParameter("LpStandardRateClass", typeof(string));
    
            var rateClassParameter = rateClass != null ?
                new ObjectParameter("RateClass", rateClass) :
                new ObjectParameter("RateClass", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var accountTypeParameter = accountType != null ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(string));
    
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(bool));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_RateClass_UPSERT", idParameter, utilityCodeParameter, lpStandardRateClassParameter, rateClassParameter, descriptionParameter, accountTypeParameter, inactiveParameter, userParameter);
        }
    
        public virtual ObjectResult<usp_RateClassAlias_GetByUtilityCode_Result> usp_RateClassAlias_GetByUtilityCode(string utilityCode)
        {
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RateClassAlias_GetByUtilityCode_Result>("usp_RateClassAlias_GetByUtilityCode", utilityCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_RateClassAlias_UPSERT(Nullable<System.Guid> id, string utilityCode, Nullable<int> rateClassId, string rateClassAlias, Nullable<bool> inactive, string user)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var rateClassIdParameter = rateClassId.HasValue ?
                new ObjectParameter("RateClassId", rateClassId) :
                new ObjectParameter("RateClassId", typeof(int));
    
            var rateClassAliasParameter = rateClassAlias != null ?
                new ObjectParameter("RateClassAlias", rateClassAlias) :
                new ObjectParameter("RateClassAlias", typeof(string));
    
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(bool));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_RateClassAlias_UPSERT", idParameter, utilityCodeParameter, rateClassIdParameter, rateClassAliasParameter, inactiveParameter, userParameter);
        }
    
        public virtual ObjectResult<usp_SynchronizationTables_GetByLastModifiedDate_Result> usp_SynchronizationTables_GetByLastModifiedDate(Nullable<System.DateTime> lastModifiedDate)
        {
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SynchronizationTables_GetByLastModifiedDate_Result>("usp_SynchronizationTables_GetByLastModifiedDate", lastModifiedDateParameter);
        }
    
        public virtual ObjectResult<usp_TariffCode_GetByUtilityCode_Result> usp_TariffCode_GetByUtilityCode(string utilityCode)
        {
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TariffCode_GetByUtilityCode_Result>("usp_TariffCode_GetByUtilityCode", utilityCodeParameter);
        }
    
        public virtual int usp_TariffCode_INSERT(Nullable<System.Guid> id, string utilityCode, string lpStandardTariffCode, string tariffCode, string description, string accountType, Nullable<int> tariffCodeId, string user)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var lpStandardTariffCodeParameter = lpStandardTariffCode != null ?
                new ObjectParameter("LpStandardTariffCode", lpStandardTariffCode) :
                new ObjectParameter("LpStandardTariffCode", typeof(string));
    
            var tariffCodeParameter = tariffCode != null ?
                new ObjectParameter("TariffCode", tariffCode) :
                new ObjectParameter("TariffCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var accountTypeParameter = accountType != null ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(string));
    
            var tariffCodeIdParameter = tariffCodeId.HasValue ?
                new ObjectParameter("TariffCodeId", tariffCodeId) :
                new ObjectParameter("TariffCodeId", typeof(int));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TariffCode_INSERT", idParameter, utilityCodeParameter, lpStandardTariffCodeParameter, tariffCodeParameter, descriptionParameter, accountTypeParameter, tariffCodeIdParameter, userParameter);
        }
    
        public virtual ObjectResult<usp_TariffCodeAlias_GetByUtilityCode_Result> usp_TariffCodeAlias_GetByUtilityCode(string utilityCode)
        {
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TariffCodeAlias_GetByUtilityCode_Result>("usp_TariffCodeAlias_GetByUtilityCode", utilityCodeParameter);
        }
    
        public virtual int usp_TariffCodeAlias_INSERT(Nullable<System.Guid> id, string utilityCode, Nullable<int> tariffCodeId, string tariffCodeCodeAlias, string user)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var tariffCodeIdParameter = tariffCodeId.HasValue ?
                new ObjectParameter("TariffCodeId", tariffCodeId) :
                new ObjectParameter("TariffCodeId", typeof(int));
    
            var tariffCodeCodeAliasParameter = tariffCodeCodeAlias != null ?
                new ObjectParameter("TariffCodeCodeAlias", tariffCodeCodeAlias) :
                new ObjectParameter("TariffCodeCodeAlias", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TariffCodeAlias_INSERT", idParameter, utilityCodeParameter, tariffCodeIdParameter, tariffCodeCodeAliasParameter, userParameter);
        }
    
        public virtual ObjectResult<string> usp_UtilityCompany_DownloadData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_UtilityCompany_DownloadData");
        }
    
        public virtual ObjectResult<usp_UtilityCompanyToMarket_SELECT_Result> usp_UtilityCompanyToMarket_SELECT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UtilityCompanyToMarket_SELECT_Result>("usp_UtilityCompanyToMarket_SELECT");
        }
    
        public virtual ObjectResult<usp_LibertyPowerBillingType_SELECT_ByUtilityCompanyIds_Result> usp_LibertyPowerBillingType_SELECT_ByUtilityCompanyIds(string utilityCompanyId)
        {
            var utilityCompanyIdParameter = utilityCompanyId != null ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LibertyPowerBillingType_SELECT_ByUtilityCompanyIds_Result>("usp_LibertyPowerBillingType_SELECT_ByUtilityCompanyIds", utilityCompanyIdParameter);
        }
    
        public virtual ObjectResult<usp_PurchaseOfReceivables_SELECT_ByUtilityCompanyIdLoadProfileIdRateClassIdTariffCodeId_Result> usp_PurchaseOfReceivables_SELECT_ByUtilityCompanyIdLoadProfileIdRateClassIdTariffCodeId(Nullable<System.Guid> utilityCompanyId, Nullable<System.Guid> loadProfileId, Nullable<System.Guid> rateClassId, Nullable<System.Guid> tariffCodeId)
        {
            var utilityCompanyIdParameter = utilityCompanyId.HasValue ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(System.Guid));
    
            var loadProfileIdParameter = loadProfileId.HasValue ?
                new ObjectParameter("LoadProfileId", loadProfileId) :
                new ObjectParameter("LoadProfileId", typeof(System.Guid));
    
            var rateClassIdParameter = rateClassId.HasValue ?
                new ObjectParameter("RateClassId", rateClassId) :
                new ObjectParameter("RateClassId", typeof(System.Guid));
    
            var tariffCodeIdParameter = tariffCodeId.HasValue ?
                new ObjectParameter("TariffCodeId", tariffCodeId) :
                new ObjectParameter("TariffCodeId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PurchaseOfReceivables_SELECT_ByUtilityCompanyIdLoadProfileIdRateClassIdTariffCodeId_Result>("usp_PurchaseOfReceivables_SELECT_ByUtilityCompanyIdLoadProfileIdRateClassIdTariffCodeId", utilityCompanyIdParameter, loadProfileIdParameter, rateClassIdParameter, tariffCodeIdParameter);
        }
    
        public virtual ObjectResult<usp_PurchaseOfReceivables_SELECT_ByUtilityCodeLoadProfileCodeRateClassCodeTariffCodeCode_Result> usp_PurchaseOfReceivables_SELECT_ByUtilityCodeLoadProfileCodeRateClassCodeTariffCodeCode(string utilityCode, string loadProfileCode, string rateClassCode, string tariffCodeCode)
        {
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var loadProfileCodeParameter = loadProfileCode != null ?
                new ObjectParameter("LoadProfileCode", loadProfileCode) :
                new ObjectParameter("LoadProfileCode", typeof(string));
    
            var rateClassCodeParameter = rateClassCode != null ?
                new ObjectParameter("RateClassCode", rateClassCode) :
                new ObjectParameter("RateClassCode", typeof(string));
    
            var tariffCodeCodeParameter = tariffCodeCode != null ?
                new ObjectParameter("TariffCodeCode", tariffCodeCode) :
                new ObjectParameter("TariffCodeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PurchaseOfReceivables_SELECT_ByUtilityCodeLoadProfileCodeRateClassCodeTariffCodeCode_Result>("usp_PurchaseOfReceivables_SELECT_ByUtilityCodeLoadProfileCodeRateClassCodeTariffCodeCode", utilityCodeParameter, loadProfileCodeParameter, rateClassCodeParameter, tariffCodeCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_PurchaseOfReceivables_IsDuplicate(string utilityCode, string porDriverName, string loadProfileCode, string rateClassCode, string tariffCodeCode, Nullable<bool> isPorOffered, Nullable<bool> isPorParticipated, Nullable<bool> isPorAssurance, string porRecourse, Nullable<decimal> porDiscountRate, Nullable<decimal> porFlatFee, Nullable<System.DateTime> porDiscountEffectivedDate, Nullable<System.DateTime> porDiscountExpirationDate, Nullable<bool> inactive)
        {
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var porDriverNameParameter = porDriverName != null ?
                new ObjectParameter("PorDriverName", porDriverName) :
                new ObjectParameter("PorDriverName", typeof(string));
    
            var loadProfileCodeParameter = loadProfileCode != null ?
                new ObjectParameter("LoadProfileCode", loadProfileCode) :
                new ObjectParameter("LoadProfileCode", typeof(string));
    
            var rateClassCodeParameter = rateClassCode != null ?
                new ObjectParameter("RateClassCode", rateClassCode) :
                new ObjectParameter("RateClassCode", typeof(string));
    
            var tariffCodeCodeParameter = tariffCodeCode != null ?
                new ObjectParameter("TariffCodeCode", tariffCodeCode) :
                new ObjectParameter("TariffCodeCode", typeof(string));
    
            var isPorOfferedParameter = isPorOffered.HasValue ?
                new ObjectParameter("IsPorOffered", isPorOffered) :
                new ObjectParameter("IsPorOffered", typeof(bool));
    
            var isPorParticipatedParameter = isPorParticipated.HasValue ?
                new ObjectParameter("IsPorParticipated", isPorParticipated) :
                new ObjectParameter("IsPorParticipated", typeof(bool));
    
            var isPorAssuranceParameter = isPorAssurance.HasValue ?
                new ObjectParameter("IsPorAssurance", isPorAssurance) :
                new ObjectParameter("IsPorAssurance", typeof(bool));
    
            var porRecourseParameter = porRecourse != null ?
                new ObjectParameter("PorRecourse", porRecourse) :
                new ObjectParameter("PorRecourse", typeof(string));
    
            var porDiscountRateParameter = porDiscountRate.HasValue ?
                new ObjectParameter("PorDiscountRate", porDiscountRate) :
                new ObjectParameter("PorDiscountRate", typeof(decimal));
    
            var porFlatFeeParameter = porFlatFee.HasValue ?
                new ObjectParameter("PorFlatFee", porFlatFee) :
                new ObjectParameter("PorFlatFee", typeof(decimal));
    
            var porDiscountEffectivedDateParameter = porDiscountEffectivedDate.HasValue ?
                new ObjectParameter("PorDiscountEffectivedDate", porDiscountEffectivedDate) :
                new ObjectParameter("PorDiscountEffectivedDate", typeof(System.DateTime));
    
            var porDiscountExpirationDateParameter = porDiscountExpirationDate.HasValue ?
                new ObjectParameter("PorDiscountExpirationDate", porDiscountExpirationDate) :
                new ObjectParameter("PorDiscountExpirationDate", typeof(System.DateTime));
    
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_PurchaseOfReceivables_IsDuplicate", utilityCodeParameter, porDriverNameParameter, loadProfileCodeParameter, rateClassCodeParameter, tariffCodeCodeParameter, isPorOfferedParameter, isPorParticipatedParameter, isPorAssuranceParameter, porRecourseParameter, porDiscountRateParameter, porFlatFeeParameter, porDiscountEffectivedDateParameter, porDiscountExpirationDateParameter, inactiveParameter);
        }
    
        public virtual int usp_PurchaseOfReceivalbes_INSERT(string id, string utilityCompanyId, string porDriverId, string rateClassId, string loadProfileId, string tariffCodeId, Nullable<bool> isPorOffered, Nullable<bool> isPorParticipated, string porRecourseId, Nullable<bool> isPorAssurance, Nullable<decimal> porDiscountRate, Nullable<decimal> porFlatFee, Nullable<System.DateTime> porDiscountEffectiveDate, Nullable<System.DateTime> porDiscountExpirationDate, Nullable<bool> inactive, string createdBy, Nullable<System.DateTime> createdDate, string lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            var utilityCompanyIdParameter = utilityCompanyId != null ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(string));
    
            var porDriverIdParameter = porDriverId != null ?
                new ObjectParameter("PorDriverId", porDriverId) :
                new ObjectParameter("PorDriverId", typeof(string));
    
            var rateClassIdParameter = rateClassId != null ?
                new ObjectParameter("RateClassId", rateClassId) :
                new ObjectParameter("RateClassId", typeof(string));
    
            var loadProfileIdParameter = loadProfileId != null ?
                new ObjectParameter("LoadProfileId", loadProfileId) :
                new ObjectParameter("LoadProfileId", typeof(string));
    
            var tariffCodeIdParameter = tariffCodeId != null ?
                new ObjectParameter("TariffCodeId", tariffCodeId) :
                new ObjectParameter("TariffCodeId", typeof(string));
    
            var isPorOfferedParameter = isPorOffered.HasValue ?
                new ObjectParameter("IsPorOffered", isPorOffered) :
                new ObjectParameter("IsPorOffered", typeof(bool));
    
            var isPorParticipatedParameter = isPorParticipated.HasValue ?
                new ObjectParameter("IsPorParticipated", isPorParticipated) :
                new ObjectParameter("IsPorParticipated", typeof(bool));
    
            var porRecourseIdParameter = porRecourseId != null ?
                new ObjectParameter("PorRecourseId", porRecourseId) :
                new ObjectParameter("PorRecourseId", typeof(string));
    
            var isPorAssuranceParameter = isPorAssurance.HasValue ?
                new ObjectParameter("IsPorAssurance", isPorAssurance) :
                new ObjectParameter("IsPorAssurance", typeof(bool));
    
            var porDiscountRateParameter = porDiscountRate.HasValue ?
                new ObjectParameter("PorDiscountRate", porDiscountRate) :
                new ObjectParameter("PorDiscountRate", typeof(decimal));
    
            var porFlatFeeParameter = porFlatFee.HasValue ?
                new ObjectParameter("PorFlatFee", porFlatFee) :
                new ObjectParameter("PorFlatFee", typeof(decimal));
    
            var porDiscountEffectiveDateParameter = porDiscountEffectiveDate.HasValue ?
                new ObjectParameter("PorDiscountEffectiveDate", porDiscountEffectiveDate) :
                new ObjectParameter("PorDiscountEffectiveDate", typeof(System.DateTime));
    
            var porDiscountExpirationDateParameter = porDiscountExpirationDate.HasValue ?
                new ObjectParameter("PorDiscountExpirationDate", porDiscountExpirationDate) :
                new ObjectParameter("PorDiscountExpirationDate", typeof(System.DateTime));
    
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var lastModifiedByParameter = lastModifiedBy != null ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(string));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PurchaseOfReceivalbes_INSERT", idParameter, utilityCompanyIdParameter, porDriverIdParameter, rateClassIdParameter, loadProfileIdParameter, tariffCodeIdParameter, isPorOfferedParameter, isPorParticipatedParameter, porRecourseIdParameter, isPorAssuranceParameter, porDiscountRateParameter, porFlatFeeParameter, porDiscountEffectiveDateParameter, porDiscountExpirationDateParameter, inactiveParameter, createdByParameter, createdDateParameter, lastModifiedByParameter, lastModifiedDateParameter);
        }
    
        public virtual int usp_PurchaseOfReceivalbes_UPDATE(string id, string utilityCompanyId, string porDriverId, string rateClassId, string loadProfileId, string tariffCodeId, Nullable<bool> isPorOffered, Nullable<bool> isPorParticipated, string porRecourseId, Nullable<bool> isPorAssurance, Nullable<decimal> porDiscountRate, Nullable<decimal> porFlatFee, Nullable<System.DateTime> porDiscountEffectiveDate, Nullable<System.DateTime> porDiscountExpirationDate, Nullable<bool> inactive, string createdBy, Nullable<System.DateTime> createdDate, string lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            var utilityCompanyIdParameter = utilityCompanyId != null ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(string));
    
            var porDriverIdParameter = porDriverId != null ?
                new ObjectParameter("PorDriverId", porDriverId) :
                new ObjectParameter("PorDriverId", typeof(string));
    
            var rateClassIdParameter = rateClassId != null ?
                new ObjectParameter("RateClassId", rateClassId) :
                new ObjectParameter("RateClassId", typeof(string));
    
            var loadProfileIdParameter = loadProfileId != null ?
                new ObjectParameter("LoadProfileId", loadProfileId) :
                new ObjectParameter("LoadProfileId", typeof(string));
    
            var tariffCodeIdParameter = tariffCodeId != null ?
                new ObjectParameter("TariffCodeId", tariffCodeId) :
                new ObjectParameter("TariffCodeId", typeof(string));
    
            var isPorOfferedParameter = isPorOffered.HasValue ?
                new ObjectParameter("IsPorOffered", isPorOffered) :
                new ObjectParameter("IsPorOffered", typeof(bool));
    
            var isPorParticipatedParameter = isPorParticipated.HasValue ?
                new ObjectParameter("IsPorParticipated", isPorParticipated) :
                new ObjectParameter("IsPorParticipated", typeof(bool));
    
            var porRecourseIdParameter = porRecourseId != null ?
                new ObjectParameter("PorRecourseId", porRecourseId) :
                new ObjectParameter("PorRecourseId", typeof(string));
    
            var isPorAssuranceParameter = isPorAssurance.HasValue ?
                new ObjectParameter("IsPorAssurance", isPorAssurance) :
                new ObjectParameter("IsPorAssurance", typeof(bool));
    
            var porDiscountRateParameter = porDiscountRate.HasValue ?
                new ObjectParameter("PorDiscountRate", porDiscountRate) :
                new ObjectParameter("PorDiscountRate", typeof(decimal));
    
            var porFlatFeeParameter = porFlatFee.HasValue ?
                new ObjectParameter("PorFlatFee", porFlatFee) :
                new ObjectParameter("PorFlatFee", typeof(decimal));
    
            var porDiscountEffectiveDateParameter = porDiscountEffectiveDate.HasValue ?
                new ObjectParameter("PorDiscountEffectiveDate", porDiscountEffectiveDate) :
                new ObjectParameter("PorDiscountEffectiveDate", typeof(System.DateTime));
    
            var porDiscountExpirationDateParameter = porDiscountExpirationDate.HasValue ?
                new ObjectParameter("PorDiscountExpirationDate", porDiscountExpirationDate) :
                new ObjectParameter("PorDiscountExpirationDate", typeof(System.DateTime));
    
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var lastModifiedByParameter = lastModifiedBy != null ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(string));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PurchaseOfReceivalbes_UPDATE", idParameter, utilityCompanyIdParameter, porDriverIdParameter, rateClassIdParameter, loadProfileIdParameter, tariffCodeIdParameter, isPorOfferedParameter, isPorParticipatedParameter, porRecourseIdParameter, isPorAssuranceParameter, porDiscountRateParameter, porFlatFeeParameter, porDiscountEffectiveDateParameter, porDiscountExpirationDateParameter, inactiveParameter, createdByParameter, createdDateParameter, lastModifiedByParameter, lastModifiedDateParameter);
        }
    
        public virtual int usp_PurchaseOfReceivables_INSERT(string id, string utilityCompanyId, string porDriverId, string rateClassId, string loadProfileId, string tariffCodeId, Nullable<bool> isPorOffered, Nullable<bool> isPorParticipated, string porRecourseId, Nullable<bool> isPorAssurance, Nullable<decimal> porDiscountRate, Nullable<decimal> porFlatFee, Nullable<System.DateTime> porDiscountEffectiveDate, Nullable<System.DateTime> porDiscountExpirationDate, Nullable<bool> inactive, string createdBy, Nullable<System.DateTime> createdDate, string lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            var utilityCompanyIdParameter = utilityCompanyId != null ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(string));
    
            var porDriverIdParameter = porDriverId != null ?
                new ObjectParameter("PorDriverId", porDriverId) :
                new ObjectParameter("PorDriverId", typeof(string));
    
            var rateClassIdParameter = rateClassId != null ?
                new ObjectParameter("RateClassId", rateClassId) :
                new ObjectParameter("RateClassId", typeof(string));
    
            var loadProfileIdParameter = loadProfileId != null ?
                new ObjectParameter("LoadProfileId", loadProfileId) :
                new ObjectParameter("LoadProfileId", typeof(string));
    
            var tariffCodeIdParameter = tariffCodeId != null ?
                new ObjectParameter("TariffCodeId", tariffCodeId) :
                new ObjectParameter("TariffCodeId", typeof(string));
    
            var isPorOfferedParameter = isPorOffered.HasValue ?
                new ObjectParameter("IsPorOffered", isPorOffered) :
                new ObjectParameter("IsPorOffered", typeof(bool));
    
            var isPorParticipatedParameter = isPorParticipated.HasValue ?
                new ObjectParameter("IsPorParticipated", isPorParticipated) :
                new ObjectParameter("IsPorParticipated", typeof(bool));
    
            var porRecourseIdParameter = porRecourseId != null ?
                new ObjectParameter("PorRecourseId", porRecourseId) :
                new ObjectParameter("PorRecourseId", typeof(string));
    
            var isPorAssuranceParameter = isPorAssurance.HasValue ?
                new ObjectParameter("IsPorAssurance", isPorAssurance) :
                new ObjectParameter("IsPorAssurance", typeof(bool));
    
            var porDiscountRateParameter = porDiscountRate.HasValue ?
                new ObjectParameter("PorDiscountRate", porDiscountRate) :
                new ObjectParameter("PorDiscountRate", typeof(decimal));
    
            var porFlatFeeParameter = porFlatFee.HasValue ?
                new ObjectParameter("PorFlatFee", porFlatFee) :
                new ObjectParameter("PorFlatFee", typeof(decimal));
    
            var porDiscountEffectiveDateParameter = porDiscountEffectiveDate.HasValue ?
                new ObjectParameter("PorDiscountEffectiveDate", porDiscountEffectiveDate) :
                new ObjectParameter("PorDiscountEffectiveDate", typeof(System.DateTime));
    
            var porDiscountExpirationDateParameter = porDiscountExpirationDate.HasValue ?
                new ObjectParameter("PorDiscountExpirationDate", porDiscountExpirationDate) :
                new ObjectParameter("PorDiscountExpirationDate", typeof(System.DateTime));
    
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var lastModifiedByParameter = lastModifiedBy != null ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(string));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PurchaseOfReceivables_INSERT", idParameter, utilityCompanyIdParameter, porDriverIdParameter, rateClassIdParameter, loadProfileIdParameter, tariffCodeIdParameter, isPorOfferedParameter, isPorParticipatedParameter, porRecourseIdParameter, isPorAssuranceParameter, porDiscountRateParameter, porFlatFeeParameter, porDiscountEffectiveDateParameter, porDiscountExpirationDateParameter, inactiveParameter, createdByParameter, createdDateParameter, lastModifiedByParameter, lastModifiedDateParameter);
        }
    
        public virtual int usp_PurchaseOfReceivables_UPDATE(string utilityCompanyId, string porDriverId, string rateClassId, string loadProfileId, string tariffCodeId, Nullable<bool> isPorOffered, Nullable<bool> isPorParticipated, string porRecourseId, Nullable<bool> isPorAssurance, Nullable<decimal> porDiscountRate, Nullable<decimal> porFlatFee, Nullable<System.DateTime> porDiscountEffectiveDate, Nullable<System.DateTime> porDiscountExpirationDate, Nullable<bool> inactive, string createdBy, Nullable<System.DateTime> createdDate, string lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
        {
            var utilityCompanyIdParameter = utilityCompanyId != null ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(string));
    
            var porDriverIdParameter = porDriverId != null ?
                new ObjectParameter("PorDriverId", porDriverId) :
                new ObjectParameter("PorDriverId", typeof(string));
    
            var rateClassIdParameter = rateClassId != null ?
                new ObjectParameter("RateClassId", rateClassId) :
                new ObjectParameter("RateClassId", typeof(string));
    
            var loadProfileIdParameter = loadProfileId != null ?
                new ObjectParameter("LoadProfileId", loadProfileId) :
                new ObjectParameter("LoadProfileId", typeof(string));
    
            var tariffCodeIdParameter = tariffCodeId != null ?
                new ObjectParameter("TariffCodeId", tariffCodeId) :
                new ObjectParameter("TariffCodeId", typeof(string));
    
            var isPorOfferedParameter = isPorOffered.HasValue ?
                new ObjectParameter("IsPorOffered", isPorOffered) :
                new ObjectParameter("IsPorOffered", typeof(bool));
    
            var isPorParticipatedParameter = isPorParticipated.HasValue ?
                new ObjectParameter("IsPorParticipated", isPorParticipated) :
                new ObjectParameter("IsPorParticipated", typeof(bool));
    
            var porRecourseIdParameter = porRecourseId != null ?
                new ObjectParameter("PorRecourseId", porRecourseId) :
                new ObjectParameter("PorRecourseId", typeof(string));
    
            var isPorAssuranceParameter = isPorAssurance.HasValue ?
                new ObjectParameter("IsPorAssurance", isPorAssurance) :
                new ObjectParameter("IsPorAssurance", typeof(bool));
    
            var porDiscountRateParameter = porDiscountRate.HasValue ?
                new ObjectParameter("PorDiscountRate", porDiscountRate) :
                new ObjectParameter("PorDiscountRate", typeof(decimal));
    
            var porFlatFeeParameter = porFlatFee.HasValue ?
                new ObjectParameter("PorFlatFee", porFlatFee) :
                new ObjectParameter("PorFlatFee", typeof(decimal));
    
            var porDiscountEffectiveDateParameter = porDiscountEffectiveDate.HasValue ?
                new ObjectParameter("PorDiscountEffectiveDate", porDiscountEffectiveDate) :
                new ObjectParameter("PorDiscountEffectiveDate", typeof(System.DateTime));
    
            var porDiscountExpirationDateParameter = porDiscountExpirationDate.HasValue ?
                new ObjectParameter("PorDiscountExpirationDate", porDiscountExpirationDate) :
                new ObjectParameter("PorDiscountExpirationDate", typeof(System.DateTime));
    
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var lastModifiedByParameter = lastModifiedBy != null ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(string));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PurchaseOfReceivables_UPDATE", utilityCompanyIdParameter, porDriverIdParameter, rateClassIdParameter, loadProfileIdParameter, tariffCodeIdParameter, isPorOfferedParameter, isPorParticipatedParameter, porRecourseIdParameter, isPorAssuranceParameter, porDiscountRateParameter, porFlatFeeParameter, porDiscountEffectiveDateParameter, porDiscountExpirationDateParameter, inactiveParameter, createdByParameter, createdDateParameter, lastModifiedByParameter, lastModifiedDateParameter);
        }
    
        public virtual int usp_PurchaseOfReceivables_INSERT_ByLookupParameters(string id, string utilityCode, string porDriver, string rateClassCode, string loadProfileCode, string tariffCodeCode, Nullable<bool> isPorOffered, Nullable<bool> isPorParticipated, string porRecourse, Nullable<bool> isPorAssurance, Nullable<decimal> porDiscountRate, Nullable<decimal> porFlatFee, Nullable<System.DateTime> porDiscountEffectiveDate, Nullable<System.DateTime> porDiscountExpirationDate, Nullable<bool> inactive, string createdBy, Nullable<System.DateTime> createdDate, string lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var porDriverParameter = porDriver != null ?
                new ObjectParameter("PorDriver", porDriver) :
                new ObjectParameter("PorDriver", typeof(string));
    
            var rateClassCodeParameter = rateClassCode != null ?
                new ObjectParameter("RateClassCode", rateClassCode) :
                new ObjectParameter("RateClassCode", typeof(string));
    
            var loadProfileCodeParameter = loadProfileCode != null ?
                new ObjectParameter("LoadProfileCode", loadProfileCode) :
                new ObjectParameter("LoadProfileCode", typeof(string));
    
            var tariffCodeCodeParameter = tariffCodeCode != null ?
                new ObjectParameter("TariffCodeCode", tariffCodeCode) :
                new ObjectParameter("TariffCodeCode", typeof(string));
    
            var isPorOfferedParameter = isPorOffered.HasValue ?
                new ObjectParameter("IsPorOffered", isPorOffered) :
                new ObjectParameter("IsPorOffered", typeof(bool));
    
            var isPorParticipatedParameter = isPorParticipated.HasValue ?
                new ObjectParameter("IsPorParticipated", isPorParticipated) :
                new ObjectParameter("IsPorParticipated", typeof(bool));
    
            var porRecourseParameter = porRecourse != null ?
                new ObjectParameter("PorRecourse", porRecourse) :
                new ObjectParameter("PorRecourse", typeof(string));
    
            var isPorAssuranceParameter = isPorAssurance.HasValue ?
                new ObjectParameter("IsPorAssurance", isPorAssurance) :
                new ObjectParameter("IsPorAssurance", typeof(bool));
    
            var porDiscountRateParameter = porDiscountRate.HasValue ?
                new ObjectParameter("PorDiscountRate", porDiscountRate) :
                new ObjectParameter("PorDiscountRate", typeof(decimal));
    
            var porFlatFeeParameter = porFlatFee.HasValue ?
                new ObjectParameter("PorFlatFee", porFlatFee) :
                new ObjectParameter("PorFlatFee", typeof(decimal));
    
            var porDiscountEffectiveDateParameter = porDiscountEffectiveDate.HasValue ?
                new ObjectParameter("PorDiscountEffectiveDate", porDiscountEffectiveDate) :
                new ObjectParameter("PorDiscountEffectiveDate", typeof(System.DateTime));
    
            var porDiscountExpirationDateParameter = porDiscountExpirationDate.HasValue ?
                new ObjectParameter("PorDiscountExpirationDate", porDiscountExpirationDate) :
                new ObjectParameter("PorDiscountExpirationDate", typeof(System.DateTime));
    
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var lastModifiedByParameter = lastModifiedBy != null ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(string));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PurchaseOfReceivables_INSERT_ByLookupParameters", idParameter, utilityCodeParameter, porDriverParameter, rateClassCodeParameter, loadProfileCodeParameter, tariffCodeCodeParameter, isPorOfferedParameter, isPorParticipatedParameter, porRecourseParameter, isPorAssuranceParameter, porDiscountRateParameter, porFlatFeeParameter, porDiscountEffectiveDateParameter, porDiscountExpirationDateParameter, inactiveParameter, createdByParameter, createdDateParameter, lastModifiedByParameter, lastModifiedDateParameter);
        }
    
        public virtual int usp_PurchaseOfReceivables_UPDATE_ByLookupParameters(string utilityCode, string porDriver, string rateClassCode, string loadProfileCode, string tariffCodeCode, Nullable<bool> isPorOffered, Nullable<bool> isPorParticipated, string porRecourseId, Nullable<bool> isPorAssurance, Nullable<decimal> porDiscountRate, Nullable<decimal> porFlatFee, Nullable<System.DateTime> porDiscountEffectiveDate, Nullable<System.DateTime> porDiscountExpirationDate, Nullable<bool> inactive, string createdBy, Nullable<System.DateTime> createdDate, string lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
        {
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var porDriverParameter = porDriver != null ?
                new ObjectParameter("PorDriver", porDriver) :
                new ObjectParameter("PorDriver", typeof(string));
    
            var rateClassCodeParameter = rateClassCode != null ?
                new ObjectParameter("RateClassCode", rateClassCode) :
                new ObjectParameter("RateClassCode", typeof(string));
    
            var loadProfileCodeParameter = loadProfileCode != null ?
                new ObjectParameter("LoadProfileCode", loadProfileCode) :
                new ObjectParameter("LoadProfileCode", typeof(string));
    
            var tariffCodeCodeParameter = tariffCodeCode != null ?
                new ObjectParameter("TariffCodeCode", tariffCodeCode) :
                new ObjectParameter("TariffCodeCode", typeof(string));
    
            var isPorOfferedParameter = isPorOffered.HasValue ?
                new ObjectParameter("IsPorOffered", isPorOffered) :
                new ObjectParameter("IsPorOffered", typeof(bool));
    
            var isPorParticipatedParameter = isPorParticipated.HasValue ?
                new ObjectParameter("IsPorParticipated", isPorParticipated) :
                new ObjectParameter("IsPorParticipated", typeof(bool));
    
            var porRecourseIdParameter = porRecourseId != null ?
                new ObjectParameter("PorRecourseId", porRecourseId) :
                new ObjectParameter("PorRecourseId", typeof(string));
    
            var isPorAssuranceParameter = isPorAssurance.HasValue ?
                new ObjectParameter("IsPorAssurance", isPorAssurance) :
                new ObjectParameter("IsPorAssurance", typeof(bool));
    
            var porDiscountRateParameter = porDiscountRate.HasValue ?
                new ObjectParameter("PorDiscountRate", porDiscountRate) :
                new ObjectParameter("PorDiscountRate", typeof(decimal));
    
            var porFlatFeeParameter = porFlatFee.HasValue ?
                new ObjectParameter("PorFlatFee", porFlatFee) :
                new ObjectParameter("PorFlatFee", typeof(decimal));
    
            var porDiscountEffectiveDateParameter = porDiscountEffectiveDate.HasValue ?
                new ObjectParameter("PorDiscountEffectiveDate", porDiscountEffectiveDate) :
                new ObjectParameter("PorDiscountEffectiveDate", typeof(System.DateTime));
    
            var porDiscountExpirationDateParameter = porDiscountExpirationDate.HasValue ?
                new ObjectParameter("PorDiscountExpirationDate", porDiscountExpirationDate) :
                new ObjectParameter("PorDiscountExpirationDate", typeof(System.DateTime));
    
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var lastModifiedByParameter = lastModifiedBy != null ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(string));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PurchaseOfReceivables_UPDATE_ByLookupParameters", utilityCodeParameter, porDriverParameter, rateClassCodeParameter, loadProfileCodeParameter, tariffCodeCodeParameter, isPorOfferedParameter, isPorParticipatedParameter, porRecourseIdParameter, isPorAssuranceParameter, porDiscountRateParameter, porFlatFeeParameter, porDiscountEffectiveDateParameter, porDiscountExpirationDateParameter, inactiveParameter, createdByParameter, createdDateParameter, lastModifiedByParameter, lastModifiedDateParameter);
        }
    
        public virtual ObjectResult<usp_PurchaseOfReceivables_SELECT_ByUtilityCodeLoadProfileCodeRateClassCodeTariffCode_Result> usp_PurchaseOfReceivables_SELECT_ByUtilityCodeLoadProfileCodeRateClassCodeTariffCode(string utilityCode, string loadProfileCode, string rateClassCode, string tariffCodeCode)
        {
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var loadProfileCodeParameter = loadProfileCode != null ?
                new ObjectParameter("LoadProfileCode", loadProfileCode) :
                new ObjectParameter("LoadProfileCode", typeof(string));
    
            var rateClassCodeParameter = rateClassCode != null ?
                new ObjectParameter("RateClassCode", rateClassCode) :
                new ObjectParameter("RateClassCode", typeof(string));
    
            var tariffCodeCodeParameter = tariffCodeCode != null ?
                new ObjectParameter("TariffCodeCode", tariffCodeCode) :
                new ObjectParameter("TariffCodeCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PurchaseOfReceivables_SELECT_ByUtilityCodeLoadProfileCodeRateClassCodeTariffCode_Result>("usp_PurchaseOfReceivables_SELECT_ByUtilityCodeLoadProfileCodeRateClassCodeTariffCode", utilityCodeParameter, loadProfileCodeParameter, rateClassCodeParameter, tariffCodeCodeParameter);
        }
    
        public virtual ObjectResult<usp_LibertyPowerBillingType_SELECT_By_UtilityCompanyId_Result> usp_LibertyPowerBillingType_SELECT_By_UtilityCompanyId(Nullable<System.Guid> utilityCompanyId)
        {
            var utilityCompanyIdParameter = utilityCompanyId.HasValue ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LibertyPowerBillingType_SELECT_By_UtilityCompanyId_Result>("usp_LibertyPowerBillingType_SELECT_By_UtilityCompanyId", utilityCompanyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_LpBillingType_Get_BillingTypeExists_UtilityOfferedBillingTypeExists(Nullable<System.Guid> utilityCompanyId, Nullable<System.Guid> porDriverId, Nullable<System.Guid> loadProfileId, Nullable<System.Guid> rateClassId, Nullable<System.Guid> tariffCodeId, Nullable<System.Guid> utilityOfferedBillingTypeId)
        {
            var utilityCompanyIdParameter = utilityCompanyId.HasValue ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(System.Guid));
    
            var porDriverIdParameter = porDriverId.HasValue ?
                new ObjectParameter("PorDriverId", porDriverId) :
                new ObjectParameter("PorDriverId", typeof(System.Guid));
    
            var loadProfileIdParameter = loadProfileId.HasValue ?
                new ObjectParameter("LoadProfileId", loadProfileId) :
                new ObjectParameter("LoadProfileId", typeof(System.Guid));
    
            var rateClassIdParameter = rateClassId.HasValue ?
                new ObjectParameter("RateClassId", rateClassId) :
                new ObjectParameter("RateClassId", typeof(System.Guid));
    
            var tariffCodeIdParameter = tariffCodeId.HasValue ?
                new ObjectParameter("TariffCodeId", tariffCodeId) :
                new ObjectParameter("TariffCodeId", typeof(System.Guid));
    
            var utilityOfferedBillingTypeIdParameter = utilityOfferedBillingTypeId.HasValue ?
                new ObjectParameter("UtilityOfferedBillingTypeId", utilityOfferedBillingTypeId) :
                new ObjectParameter("UtilityOfferedBillingTypeId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_LpBillingType_Get_BillingTypeExists_UtilityOfferedBillingTypeExists", utilityCompanyIdParameter, porDriverIdParameter, loadProfileIdParameter, rateClassIdParameter, tariffCodeIdParameter, utilityOfferedBillingTypeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_LpBillingType_Get_BillingTypeExists_UtilityOfferedBillingTypeExist(Nullable<System.Guid> utilityCompanyId, Nullable<System.Guid> porDriverId, Nullable<System.Guid> loadProfileId, Nullable<System.Guid> rateClassId, Nullable<System.Guid> tariffCodeId, Nullable<System.Guid> utilityOfferedBillingTypeId)
        {
            var utilityCompanyIdParameter = utilityCompanyId.HasValue ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(System.Guid));
    
            var porDriverIdParameter = porDriverId.HasValue ?
                new ObjectParameter("PorDriverId", porDriverId) :
                new ObjectParameter("PorDriverId", typeof(System.Guid));
    
            var loadProfileIdParameter = loadProfileId.HasValue ?
                new ObjectParameter("LoadProfileId", loadProfileId) :
                new ObjectParameter("LoadProfileId", typeof(System.Guid));
    
            var rateClassIdParameter = rateClassId.HasValue ?
                new ObjectParameter("RateClassId", rateClassId) :
                new ObjectParameter("RateClassId", typeof(System.Guid));
    
            var tariffCodeIdParameter = tariffCodeId.HasValue ?
                new ObjectParameter("TariffCodeId", tariffCodeId) :
                new ObjectParameter("TariffCodeId", typeof(System.Guid));
    
            var utilityOfferedBillingTypeIdParameter = utilityOfferedBillingTypeId.HasValue ?
                new ObjectParameter("UtilityOfferedBillingTypeId", utilityOfferedBillingTypeId) :
                new ObjectParameter("UtilityOfferedBillingTypeId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_LpBillingType_Get_BillingTypeExists_UtilityOfferedBillingTypeExist", utilityCompanyIdParameter, porDriverIdParameter, loadProfileIdParameter, rateClassIdParameter, tariffCodeIdParameter, utilityOfferedBillingTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_LpBillingType_Get_BillingTypeExists_UtilityOfferedBillingType_Exists_Result> usp_LpBillingType_Get_BillingTypeExists_UtilityOfferedBillingType_Exists(Nullable<System.Guid> utilityCompanyId, Nullable<System.Guid> porDriverId, Nullable<System.Guid> loadProfileId, Nullable<System.Guid> rateClassId, Nullable<System.Guid> tariffCodeId, Nullable<System.Guid> utilityOfferedBillingTypeId, Nullable<System.Guid> lpApprovedBillingTypeId)
        {
            var utilityCompanyIdParameter = utilityCompanyId.HasValue ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(System.Guid));
    
            var porDriverIdParameter = porDriverId.HasValue ?
                new ObjectParameter("PorDriverId", porDriverId) :
                new ObjectParameter("PorDriverId", typeof(System.Guid));
    
            var loadProfileIdParameter = loadProfileId.HasValue ?
                new ObjectParameter("LoadProfileId", loadProfileId) :
                new ObjectParameter("LoadProfileId", typeof(System.Guid));
    
            var rateClassIdParameter = rateClassId.HasValue ?
                new ObjectParameter("RateClassId", rateClassId) :
                new ObjectParameter("RateClassId", typeof(System.Guid));
    
            var tariffCodeIdParameter = tariffCodeId.HasValue ?
                new ObjectParameter("TariffCodeId", tariffCodeId) :
                new ObjectParameter("TariffCodeId", typeof(System.Guid));
    
            var utilityOfferedBillingTypeIdParameter = utilityOfferedBillingTypeId.HasValue ?
                new ObjectParameter("UtilityOfferedBillingTypeId", utilityOfferedBillingTypeId) :
                new ObjectParameter("UtilityOfferedBillingTypeId", typeof(System.Guid));
    
            var lpApprovedBillingTypeIdParameter = lpApprovedBillingTypeId.HasValue ?
                new ObjectParameter("LpApprovedBillingTypeId", lpApprovedBillingTypeId) :
                new ObjectParameter("LpApprovedBillingTypeId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LpBillingType_Get_BillingTypeExists_UtilityOfferedBillingType_Exists_Result>("usp_LpBillingType_Get_BillingTypeExists_UtilityOfferedBillingType_Exists", utilityCompanyIdParameter, porDriverIdParameter, loadProfileIdParameter, rateClassIdParameter, tariffCodeIdParameter, utilityOfferedBillingTypeIdParameter, lpApprovedBillingTypeIdParameter);
        }
    
        public virtual ObjectResult<usp_LibertyPowerBillingType_SELECT_By_UtilityCode_Result> usp_LibertyPowerBillingType_SELECT_By_UtilityCode(string utilityCode)
        {
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LibertyPowerBillingType_SELECT_By_UtilityCode_Result>("usp_LibertyPowerBillingType_SELECT_By_UtilityCode", utilityCodeParameter);
        }
    
        public virtual ObjectResult<usp_MeterReadCalendar_GetAll_Result> usp_MeterReadCalendar_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MeterReadCalendar_GetAll_Result>("usp_MeterReadCalendar_GetAll");
        }
    
        public virtual ObjectResult<usp_MeterReadCalendar_GetByUtilityCode_Result> usp_MeterReadCalendar_GetByUtilityCode(string utilityCode)
        {
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MeterReadCalendar_GetByUtilityCode_Result>("usp_MeterReadCalendar_GetByUtilityCode", utilityCodeParameter);
        }
    
        public virtual int usp_MeterReadCalendar_INSERT(Nullable<System.Guid> id, string utilityCode, Nullable<int> year, Nullable<int> month, string readCycleId, Nullable<System.DateTime> readDate, Nullable<bool> isAmr, Nullable<bool> inactive, string user)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var readCycleIdParameter = readCycleId != null ?
                new ObjectParameter("ReadCycleId", readCycleId) :
                new ObjectParameter("ReadCycleId", typeof(string));
    
            var readDateParameter = readDate.HasValue ?
                new ObjectParameter("ReadDate", readDate) :
                new ObjectParameter("ReadDate", typeof(System.DateTime));
    
            var isAmrParameter = isAmr.HasValue ?
                new ObjectParameter("IsAmr", isAmr) :
                new ObjectParameter("IsAmr", typeof(bool));
    
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(bool));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MeterReadCalendar_INSERT", idParameter, utilityCodeParameter, yearParameter, monthParameter, readCycleIdParameter, readDateParameter, isAmrParameter, inactiveParameter, userParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_MeterReadCalendar_IsDuplicate(string utilityCode, Nullable<int> year, Nullable<int> month, string readCycleId, Nullable<bool> isAmr)
        {
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var readCycleIdParameter = readCycleId != null ?
                new ObjectParameter("ReadCycleId", readCycleId) :
                new ObjectParameter("ReadCycleId", typeof(string));
    
            var isAmrParameter = isAmr.HasValue ?
                new ObjectParameter("IsAmr", isAmr) :
                new ObjectParameter("IsAmr", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_MeterReadCalendar_IsDuplicate", utilityCodeParameter, yearParameter, monthParameter, readCycleIdParameter, isAmrParameter);
        }
    
        public virtual int usp_MeterReadCalendar_UPDATE(Nullable<System.Guid> id, string utilityCode, Nullable<int> year, Nullable<int> month, string readCycleId, Nullable<System.DateTime> readDate, Nullable<bool> isAmr, Nullable<bool> inactive, string user)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var readCycleIdParameter = readCycleId != null ?
                new ObjectParameter("ReadCycleId", readCycleId) :
                new ObjectParameter("ReadCycleId", typeof(string));
    
            var readDateParameter = readDate.HasValue ?
                new ObjectParameter("ReadDate", readDate) :
                new ObjectParameter("ReadDate", typeof(System.DateTime));
    
            var isAmrParameter = isAmr.HasValue ?
                new ObjectParameter("IsAmr", isAmr) :
                new ObjectParameter("IsAmr", typeof(bool));
    
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(bool));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MeterReadCalendar_UPDATE", idParameter, utilityCodeParameter, yearParameter, monthParameter, readCycleIdParameter, readDateParameter, isAmrParameter, inactiveParameter, userParameter);
        }
    
        public virtual ObjectResult<usp_Chart_MeterReadCalendarCount_Result> usp_Chart_MeterReadCalendarCount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Chart_MeterReadCalendarCount_Result>("usp_Chart_MeterReadCalendarCount");
        }
    
        public virtual ObjectResult<usp_PaymentTerm_GetAll_Result> usp_PaymentTerm_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PaymentTerm_GetAll_Result>("usp_PaymentTerm_GetAll");
        }
    
        public virtual ObjectResult<usp_PaymentTerm_GetByUtilityCode_Result> usp_PaymentTerm_GetByUtilityCode(string utilityCode)
        {
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PaymentTerm_GetByUtilityCode_Result>("usp_PaymentTerm_GetByUtilityCode", utilityCodeParameter);
        }
    
        public virtual int usp_PaymentTerm_INSERT(Nullable<System.Guid> id, string utilityCode, string accountType, string billingType, string market, string paymentTerm, Nullable<bool> inactive, string user)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var accountTypeParameter = accountType != null ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(string));
    
            var billingTypeParameter = billingType != null ?
                new ObjectParameter("BillingType", billingType) :
                new ObjectParameter("BillingType", typeof(string));
    
            var marketParameter = market != null ?
                new ObjectParameter("Market", market) :
                new ObjectParameter("Market", typeof(string));
    
            var paymentTermParameter = paymentTerm != null ?
                new ObjectParameter("PaymentTerm", paymentTerm) :
                new ObjectParameter("PaymentTerm", typeof(string));
    
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(bool));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PaymentTerm_INSERT", idParameter, utilityCodeParameter, accountTypeParameter, billingTypeParameter, marketParameter, paymentTermParameter, inactiveParameter, userParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_PaymentTerm_IsDuplicate(string utilityCode, string accountType, string billingType, string market)
        {
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var accountTypeParameter = accountType != null ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(string));
    
            var billingTypeParameter = billingType != null ?
                new ObjectParameter("BillingType", billingType) :
                new ObjectParameter("BillingType", typeof(string));
    
            var marketParameter = market != null ?
                new ObjectParameter("Market", market) :
                new ObjectParameter("Market", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_PaymentTerm_IsDuplicate", utilityCodeParameter, accountTypeParameter, billingTypeParameter, marketParameter);
        }
    
        public virtual int usp_PaymentTerm_IsExactDuplicate(string utilityCode, string accountType, string billingType, string market, string paymentTerm, Nullable<bool> inactive)
        {
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var accountTypeParameter = accountType != null ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(string));
    
            var billingTypeParameter = billingType != null ?
                new ObjectParameter("BillingType", billingType) :
                new ObjectParameter("BillingType", typeof(string));
    
            var marketParameter = market != null ?
                new ObjectParameter("Market", market) :
                new ObjectParameter("Market", typeof(string));
    
            var paymentTermParameter = paymentTerm != null ?
                new ObjectParameter("PaymentTerm", paymentTerm) :
                new ObjectParameter("PaymentTerm", typeof(string));
    
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PaymentTerm_IsExactDuplicate", utilityCodeParameter, accountTypeParameter, billingTypeParameter, marketParameter, paymentTermParameter, inactiveParameter);
        }
    
        public virtual int usp_PaymentTerm_UPDATE(Nullable<System.Guid> id, string utilityCode, string accountType, string billingType, string market, string paymentTerm, Nullable<bool> inactive, string user)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var accountTypeParameter = accountType != null ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(string));
    
            var billingTypeParameter = billingType != null ?
                new ObjectParameter("BillingType", billingType) :
                new ObjectParameter("BillingType", typeof(string));
    
            var marketParameter = market != null ?
                new ObjectParameter("Market", market) :
                new ObjectParameter("Market", typeof(string));
    
            var paymentTermParameter = paymentTerm != null ?
                new ObjectParameter("PaymentTerm", paymentTerm) :
                new ObjectParameter("PaymentTerm", typeof(string));
    
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(bool));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PaymentTerm_UPDATE", idParameter, utilityCodeParameter, accountTypeParameter, billingTypeParameter, marketParameter, paymentTermParameter, inactiveParameter, userParameter);
        }
    
        public virtual int usp_IdrRule_INSERT(Nullable<System.Guid> id, Nullable<System.Guid> utilityCompanyId, Nullable<System.Guid> rateClassId, Nullable<System.Guid> loadProfileId, Nullable<System.Guid> tariffCodeId, Nullable<int> minUsageMWh, Nullable<int> maxUsageMWh, Nullable<bool> isOnEligibleCustomerList, Nullable<bool> isHistoricalArchiveAvailable, Nullable<System.Guid> requestModeIdrId, Nullable<System.Guid> requestModeTypeId, Nullable<bool> alwaysRequest, Nullable<bool> inactive, string createdBy, Nullable<System.DateTime> createdDate, string lastModifiedBy, Nullable<System.DateTime> lastModifiedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var utilityCompanyIdParameter = utilityCompanyId.HasValue ?
                new ObjectParameter("UtilityCompanyId", utilityCompanyId) :
                new ObjectParameter("UtilityCompanyId", typeof(System.Guid));
    
            var rateClassIdParameter = rateClassId.HasValue ?
                new ObjectParameter("RateClassId", rateClassId) :
                new ObjectParameter("RateClassId", typeof(System.Guid));
    
            var loadProfileIdParameter = loadProfileId.HasValue ?
                new ObjectParameter("LoadProfileId", loadProfileId) :
                new ObjectParameter("LoadProfileId", typeof(System.Guid));
    
            var tariffCodeIdParameter = tariffCodeId.HasValue ?
                new ObjectParameter("TariffCodeId", tariffCodeId) :
                new ObjectParameter("TariffCodeId", typeof(System.Guid));
    
            var minUsageMWhParameter = minUsageMWh.HasValue ?
                new ObjectParameter("MinUsageMWh", minUsageMWh) :
                new ObjectParameter("MinUsageMWh", typeof(int));
    
            var maxUsageMWhParameter = maxUsageMWh.HasValue ?
                new ObjectParameter("MaxUsageMWh", maxUsageMWh) :
                new ObjectParameter("MaxUsageMWh", typeof(int));
    
            var isOnEligibleCustomerListParameter = isOnEligibleCustomerList.HasValue ?
                new ObjectParameter("IsOnEligibleCustomerList", isOnEligibleCustomerList) :
                new ObjectParameter("IsOnEligibleCustomerList", typeof(bool));
    
            var isHistoricalArchiveAvailableParameter = isHistoricalArchiveAvailable.HasValue ?
                new ObjectParameter("IsHistoricalArchiveAvailable", isHistoricalArchiveAvailable) :
                new ObjectParameter("IsHistoricalArchiveAvailable", typeof(bool));
    
            var requestModeIdrIdParameter = requestModeIdrId.HasValue ?
                new ObjectParameter("RequestModeIdrId", requestModeIdrId) :
                new ObjectParameter("RequestModeIdrId", typeof(System.Guid));
    
            var requestModeTypeIdParameter = requestModeTypeId.HasValue ?
                new ObjectParameter("RequestModeTypeId", requestModeTypeId) :
                new ObjectParameter("RequestModeTypeId", typeof(System.Guid));
    
            var alwaysRequestParameter = alwaysRequest.HasValue ?
                new ObjectParameter("AlwaysRequest", alwaysRequest) :
                new ObjectParameter("AlwaysRequest", typeof(bool));
    
            var inactiveParameter = inactive.HasValue ?
                new ObjectParameter("Inactive", inactive) :
                new ObjectParameter("Inactive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var lastModifiedByParameter = lastModifiedBy != null ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(string));
    
            var lastModifiedDateParameter = lastModifiedDate.HasValue ?
                new ObjectParameter("LastModifiedDate", lastModifiedDate) :
                new ObjectParameter("LastModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_IdrRule_INSERT", idParameter, utilityCompanyIdParameter, rateClassIdParameter, loadProfileIdParameter, tariffCodeIdParameter, minUsageMWhParameter, maxUsageMWhParameter, isOnEligibleCustomerListParameter, isHistoricalArchiveAvailableParameter, requestModeIdrIdParameter, requestModeTypeIdParameter, alwaysRequestParameter, inactiveParameter, createdByParameter, createdDateParameter, lastModifiedByParameter, lastModifiedDateParameter);
        }
    
        public virtual ObjectResult<usp_CapacityThresholdRuleGetByUtilityCode_Result> usp_CapacityThresholdRuleGetByUtilityCode(string utilityCode)
        {
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CapacityThresholdRuleGetByUtilityCode_Result>("usp_CapacityThresholdRuleGetByUtilityCode", utilityCodeParameter);
        }
    
        public virtual int USP_CAPACITYTRESHOLDRULE_INSERT(string uTILITYCODE, string aCCOUNTTYPE, Nullable<bool> cAPACITYCHECK, Nullable<int> cAPACITYTRESHOLDMIN, Nullable<int> cAPACITYTRESHOLDMAX, Nullable<bool> iNACTIVE, string uSER)
        {
            var uTILITYCODEParameter = uTILITYCODE != null ?
                new ObjectParameter("UTILITYCODE", uTILITYCODE) :
                new ObjectParameter("UTILITYCODE", typeof(string));
    
            var aCCOUNTTYPEParameter = aCCOUNTTYPE != null ?
                new ObjectParameter("ACCOUNTTYPE", aCCOUNTTYPE) :
                new ObjectParameter("ACCOUNTTYPE", typeof(string));
    
            var cAPACITYCHECKParameter = cAPACITYCHECK.HasValue ?
                new ObjectParameter("CAPACITYCHECK", cAPACITYCHECK) :
                new ObjectParameter("CAPACITYCHECK", typeof(bool));
    
            var cAPACITYTRESHOLDMINParameter = cAPACITYTRESHOLDMIN.HasValue ?
                new ObjectParameter("CAPACITYTRESHOLDMIN", cAPACITYTRESHOLDMIN) :
                new ObjectParameter("CAPACITYTRESHOLDMIN", typeof(int));
    
            var cAPACITYTRESHOLDMAXParameter = cAPACITYTRESHOLDMAX.HasValue ?
                new ObjectParameter("CAPACITYTRESHOLDMAX", cAPACITYTRESHOLDMAX) :
                new ObjectParameter("CAPACITYTRESHOLDMAX", typeof(int));
    
            var iNACTIVEParameter = iNACTIVE.HasValue ?
                new ObjectParameter("INACTIVE", iNACTIVE) :
                new ObjectParameter("INACTIVE", typeof(bool));
    
            var uSERParameter = uSER != null ?
                new ObjectParameter("USER", uSER) :
                new ObjectParameter("USER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_CAPACITYTRESHOLDRULE_INSERT", uTILITYCODEParameter, aCCOUNTTYPEParameter, cAPACITYCHECKParameter, cAPACITYTRESHOLDMINParameter, cAPACITYTRESHOLDMAXParameter, iNACTIVEParameter, uSERParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_CapacityTresholdRule_IsDuplicate(string utilityCode, string accountType)
        {
            var utilityCodeParameter = utilityCode != null ?
                new ObjectParameter("UtilityCode", utilityCode) :
                new ObjectParameter("UtilityCode", typeof(string));
    
            var accountTypeParameter = accountType != null ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_CapacityTresholdRule_IsDuplicate", utilityCodeParameter, accountTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_CapacityTresholdRule_IsExactDuplicate(string uTILITYCODE, string aCCOUNTTYPE, Nullable<bool> capacityCheck, Nullable<int> capacityTresholdMin, Nullable<int> capacityTresholdMax, Nullable<bool> iNACTIVE)
        {
            var uTILITYCODEParameter = uTILITYCODE != null ?
                new ObjectParameter("UTILITYCODE", uTILITYCODE) :
                new ObjectParameter("UTILITYCODE", typeof(string));
    
            var aCCOUNTTYPEParameter = aCCOUNTTYPE != null ?
                new ObjectParameter("ACCOUNTTYPE", aCCOUNTTYPE) :
                new ObjectParameter("ACCOUNTTYPE", typeof(string));
    
            var capacityCheckParameter = capacityCheck.HasValue ?
                new ObjectParameter("CapacityCheck", capacityCheck) :
                new ObjectParameter("CapacityCheck", typeof(bool));
    
            var capacityTresholdMinParameter = capacityTresholdMin.HasValue ?
                new ObjectParameter("CapacityTresholdMin", capacityTresholdMin) :
                new ObjectParameter("CapacityTresholdMin", typeof(int));
    
            var capacityTresholdMaxParameter = capacityTresholdMax.HasValue ?
                new ObjectParameter("CapacityTresholdMax", capacityTresholdMax) :
                new ObjectParameter("CapacityTresholdMax", typeof(int));
    
            var iNACTIVEParameter = iNACTIVE.HasValue ?
                new ObjectParameter("INACTIVE", iNACTIVE) :
                new ObjectParameter("INACTIVE", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_CapacityTresholdRule_IsExactDuplicate", uTILITYCODEParameter, aCCOUNTTYPEParameter, capacityCheckParameter, capacityTresholdMinParameter, capacityTresholdMaxParameter, iNACTIVEParameter);
        }
    
        public virtual ObjectResult<usp_CapacityThresholdRule_GetAll_Result> usp_CapacityThresholdRule_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CapacityThresholdRule_GetAll_Result>("usp_CapacityThresholdRule_GetAll");
        }
    
        public virtual int USP_CAPACITYTRESHOLDRULE_UPDATE(string uTILITYCODE, string aCCOUNTTYPE, Nullable<bool> cAPACITYCHECK, Nullable<int> cAPACITYTRESHOLDMIN, Nullable<int> cAPACITYTRESHOLDMAX, Nullable<bool> iNACTIVE, string uSER)
        {
            var uTILITYCODEParameter = uTILITYCODE != null ?
                new ObjectParameter("UTILITYCODE", uTILITYCODE) :
                new ObjectParameter("UTILITYCODE", typeof(string));
    
            var aCCOUNTTYPEParameter = aCCOUNTTYPE != null ?
                new ObjectParameter("ACCOUNTTYPE", aCCOUNTTYPE) :
                new ObjectParameter("ACCOUNTTYPE", typeof(string));
    
            var cAPACITYCHECKParameter = cAPACITYCHECK.HasValue ?
                new ObjectParameter("CAPACITYCHECK", cAPACITYCHECK) :
                new ObjectParameter("CAPACITYCHECK", typeof(bool));
    
            var cAPACITYTRESHOLDMINParameter = cAPACITYTRESHOLDMIN.HasValue ?
                new ObjectParameter("CAPACITYTRESHOLDMIN", cAPACITYTRESHOLDMIN) :
                new ObjectParameter("CAPACITYTRESHOLDMIN", typeof(int));
    
            var cAPACITYTRESHOLDMAXParameter = cAPACITYTRESHOLDMAX.HasValue ?
                new ObjectParameter("CAPACITYTRESHOLDMAX", cAPACITYTRESHOLDMAX) :
                new ObjectParameter("CAPACITYTRESHOLDMAX", typeof(int));
    
            var iNACTIVEParameter = iNACTIVE.HasValue ?
                new ObjectParameter("INACTIVE", iNACTIVE) :
                new ObjectParameter("INACTIVE", typeof(bool));
    
            var uSERParameter = uSER != null ?
                new ObjectParameter("USER", uSER) :
                new ObjectParameter("USER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_CAPACITYTRESHOLDRULE_UPDATE", uTILITYCODEParameter, aCCOUNTTYPEParameter, cAPACITYCHECKParameter, cAPACITYTRESHOLDMINParameter, cAPACITYTRESHOLDMAXParameter, iNACTIVEParameter, uSERParameter);
        }
    }
}
