/*
Deployment script for Lp_UtilityManagement

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Lp_UtilityManagement"
:setvar DefaultFilePrefix "Lp_UtilityManagement"
:setvar DefaultDataPath "E:\Data\"
:setvar DefaultLogPath "E:\Logs\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
        
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [LibertyPowerUtilityManagementUser]...';


GO
CREATE USER [LibertyPowerUtilityManagementUser] FOR LOGIN [LibertyPowerUtilityManagementUser];


GO
REVOKE CONNECT TO [LibertyPowerUtilityManagementUser];


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_datareader', @membername = N'LibertyPowerUtilityManagementUser';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_datawriter', @membername = N'LibertyPowerUtilityManagementUser';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_owner', @membername = N'LibertyPowerUtilityManagementUser';


GO
PRINT N'Creating [dbo].[AccountInfoField]...';


GO
CREATE TABLE [dbo].[AccountInfoField] (
    [Id]                    UNIQUEIDENTIFIER NOT NULL,
    [NameUserFriendly]      NVARCHAR (255)   NOT NULL,
    [NameMachineUnfriendly] NVARCHAR (255)   NOT NULL,
    [Description]           NVARCHAR (255)   NOT NULL,
    [Inactive]              BIT              NOT NULL,
    [CreatedBy]             NVARCHAR (100)   NOT NULL,
    [CreatedDate]           DATETIME         NOT NULL,
    [LastModifiedBy]        NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]      DATETIME         NOT NULL,
    CONSTRAINT [PK_AccountInfoField] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[AccountInfoFieldRequired]...';


GO
CREATE TABLE [dbo].[AccountInfoFieldRequired] (
    [Id]                 UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]   UNIQUEIDENTIFIER NOT NULL,
    [AccountInfoFieldId] UNIQUEIDENTIFIER NOT NULL,
    [IsRequired]         BIT              NOT NULL,
    [Inactive]           BIT              NOT NULL,
    [CreatedBy]          NVARCHAR (100)   NOT NULL,
    [CreatedDate]        DATETIME         NOT NULL,
    [LastModifiedBy]     NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]   DATETIME         NOT NULL,
    CONSTRAINT [PK_AccountInfoFieldRequired] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[AccountType]...';


GO
CREATE TABLE [dbo].[AccountType] (
    [Id]               UNIQUEIDENTIFIER NOT NULL,
    [Name]             NVARCHAR (255)   NOT NULL,
    [Description]      NVARCHAR (255)   NOT NULL,
    [Inactive]         BIT              NOT NULL,
    [CreatedBy]        NVARCHAR (100)   NOT NULL,
    [CreatedDate]      DATETIME         NOT NULL,
    [LastModifiedBy]   NVARCHAR (100)   NOT NULL,
    [LastModifiedDate] DATETIME         NOT NULL,
    CONSTRAINT [PK_AccountType] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
ALTER TABLE [dbo].[AccountType] ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = OFF);


GO
PRINT N'Creating [dbo].[BillingAccountPattern]...';


GO
CREATE TABLE [dbo].[BillingAccountPattern] (
    [Id]                                  UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]                    UNIQUEIDENTIFIER NOT NULL,
    [BillingAccountPattern]               NVARCHAR (255)   NULL,
    [BillingAccountPatternDescription]    NVARCHAR (255)   NOT NULL,
    [BillingAccountAddLeadingZero]        INT              NULL,
    [BillingAccountTruncateLast]          INT              NULL,
    [BillingAccountRequiredForEDIRequest] BIT              NOT NULL,
    [Inactive]                            BIT              NOT NULL,
    [CreatedBy]                           NVARCHAR (100)   NOT NULL,
    [CreatedDate]                         DATETIME         NOT NULL,
    [LastModifiedBy]                      NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]                    DATETIME         NOT NULL,
    CONSTRAINT [PK_BillingAccountPattern] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 90)
);


GO
PRINT N'Creating [dbo].[BillingType]...';


GO
CREATE TABLE [dbo].[BillingType] (
    [Id]               UNIQUEIDENTIFIER NOT NULL,
    [Name]             NVARCHAR (255)   NOT NULL,
    [Description]      NVARCHAR (255)   NOT NULL,
    [Inactive]         BIT              NOT NULL,
    [CreatedBy]        NVARCHAR (100)   NOT NULL,
    [CreatedDate]      DATETIME         NOT NULL,
    [LastModifiedBy]   NVARCHAR (100)   NOT NULL,
    [LastModifiedDate] DATETIME         NOT NULL,
    [EnumValue]        INT              NOT NULL,
    CONSTRAINT [PK_BillingType] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[ChangeTableVersioning]...';


GO
CREATE TABLE [dbo].[ChangeTableVersioning] (
    [Id]                    UNIQUEIDENTIFIER NOT NULL,
    [ChangeTrackingVersion] BIGINT           NOT NULL,
    [CreatedDate]           DATETIME         NOT NULL,
    CONSTRAINT [PK_ChangeTableVersioning] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[IcapTcapRefreshDate]...';


GO
CREATE TABLE [dbo].[IcapTcapRefreshDate] (
    [Id]                UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]  UNIQUEIDENTIFIER NOT NULL,
    [IcapNextRefresh]   NVARCHAR (4)     NOT NULL,
    [IcapEffectiveDate] NVARCHAR (4)     NOT NULL,
    [TcapNextRefresh]   NVARCHAR (4)     NOT NULL,
    [TcapEffectiveDate] NVARCHAR (4)     NOT NULL,
    [Inactive]          BIT              NOT NULL,
    [CreatedBy]         NVARCHAR (100)   NOT NULL,
    [CreatedDate]       DATETIME         NOT NULL,
    [LastModifiedBy]    NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]  DATETIME         NOT NULL,
    CONSTRAINT [PK_IcapTcapRefreshDate] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 90)
);


GO
PRINT N'Creating [dbo].[IdrRequestCost]...';


GO
CREATE TABLE [dbo].[IdrRequestCost] (
    [Id]                       UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]         UNIQUEIDENTIFIER NOT NULL,
    [IdrRequestCostPerAccount] MONEY            NOT NULL,
    [Inactive]                 BIT              NOT NULL,
    [CreatedBy]                NVARCHAR (100)   NOT NULL,
    [CreatedDate]              DATETIME         NOT NULL,
    [LastModifiedBy]           NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]         DATETIME         NOT NULL,
    CONSTRAINT [PK_IdrRequestCost] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 90)
);


GO
PRINT N'Creating [dbo].[IdrRule]...';


GO
CREATE TABLE [dbo].[IdrRule] (
    [Id]                           UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]             UNIQUEIDENTIFIER NOT NULL,
    [RequestModeTypeId]            UNIQUEIDENTIFIER NOT NULL,
    [RateClassId]                  UNIQUEIDENTIFIER NULL,
    [LoadProfileId]                UNIQUEIDENTIFIER NULL,
    [MinUsageMWh]                  INT              NULL,
    [MaxUsageMWh]                  INT              NULL,
    [IsOnEligibleCustomerList]     BIT              NOT NULL,
    [IsHistoricalArchiveAvailable] BIT              NOT NULL,
    [Inactive]                     BIT              NOT NULL,
    [CreatedBy]                    NVARCHAR (100)   NOT NULL,
    [CreatedDate]                  DATETIME         NOT NULL,
    [LastModifiedBy]               NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]             DATETIME         NOT NULL,
    CONSTRAINT [PK_IdrRule] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
ALTER TABLE [dbo].[IdrRule] ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = OFF);


GO
PRINT N'Creating [dbo].[ISO]...';


GO
CREATE TABLE [dbo].[ISO] (
    [Id]               UNIQUEIDENTIFIER NOT NULL,
    [Name]             VARCHAR (50)     NOT NULL,
    [Description]      VARCHAR (255)    NOT NULL,
    [Inactive]         BIT              NOT NULL,
    [CreatedBy]        NVARCHAR (100)   NOT NULL,
    [CreatedDate]      DATETIME         NOT NULL,
    [LastModifiedBy]   NVARCHAR (100)   NOT NULL,
    [LastModifiedDate] DATETIME         NOT NULL,
    CONSTRAINT [PK_ISO] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 90)
);


GO
PRINT N'Creating [dbo].[LoadProfile]...';


GO
CREATE TABLE [dbo].[LoadProfile] (
    [Id]                      UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]        UNIQUEIDENTIFIER NOT NULL,
    [LpStandardLoadProfileId] UNIQUEIDENTIFIER NOT NULL,
    [LoadProfileCode]         NVARCHAR (255)   NOT NULL,
    [Description]             NVARCHAR (255)   NOT NULL,
    [AccountTypeId]           UNIQUEIDENTIFIER NOT NULL,
    [Inactive]                BIT              NOT NULL,
    [CreatedBy]               NVARCHAR (100)   NOT NULL,
    [CreatedDate]             DATETIME         NOT NULL,
    [LastModifiedBy]          NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]        DATETIME         NOT NULL,
    [LoadProfileId]           INT              NOT NULL,
    CONSTRAINT [PK_LoadProfile] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[LoadProfileAlias]...';


GO
CREATE TABLE [dbo].[LoadProfileAlias] (
    [Id]                   UNIQUEIDENTIFIER NOT NULL,
    [LoadProfileId]        UNIQUEIDENTIFIER NOT NULL,
    [LoadProfileCodeAlias] NVARCHAR (255)   NOT NULL,
    [Inactive]             BIT              NOT NULL,
    [CreatedBy]            NVARCHAR (100)   NOT NULL,
    [CreatedDate]          DATETIME         NOT NULL,
    [LastModifiedBy]       NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]     DATETIME         NOT NULL,
    CONSTRAINT [PK_LoadProfileAlias] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
ALTER TABLE [dbo].[LoadProfileAlias] ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = OFF);


GO
PRINT N'Creating [dbo].[Log]...';


GO
CREATE TABLE [dbo].[Log] (
    [ID]        INT            IDENTITY (1, 1) NOT NULL,
    [DATE]      DATETIME       NOT NULL,
    [THREAD]    VARCHAR (255)  NOT NULL,
    [LEV]       VARCHAR (50)   NOT NULL,
    [LOGGER]    VARCHAR (255)  NOT NULL,
    [MESSAGE]   VARCHAR (4000) NOT NULL,
    [EXCEPTION] VARCHAR (2000) NULL
);


GO
PRINT N'Creating [dbo].[LpApprovedBillingType]...';


GO
CREATE TABLE [dbo].[LpApprovedBillingType] (
    [Id]                    UNIQUEIDENTIFIER NOT NULL,
    [LpBillingTypeId]       UNIQUEIDENTIFIER NOT NULL,
    [ApprovedBillingTypeId] UNIQUEIDENTIFIER NOT NULL,
    [Inactive]              BIT              NOT NULL,
    [CreatedBy]             NVARCHAR (100)   NOT NULL,
    [CreatedDate]           DATETIME         NOT NULL,
    [LastModifiedBy]        NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]      DATETIME         NOT NULL,
    CONSTRAINT [PK_LpApprovedBillingType] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[LpBillingType]...';


GO
CREATE TABLE [dbo].[LpBillingType] (
    [Id]                   UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]     UNIQUEIDENTIFIER NOT NULL,
    [PorDriverId]          UNIQUEIDENTIFIER NOT NULL,
    [RateClassId]          UNIQUEIDENTIFIER NULL,
    [LoadProfileId]        UNIQUEIDENTIFIER NULL,
    [TariffCodeId]         UNIQUEIDENTIFIER NULL,
    [DefaultBillingTypeId] UNIQUEIDENTIFIER NOT NULL,
    [Inactive]             BIT              NOT NULL,
    [CreatedBy]            NVARCHAR (100)   NOT NULL,
    [CreatedDate]          DATETIME         NOT NULL,
    [LastModifiedBy]       NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]     DATETIME         NOT NULL,
    CONSTRAINT [PK_LpBillingType] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[LpStandardLoadProfile]...';


GO
CREATE TABLE [dbo].[LpStandardLoadProfile] (
    [Id]                        UNIQUEIDENTIFIER NOT NULL,
    [LpStandardLoadProfileCode] NVARCHAR (255)   NOT NULL,
    [Inactive]                  BIT              NOT NULL,
    [CreatedBy]                 NVARCHAR (100)   NOT NULL,
    [CreatedDate]               DATETIME         NOT NULL,
    [LastModifiedBy]            NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]          DATETIME         NOT NULL,
    [UtilityCompanyId]          UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_LpStandardLoadProfile] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
ALTER TABLE [dbo].[LpStandardLoadProfile] ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = OFF);


GO
PRINT N'Creating [dbo].[LpStandardRateClass]...';


GO
CREATE TABLE [dbo].[LpStandardRateClass] (
    [Id]                      UNIQUEIDENTIFIER NOT NULL,
    [LpStandardRateClassCode] NVARCHAR (255)   NOT NULL,
    [Inactive]                BIT              NOT NULL,
    [CreatedBy]               NVARCHAR (100)   NOT NULL,
    [CreatedDate]             DATETIME         NOT NULL,
    [LastModifiedBy]          NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]        DATETIME         NOT NULL,
    [UtilityCompanyId]        UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_LpStandardRateClass] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
ALTER TABLE [dbo].[LpStandardRateClass] ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = OFF);


GO
PRINT N'Creating [dbo].[LpStandardTariffCode]...';


GO
CREATE TABLE [dbo].[LpStandardTariffCode] (
    [Id]                       UNIQUEIDENTIFIER NOT NULL,
    [LpStandardTariffCodeCode] NVARCHAR (255)   NOT NULL,
    [Inactive]                 BIT              NOT NULL,
    [CreatedBy]                NVARCHAR (100)   NOT NULL,
    [CreatedDate]              DATETIME         NOT NULL,
    [LastModifiedBy]           NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]         DATETIME         NOT NULL,
    [UtilityCompanyId]         UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_LpStandardTariffCode] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
ALTER TABLE [dbo].[LpStandardTariffCode] ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = OFF);


GO
PRINT N'Creating [dbo].[LpUtilityOfferedBillingType]...';


GO
CREATE TABLE [dbo].[LpUtilityOfferedBillingType] (
    [Id]                          UNIQUEIDENTIFIER NOT NULL,
    [LpBillingTypeId]             UNIQUEIDENTIFIER NOT NULL,
    [UtilityOfferedBillingTypeId] UNIQUEIDENTIFIER NOT NULL,
    [Inactive]                    BIT              NOT NULL,
    [CreatedBy]                   NVARCHAR (100)   NOT NULL,
    [CreatedDate]                 DATETIME         NOT NULL,
    [LastModifiedBy]              NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]            DATETIME         NOT NULL,
    CONSTRAINT [PK_LpUtilityOfferedBillingType] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Market]...';


GO
CREATE TABLE [dbo].[Market] (
    [Id]               UNIQUEIDENTIFIER NOT NULL,
    [Market]           VARCHAR (50)     NOT NULL,
    [Description]      VARCHAR (255)    NOT NULL,
    [Inactive]         BIT              NOT NULL,
    [CreatedBy]        NVARCHAR (100)   NOT NULL,
    [CreatedDate]      DATETIME         NOT NULL,
    [LastModifiedBy]   NVARCHAR (100)   NOT NULL,
    [LastModifiedDate] DATETIME         NOT NULL,
    CONSTRAINT [PK_Market] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 90)
);


GO
PRINT N'Creating [dbo].[MeterReadSchedule]...';


GO
CREATE TABLE [dbo].[MeterReadSchedule] (
    [Id]               UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId] UNIQUEIDENTIFIER NOT NULL,
    [UtilityTripId]    UNIQUEIDENTIFIER NOT NULL,
    [YearId]           UNIQUEIDENTIFIER NOT NULL,
    [MonthId]          UNIQUEIDENTIFIER NOT NULL,
    [ReadDate]         DATETIME         NOT NULL,
    [Inactive]         BIT              NOT NULL,
    [CreatedBy]        NVARCHAR (100)   NOT NULL,
    [CreatedDate]      DATETIME         NOT NULL,
    [LastModifiedBy]   NVARCHAR (100)   NOT NULL,
    [LastModifiedDate] DATETIME         NOT NULL,
    CONSTRAINT [PK_MeterReadSchedule] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[MeterType]...';


GO
CREATE TABLE [dbo].[MeterType] (
    [Id]                  UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]    UNIQUEIDENTIFIER NULL,
    [MeterTypeCode]       NVARCHAR (255)   NOT NULL,
    [Description]         NVARCHAR (255)   NOT NULL,
    [AccountTypeId]       UNIQUEIDENTIFIER NOT NULL,
    [LpStandardMeterType] NVARCHAR (255)   NOT NULL,
    [Sequence]            INT              NOT NULL,
    [Inactive]            BIT              NOT NULL,
    [CreatedBy]           NVARCHAR (100)   NOT NULL,
    [CreatedDate]         DATETIME         NOT NULL,
    [LastModifiedBy]      NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]    DATETIME         NOT NULL,
    CONSTRAINT [PK_MeterType] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
ALTER TABLE [dbo].[MeterType] ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = OFF);


GO
PRINT N'Creating [dbo].[Month]...';


GO
CREATE TABLE [dbo].[Month] (
    [Id]               UNIQUEIDENTIFIER NOT NULL,
    [Month]            INT              NOT NULL,
    [Name]             NVARCHAR (40)    NOT NULL,
    [Inactive]         BIT              NOT NULL,
    [CreatedBy]        NVARCHAR (100)   NOT NULL,
    [CreatedDate]      DATETIME         NOT NULL,
    [LastModifiedBy]   NVARCHAR (100)   NOT NULL,
    [LastModifiedDate] DATETIME         NOT NULL,
    CONSTRAINT [PK_Month] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[NameKeyPattern]...';


GO
CREATE TABLE [dbo].[NameKeyPattern] (
    [Id]                           UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]             UNIQUEIDENTIFIER NOT NULL,
    [NameKeyPattern]               NVARCHAR (255)   NULL,
    [NameKeyPatternDescription]    NVARCHAR (255)   NOT NULL,
    [NameKeyAddLeadingZero]        INT              NULL,
    [NameKeyTruncateLast]          INT              NULL,
    [NameKeyRequiredForEDIRequest] BIT              NOT NULL,
    [Inactive]                     BIT              NOT NULL,
    [CreatedBy]                    NVARCHAR (100)   NOT NULL,
    [CreatedDate]                  DATETIME         NOT NULL,
    [LastModifiedBy]               NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]             DATETIME         NOT NULL,
    CONSTRAINT [PK_NameKeyPattern] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 90)
);


GO
PRINT N'Creating [dbo].[PorDriver]...';


GO
CREATE TABLE [dbo].[PorDriver] (
    [Id]               UNIQUEIDENTIFIER NOT NULL,
    [Name]             NVARCHAR (255)   NOT NULL,
    [Inactive]         BIT              NOT NULL,
    [CreatedBy]        NVARCHAR (100)   NOT NULL,
    [CreatedDate]      DATETIME         NOT NULL,
    [LastModifiedBy]   NVARCHAR (100)   NOT NULL,
    [LastModifiedDate] DATETIME         NOT NULL,
    [EnumValue]        INT              NOT NULL,
    CONSTRAINT [PK_PorDriver] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
ALTER TABLE [dbo].[PorDriver] ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = OFF);


GO
PRINT N'Creating [dbo].[PorRecourse]...';


GO
CREATE TABLE [dbo].[PorRecourse] (
    [Id]               UNIQUEIDENTIFIER NOT NULL,
    [Name]             NVARCHAR (255)   NOT NULL,
    [Inactive]         BIT              NOT NULL,
    [CreatedBy]        NVARCHAR (100)   NOT NULL,
    [CreatedDate]      DATETIME         NOT NULL,
    [LastModifiedBy]   NVARCHAR (100)   NOT NULL,
    [LastModifiedDate] DATETIME         NOT NULL,
    [EnumValue]        INT              NOT NULL,
    CONSTRAINT [PK_PorRecourse] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
ALTER TABLE [dbo].[PorRecourse] ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = OFF);


GO
PRINT N'Creating [dbo].[PurchaseOfReceivables]...';


GO
CREATE TABLE [dbo].[PurchaseOfReceivables] (
    [Id]                        UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]          UNIQUEIDENTIFIER NOT NULL,
    [PorDriverId]               UNIQUEIDENTIFIER NOT NULL,
    [RateClassId]               UNIQUEIDENTIFIER NULL,
    [LoadProfileId]             UNIQUEIDENTIFIER NULL,
    [TariffCodeId]              UNIQUEIDENTIFIER NULL,
    [IsPorOffered]              BIT              NOT NULL,
    [IsPorParticipated]         BIT              NOT NULL,
    [PorRecourseId]             UNIQUEIDENTIFIER NOT NULL,
    [IsPorAssurance]            BIT              NOT NULL,
    [PorDiscountRate]           DECIMAL (18)     NOT NULL,
    [PorFlatFee]                DECIMAL (18)     NOT NULL,
    [PorDiscountEffectiveDate]  DATETIME         NOT NULL,
    [PorDiscountExpirationDate] DATETIME         NULL,
    [Inactive]                  BIT              NOT NULL,
    [CreatedBy]                 NVARCHAR (100)   NOT NULL,
    [CreatedDate]               DATETIME         NOT NULL,
    [LastModifiedBy]            NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]          DATETIME         NOT NULL,
    CONSTRAINT [PK_PurchaseOfReceivables] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
ALTER TABLE [dbo].[PurchaseOfReceivables] ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = OFF);


GO
PRINT N'Creating [dbo].[RateClass]...';


GO
CREATE TABLE [dbo].[RateClass] (
    [Id]                    UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]      UNIQUEIDENTIFIER NOT NULL,
    [RateClassCode]         NVARCHAR (255)   NOT NULL,
    [Description]           NVARCHAR (255)   NOT NULL,
    [AccountTypeId]         UNIQUEIDENTIFIER NOT NULL,
    [Inactive]              BIT              NOT NULL,
    [CreatedBy]             NVARCHAR (100)   NOT NULL,
    [CreatedDate]           DATETIME         NOT NULL,
    [LastModifiedBy]        NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]      DATETIME         NOT NULL,
    [RateClassId]           INT              NOT NULL,
    [LpStandardRateClassId] UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_RateClass] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
ALTER TABLE [dbo].[RateClass] ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = OFF);


GO
PRINT N'Creating [dbo].[RateClassAlias]...';


GO
CREATE TABLE [dbo].[RateClassAlias] (
    [Id]                 UNIQUEIDENTIFIER NOT NULL,
    [RateClassId]        UNIQUEIDENTIFIER NOT NULL,
    [RateClassCodeAlias] NVARCHAR (255)   NOT NULL,
    [Inactive]           BIT              NOT NULL,
    [CreatedBy]          NVARCHAR (100)   NOT NULL,
    [CreatedDate]        DATETIME         NOT NULL,
    [LastModifiedBy]     NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]   DATETIME         NOT NULL,
    CONSTRAINT [PK_RateClassAlias] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
ALTER TABLE [dbo].[RateClassAlias] ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = OFF);


GO
PRINT N'Creating [dbo].[RequestModeEnrollmentType]...';


GO
CREATE TABLE [dbo].[RequestModeEnrollmentType] (
    [Id]               UNIQUEIDENTIFIER NOT NULL,
    [Name]             NVARCHAR (50)    NOT NULL,
    [Description]      NVARCHAR (255)   NOT NULL,
    [Inactive]         BIT              NOT NULL,
    [CreatedBy]        NVARCHAR (100)   NOT NULL,
    [CreatedDate]      DATETIME         NOT NULL,
    [LastModifiedBy]   NVARCHAR (100)   NOT NULL,
    [LastModifiedDate] DATETIME         NOT NULL,
    [EnumValue]        INT              NOT NULL,
    CONSTRAINT [PK_RequestModeEnrollmentType] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
ALTER TABLE [dbo].[RequestModeEnrollmentType] ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = ON);


GO
PRINT N'Creating [dbo].[RequestModeHistoricalUsage]...';


GO
CREATE TABLE [dbo].[RequestModeHistoricalUsage] (
    [Id]                                                    UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]                                      UNIQUEIDENTIFIER NOT NULL,
    [RequestModeEnrollmentTypeId]                           UNIQUEIDENTIFIER NOT NULL,
    [RequestModeTypeId]                                     UNIQUEIDENTIFIER NOT NULL,
    [AddressForPreEnrollment]                               NVARCHAR (200)   NULL,
    [EmailTemplate]                                         NVARCHAR (2000)  NULL,
    [Instructions]                                          NVARCHAR (500)   NOT NULL,
    [UtilitysSlaHistoricalUsageResponseInDays]              INT              NOT NULL,
    [LibertyPowersSlaFollowUpHistoricalUsageResponseInDays] INT              NOT NULL,
    [IsLoaRequired]                                         BIT              NOT NULL,
    [Inactive]                                              BIT              NOT NULL,
    [CreatedBy]                                             NVARCHAR (100)   NOT NULL,
    [CreatedDate]                                           DATETIME         NOT NULL,
    [LastModifiedBy]                                        NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]                                      DATETIME         NOT NULL,
    CONSTRAINT [PK_RequestModeHistoricalUsage] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
ALTER TABLE [dbo].[RequestModeHistoricalUsage] ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = ON);


GO
PRINT N'Creating [dbo].[RequestModeHistoricalUsageParameter]...';


GO
CREATE TABLE [dbo].[RequestModeHistoricalUsageParameter] (
    [Id]                               UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]                 UNIQUEIDENTIFIER NOT NULL,
    [IsBillingAccountNumberRequiredId] UNIQUEIDENTIFIER NOT NULL,
    [IsZipCodeRequiredId]              UNIQUEIDENTIFIER NOT NULL,
    [IsNameKeyRequiredId]              UNIQUEIDENTIFIER NOT NULL,
    [IsMdmaId]                         UNIQUEIDENTIFIER NOT NULL,
    [IsServiceProviderId]              UNIQUEIDENTIFIER NOT NULL,
    [IsMeterInstallerId]               UNIQUEIDENTIFIER NOT NULL,
    [IsMeterReaderId]                  UNIQUEIDENTIFIER NOT NULL,
    [IsMeterOwnerId]                   UNIQUEIDENTIFIER NOT NULL,
    [IsSchedulingCoordinatorId]        UNIQUEIDENTIFIER NOT NULL,
    [HasReferenceNumberId]             UNIQUEIDENTIFIER NOT NULL,
    [HasCustomerNumberId]              UNIQUEIDENTIFIER NOT NULL,
    [HasPodIdNumberId]                 UNIQUEIDENTIFIER NOT NULL,
    [HasMeterTypeId]                   UNIQUEIDENTIFIER NOT NULL,
    [IsMeterNumberRequiredId]          UNIQUEIDENTIFIER NOT NULL,
    [Inactive]                         BIT              NOT NULL,
    [CreatedBy]                        NVARCHAR (100)   NOT NULL,
    [CreatedDate]                      DATETIME         NOT NULL,
    [LastModifiedBy]                   NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]                 DATETIME         NOT NULL,
    CONSTRAINT [PK_RequestModeHistoricalUsageParameter] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [UQC_RequestModeHistoricalUsageParameter] UNIQUE NONCLUSTERED ([UtilityCompanyId] ASC)
);


GO
PRINT N'Creating [dbo].[RequestModeIcap]...';


GO
CREATE TABLE [dbo].[RequestModeIcap] (
    [Id]                                         UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]                           UNIQUEIDENTIFIER NOT NULL,
    [RequestModeEnrollmentTypeId]                UNIQUEIDENTIFIER NOT NULL,
    [RequestModeTypeId]                          UNIQUEIDENTIFIER NOT NULL,
    [AddressForPreEnrollment]                    NVARCHAR (200)   NOT NULL,
    [EmailTemplate]                              NVARCHAR (2000)  NULL,
    [Instructions]                               NVARCHAR (500)   NOT NULL,
    [UtilitysSlaIcapResponseInDays]              INT              NOT NULL,
    [LibertyPowersSlaFollowUpIcapResponseInDays] INT              NOT NULL,
    [IsLoaRequired]                              BIT              NOT NULL,
    [Inactive]                                   BIT              NOT NULL,
    [CreatedBy]                                  NVARCHAR (100)   NOT NULL,
    [CreatedDate]                                DATETIME         NOT NULL,
    [LastModifiedBy]                             NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]                           DATETIME         NOT NULL,
    CONSTRAINT [PK_RequestModeIcap] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[RequestModeIdr]...';


GO
CREATE TABLE [dbo].[RequestModeIdr] (
    [Id]                                        UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]                          UNIQUEIDENTIFIER NOT NULL,
    [RequestModeEnrollmentTypeId]               UNIQUEIDENTIFIER NOT NULL,
    [RequestModeTypeId]                         UNIQUEIDENTIFIER NOT NULL,
    [AddressForPreEnrollment]                   NVARCHAR (255)   NOT NULL,
    [EmailTemplate]                             NVARCHAR (2000)  NOT NULL,
    [Instructions]                              NVARCHAR (500)   NOT NULL,
    [UtilitysSlaIdrResponseInDays]              INT              NOT NULL,
    [LibertyPowersSlaFollowUpIdrResponseInDays] INT              NOT NULL,
    [IsLoaRequired]                             BIT              NOT NULL,
    [RequestCostAccount]                        MONEY            NOT NULL,
    [Inactive]                                  BIT              NOT NULL,
    [CreatedBy]                                 NVARCHAR (100)   NOT NULL,
    [CreatedDate]                               DATETIME         NOT NULL,
    [LastModifiedBy]                            NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]                          DATETIME         NOT NULL,
    CONSTRAINT [PK_RequestModeIdr] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
ALTER TABLE [dbo].[RequestModeIdr] ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = OFF);


GO
PRINT N'Creating [dbo].[RequestModeType]...';


GO
CREATE TABLE [dbo].[RequestModeType] (
    [Id]               UNIQUEIDENTIFIER NOT NULL,
    [Name]             NVARCHAR (50)    NOT NULL,
    [Description]      NVARCHAR (255)   NOT NULL,
    [Inactive]         BIT              NOT NULL,
    [CreatedBy]        NVARCHAR (100)   NOT NULL,
    [CreatedDate]      DATETIME         NOT NULL,
    [LastModifiedBy]   NVARCHAR (100)   NOT NULL,
    [LastModifiedDate] DATETIME         NOT NULL,
    CONSTRAINT [PK_RequestModeType] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
ALTER TABLE [dbo].[RequestModeType] ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = ON);


GO
PRINT N'Creating [dbo].[RequestModeTypeGenre]...';


GO
CREATE TABLE [dbo].[RequestModeTypeGenre] (
    [Id]               UNIQUEIDENTIFIER NOT NULL,
    [Name]             NVARCHAR (50)    NOT NULL,
    [Description]      NVARCHAR (255)   NOT NULL,
    [Inactive]         BIT              NOT NULL,
    [CreatedBy]        NVARCHAR (100)   NOT NULL,
    [CreatedDate]      DATETIME         NOT NULL,
    [LastModifiedBy]   NVARCHAR (100)   NOT NULL,
    [LastModifiedDate] DATETIME         NOT NULL,
    CONSTRAINT [PK_RequestModeTypeGenre] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[RequestModeTypeToRequestModeEnrollmentType]...';


GO
CREATE TABLE [dbo].[RequestModeTypeToRequestModeEnrollmentType] (
    [Id]                          UNIQUEIDENTIFIER NOT NULL,
    [RequestModeTypeId]           UNIQUEIDENTIFIER NOT NULL,
    [RequestModeEnrollmentTypeId] UNIQUEIDENTIFIER NOT NULL,
    [Inactive]                    BIT              NOT NULL,
    [CreatedBy]                   NVARCHAR (100)   NOT NULL,
    [CreatedDate]                 DATETIME         NOT NULL,
    [LastModifiedBy]              NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]            DATETIME         NOT NULL,
    [RequestModeTypeGenreId]      UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_RequestModeTypeToRequestModeEnrollmentType] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 90)
);


GO
PRINT N'Creating [dbo].[RequestModeTypeToRequestModeTypeGenre]...';


GO
CREATE TABLE [dbo].[RequestModeTypeToRequestModeTypeGenre] (
    [Id]                     UNIQUEIDENTIFIER NOT NULL,
    [RequestModeTypeId]      UNIQUEIDENTIFIER NOT NULL,
    [RequestModeTypeGenreId] UNIQUEIDENTIFIER NOT NULL,
    [Inactive]               BIT              NOT NULL,
    [CreatedBy]              NVARCHAR (100)   NOT NULL,
    [CreatedDate]            DATETIME         NOT NULL,
    [LastModifiedBy]         NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]       DATETIME         NOT NULL,
    CONSTRAINT [PK_RequestModeTypeToRequestModeTypeGenre] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
ALTER TABLE [dbo].[RequestModeTypeToRequestModeTypeGenre] ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = ON);


GO
PRINT N'Creating [dbo].[ServiceAccountPattern]...';


GO
CREATE TABLE [dbo].[ServiceAccountPattern] (
    [Id]                                  UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]                    UNIQUEIDENTIFIER NOT NULL,
    [ServiceAccountPattern]               NVARCHAR (255)   NULL,
    [ServiceAccountPatternDescription]    NVARCHAR (255)   NOT NULL,
    [ServiceAccountAddLeadingZero]        INT              NULL,
    [ServiceAccountTruncateLast]          INT              NULL,
    [ServiceAccountRequiredForEDIRequest] BIT              NOT NULL,
    [Inactive]                            BIT              NOT NULL,
    [CreatedBy]                           NVARCHAR (100)   NOT NULL,
    [CreatedDate]                         DATETIME         NOT NULL,
    [LastModifiedBy]                      NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]                    DATETIME         NOT NULL,
    CONSTRAINT [PK_ServiceAccountPattern] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 90)
);


GO
PRINT N'Creating [dbo].[ServiceAddressZipPattern]...';


GO
CREATE TABLE [dbo].[ServiceAddressZipPattern] (
    [Id]                                     UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]                       UNIQUEIDENTIFIER NOT NULL,
    [ServiceAddressZipPattern]               NVARCHAR (255)   NULL,
    [ServiceAddressZipPatternDescription]    NVARCHAR (255)   NOT NULL,
    [ServiceAddressZipAddLeadingZero]        INT              NULL,
    [ServiceAddressZipTruncateLast]          INT              NULL,
    [ServiceAddressZipRequiredForEDIRequest] BIT              NOT NULL,
    [Inactive]                               BIT              NOT NULL,
    [CreatedBy]                              NVARCHAR (100)   NOT NULL,
    [CreatedDate]                            DATETIME         NOT NULL,
    [LastModifiedBy]                         NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]                       DATETIME         NOT NULL,
    CONSTRAINT [PK_ServiceAddressZipPattern] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 90)
);


GO
PRINT N'Creating [dbo].[TariffCode]...';


GO
CREATE TABLE [dbo].[TariffCode] (
    [Id]                     UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]       UNIQUEIDENTIFIER NOT NULL,
    [LpStandardTariffCodeId] UNIQUEIDENTIFIER NOT NULL,
    [TariffCodeCode]         NVARCHAR (255)   NOT NULL,
    [Description]            NVARCHAR (255)   NOT NULL,
    [AccountTypeId]          UNIQUEIDENTIFIER NOT NULL,
    [Inactive]               BIT              NOT NULL,
    [CreatedBy]              NVARCHAR (100)   NOT NULL,
    [CreatedDate]            DATETIME         NOT NULL,
    [LastModifiedBy]         NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]       DATETIME         NOT NULL,
    [TariffCodeId]           INT              NOT NULL,
    CONSTRAINT [PK_TariffCode] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[TariffCodeAlias]...';


GO
CREATE TABLE [dbo].[TariffCodeAlias] (
    [Id]                  UNIQUEIDENTIFIER NOT NULL,
    [TariffCodeId]        UNIQUEIDENTIFIER NOT NULL,
    [TariffCodeCodeAlias] NVARCHAR (255)   NOT NULL,
    [Inactive]            BIT              NOT NULL,
    [CreatedBy]           NVARCHAR (100)   NOT NULL,
    [CreatedDate]         DATETIME         NOT NULL,
    [LastModifiedBy]      NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]    DATETIME         NOT NULL,
    CONSTRAINT [PK_TariffCodeAlias] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
ALTER TABLE [dbo].[TariffCodeAlias] ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = OFF);


GO
PRINT N'Creating [dbo].[TriStateValue]...';


GO
CREATE TABLE [dbo].[TriStateValue] (
    [Id]               UNIQUEIDENTIFIER NOT NULL,
    [Value]            NVARCHAR (20)    NOT NULL,
    [NumericValue]     INT              NOT NULL,
    [Description]      NVARCHAR (255)   NOT NULL,
    [Inactive]         BIT              NOT NULL,
    [CreatedBy]        NVARCHAR (100)   NOT NULL,
    [CreatedDate]      DATETIME         NOT NULL,
    [LastModifiedBy]   NVARCHAR (100)   NOT NULL,
    [LastModifiedDate] DATETIME         NOT NULL,
    CONSTRAINT [PK_TriStateValue] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[TriStateValuePendingActiveInactive]...';


GO
CREATE TABLE [dbo].[TriStateValuePendingActiveInactive] (
    [Id]               UNIQUEIDENTIFIER NOT NULL,
    [Value]            NVARCHAR (20)    NOT NULL,
    [NumericValue]     INT              NOT NULL,
    [Description]      NVARCHAR (255)   NOT NULL,
    [Inactive]         BIT              NOT NULL,
    [CreatedBy]        NVARCHAR (100)   NOT NULL,
    [CreatedDate]      DATETIME         NOT NULL,
    [LastModifiedBy]   NVARCHAR (100)   NOT NULL,
    [LastModifiedDate] DATETIME         NOT NULL,
    CONSTRAINT [PK_TriStateValuePendingActiveInactive] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[UserInterfaceControlAndValueGoverningControlVisibility]...';


GO
CREATE TABLE [dbo].[UserInterfaceControlAndValueGoverningControlVisibility] (
    [Id]                                            UNIQUEIDENTIFIER NOT NULL,
    [UserInterfaceFormId]                           UNIQUEIDENTIFIER NOT NULL,
    [UserInterfaceFormControlGoverningVisibilityId] UNIQUEIDENTIFIER NOT NULL,
    [ControlValueGoverningVisibiltiy]               NVARCHAR (100)   NOT NULL,
    [Inactive]                                      BIT              NOT NULL,
    [CreatedBy]                                     NVARCHAR (100)   NOT NULL,
    [CreatedDate]                                   DATETIME         NOT NULL,
    [LastModifiedBy]                                NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]                              DATETIME         NOT NULL,
    CONSTRAINT [PK_UserInterfaceControlAndValueGoverningControlVisibility] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 90)
);


GO
ALTER TABLE [dbo].[UserInterfaceControlAndValueGoverningControlVisibility] ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = ON);


GO
PRINT N'Creating [dbo].[UserInterfaceControlVisibility]...';


GO
CREATE TABLE [dbo].[UserInterfaceControlVisibility] (
    [Id]                                                       UNIQUEIDENTIFIER NOT NULL,
    [UserInterfaceFormId]                                      UNIQUEIDENTIFIER NOT NULL,
    [UserInterfaceFormControlId]                               UNIQUEIDENTIFIER NOT NULL,
    [UserInterfaceControlAndValueGoverningControlVisibilityId] UNIQUEIDENTIFIER NOT NULL,
    [Inactive]                                                 BIT              NOT NULL,
    [CreatedBy]                                                NVARCHAR (100)   NOT NULL,
    [CreatedDate]                                              DATETIME         NOT NULL,
    [LastModifiedBy]                                           NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]                                         DATETIME         NOT NULL,
    CONSTRAINT [PK_UserInterfaceControlVisibility] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 90)
);


GO
ALTER TABLE [dbo].[UserInterfaceControlVisibility] ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = ON);


GO
PRINT N'Creating [dbo].[UserInterfaceForm]...';


GO
CREATE TABLE [dbo].[UserInterfaceForm] (
    [Id]                    UNIQUEIDENTIFIER NOT NULL,
    [UserInterfaceFormName] VARCHAR (50)     NOT NULL,
    [Inactive]              BIT              NOT NULL,
    [CreatedBy]             NVARCHAR (100)   NOT NULL,
    [CreatedDate]           DATETIME         NOT NULL,
    [LastModifiedBy]        NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]      DATETIME         NOT NULL,
    CONSTRAINT [PK_UserInterfaceForm] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 90)
);


GO
ALTER TABLE [dbo].[UserInterfaceForm] ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = ON);


GO
PRINT N'Creating [dbo].[UserInterfaceFormControl]...';


GO
CREATE TABLE [dbo].[UserInterfaceFormControl] (
    [Id]                  UNIQUEIDENTIFIER NOT NULL,
    [UserInterfaceFormId] UNIQUEIDENTIFIER NOT NULL,
    [ControlName]         VARCHAR (50)     NOT NULL,
    [Inactive]            BIT              NOT NULL,
    [CreatedBy]           NVARCHAR (100)   NOT NULL,
    [CreatedDate]         DATETIME         NOT NULL,
    [LastModifiedBy]      NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]    DATETIME         NOT NULL,
    CONSTRAINT [PK_UserInterfaceFormControls] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 90)
);


GO
ALTER TABLE [dbo].[UserInterfaceFormControl] ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = ON);


GO
PRINT N'Creating [dbo].[Users]...';


GO
CREATE TABLE [dbo].[Users] (
    [Id]               UNIQUEIDENTIFIER NOT NULL,
    [UserName]         NVARCHAR (50)    NOT NULL,
    [Password]         NVARCHAR (50)    NOT NULL,
    [Inactive]         BIT              NOT NULL,
    [CreatedBy]        NVARCHAR (100)   NOT NULL,
    [CreatedDate]      DATETIME         NOT NULL,
    [LastModifiedBy]   NVARCHAR (100)   NOT NULL,
    [LastModifiedDate] DATETIME         NOT NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[UtilityBillingType]...';


GO
CREATE TABLE [dbo].[UtilityBillingType] (
    [Id]                          UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]            UNIQUEIDENTIFIER NOT NULL,
    [PorDriverId]                 UNIQUEIDENTIFIER NOT NULL,
    [RateClassId]                 UNIQUEIDENTIFIER NULL,
    [LoadProfileId]               UNIQUEIDENTIFIER NULL,
    [TariffCodeId]                UNIQUEIDENTIFIER NULL,
    [UtilityOfferedBillingTypeId] UNIQUEIDENTIFIER NOT NULL,
    [Inactive]                    BIT              NOT NULL,
    [CreatedBy]                   NVARCHAR (100)   NOT NULL,
    [CreatedDate]                 DATETIME         NOT NULL,
    [LastModifiedBy]              NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]            DATETIME         NOT NULL,
    CONSTRAINT [PK_UtilityBillingType] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[UtilityCompany]...';


GO
CREATE TABLE [dbo].[UtilityCompany] (
    [Id]                UNIQUEIDENTIFIER NOT NULL,
    [UtilityCode]       VARCHAR (50)     NOT NULL,
    [Inactive]          BIT              NOT NULL,
    [CreatedBy]         NVARCHAR (100)   NOT NULL,
    [CreatedDate]       DATETIME         NOT NULL,
    [LastModifiedBy]    NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]  DATETIME         NOT NULL,
    [UtilityIdInt]      INT              NOT NULL,
    [FullName]          NVARCHAR (255)   NULL,
    [IsoId]             UNIQUEIDENTIFIER NULL,
    [MarketId]          UNIQUEIDENTIFIER NULL,
    [PrimaryDunsNumber] NVARCHAR (255)   NULL,
    [LpEntityId]        NVARCHAR (255)   NULL,
    [UtilityStatusId]   UNIQUEIDENTIFIER NULL,
    [SalesForceId]      NVARCHAR (255)   NULL,
    CONSTRAINT [PK_UtilityCompany] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 90)
);


GO
ALTER TABLE [dbo].[UtilityCompany] ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = ON);


GO
PRINT N'Creating [dbo].[UtilityCompanyToUtilityLegacy]...';


GO
CREATE TABLE [dbo].[UtilityCompanyToUtilityLegacy] (
    [Id]               UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId] UNIQUEIDENTIFIER NOT NULL,
    [UtilityLegacyId]  INT              NOT NULL,
    [Inactive]         BIT              NOT NULL,
    [CreatedBy]        NVARCHAR (100)   NOT NULL,
    [CreatedDate]      DATETIME         NOT NULL,
    [LastModifiedBy]   NVARCHAR (100)   NOT NULL,
    [LastModifiedDate] DATETIME         NOT NULL,
    CONSTRAINT [PK_UtilityCompanyToUtilityLegacy] PRIMARY KEY CLUSTERED ([Id] ASC) WITH (FILLFACTOR = 90)
);


GO
PRINT N'Creating [dbo].[UtilityLegacy]...';


GO
CREATE TABLE [dbo].[UtilityLegacy] (
    [ID]                      INT           IDENTITY (1, 1) NOT NULL,
    [UtilityCode]             VARCHAR (50)  NOT NULL,
    [FullName]                VARCHAR (100) NOT NULL,
    [ShortName]               VARCHAR (50)  NOT NULL,
    [MarketID]                INT           NOT NULL,
    [DunsNumber]              VARCHAR (30)  NULL,
    [EntityId]                VARCHAR (15)  NULL,
    [EnrollmentLeadDays]      INT           NULL,
    [BillingType]             VARCHAR (15)  NULL,
    [AccountLength]           INT           NULL,
    [AccountNumberPrefix]     VARCHAR (10)  NULL,
    [LeadScreenProcess]       VARCHAR (15)  NULL,
    [DealScreenProcess]       VARCHAR (15)  NULL,
    [PorOption]               VARCHAR (3)   NULL,
    [Field01Label]            VARCHAR (20)  NULL,
    [Field01Type]             VARCHAR (30)  NULL,
    [Field02Label]            VARCHAR (20)  NULL,
    [Field02Type]             VARCHAR (30)  NULL,
    [Field03Label]            VARCHAR (20)  NULL,
    [Field03Type]             VARCHAR (30)  NULL,
    [Field04Label]            VARCHAR (20)  NULL,
    [Field04Type]             VARCHAR (30)  NULL,
    [Field05Label]            VARCHAR (20)  NULL,
    [Field05Type]             VARCHAR (30)  NULL,
    [Field06Label]            VARCHAR (20)  NULL,
    [Field06Type]             VARCHAR (30)  NULL,
    [Field07Label]            VARCHAR (20)  NULL,
    [Field07Type]             VARCHAR (30)  NULL,
    [Field08Label]            VARCHAR (20)  NULL,
    [Field08Type]             VARCHAR (30)  NULL,
    [Field09Label]            VARCHAR (20)  NULL,
    [Field09Type]             VARCHAR (30)  NULL,
    [Field10Label]            VARCHAR (20)  NULL,
    [Field10Type]             VARCHAR (30)  NULL,
    [DateCreated]             DATETIME      NULL,
    [UserName]                NCHAR (200)   NULL,
    [InactiveInd]             CHAR (1)      NULL,
    [ActiveDate]              DATETIME      NULL,
    [ChgStamp]                SMALLINT      NULL,
    [MeterNumberRequired]     SMALLINT      NULL,
    [MeterNumberLength]       SMALLINT      NULL,
    [AnnualUsageMin]          INT           NULL,
    [Qualifier]               VARCHAR (50)  NULL,
    [EdiCapable]              SMALLINT      NULL,
    [WholeSaleMktID]          VARCHAR (50)  NULL,
    [Phone]                   VARCHAR (30)  NULL,
    [RateCodeRequired]        TINYINT       NULL,
    [HasZones]                TINYINT       NULL,
    [ZoneDefault]             INT           NULL,
    [Field11Label]            VARCHAR (20)  NULL,
    [Field11Type]             VARCHAR (30)  NULL,
    [Field12Label]            VARCHAR (20)  NULL,
    [Field12Type]             VARCHAR (30)  NULL,
    [Field13Label]            VARCHAR (20)  NULL,
    [Field13Type]             VARCHAR (30)  NULL,
    [Field14Label]            VARCHAR (20)  NULL,
    [Field14Type]             VARCHAR (30)  NULL,
    [Field15Label]            VARCHAR (20)  NULL,
    [Field15Type]             VARCHAR (30)  NULL,
    [RateCodeFormat]          VARCHAR (20)  NOT NULL,
    [RateCodeFields]          VARCHAR (50)  NOT NULL,
    [LegacyName]              VARCHAR (100) NOT NULL,
    [SSNIsRequired]           BIT           NULL,
    [PricingModeID]           INT           NULL,
    [isIDR_EDI_Capable]       BIT           NULL,
    [HU_RequestType]          NCHAR (10)    NULL,
    [MultipleMeters]          BIT           NULL,
    [MeterReadOverlap]        BIT           NULL,
    [AutoApproval]            BIT           NULL,
    [DeliveryLocationRefID]   INT           NULL,
    [DefaultProfileRefID]     INT           NULL,
    [SettlementLocationRefID] INT           NULL,
    CONSTRAINT [PK_EftUtility] PRIMARY KEY CLUSTERED ([ID] ASC) WITH (FILLFACTOR = 90)
);


GO
PRINT N'Creating [dbo].[UtilityTrip]...';


GO
CREATE TABLE [dbo].[UtilityTrip] (
    [Id]               UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId] UNIQUEIDENTIFIER NOT NULL,
    [TripNumber]       NVARCHAR (255)   NOT NULL,
    [Inactive]         BIT              NOT NULL,
    [CreatedBy]        NVARCHAR (100)   NOT NULL,
    [CreatedDate]      DATETIME         NOT NULL,
    [LastModifiedBy]   NVARCHAR (100)   NOT NULL,
    [LastModifiedDate] DATETIME         NOT NULL,
    CONSTRAINT [PK_UtilityTrip] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Year]...';


GO
CREATE TABLE [dbo].[Year] (
    [Id]               UNIQUEIDENTIFIER NOT NULL,
    [Year]             INT              NOT NULL,
    [Inactive]         BIT              NOT NULL,
    [CreatedBy]        NVARCHAR (100)   NOT NULL,
    [CreatedDate]      DATETIME         NOT NULL,
    [LastModifiedBy]   NVARCHAR (100)   NOT NULL,
    [LastModifiedDate] DATETIME         NOT NULL,
    CONSTRAINT [PK_Year] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditAccountInfoField]...';


GO
CREATE TABLE [dbo].[zAuditAccountInfoField] (
    [IdPrimary]                     UNIQUEIDENTIFIER NOT NULL,
    [Id]                            UNIQUEIDENTIFIER NOT NULL,
    [NameUserFriendly]              NVARCHAR (255)   NOT NULL,
    [NameMachineUnfriendly]         NVARCHAR (255)   NOT NULL,
    [Description]                   NVARCHAR (255)   NOT NULL,
    [Inactive]                      BIT              NOT NULL,
    [CreatedBy]                     NVARCHAR (100)   NOT NULL,
    [CreatedDate]                   DATETIME         NOT NULL,
    [LastModifiedBy]                NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]              DATETIME         NOT NULL,
    [IdPrevious]                    UNIQUEIDENTIFIER NULL,
    [NameUserFriendlyPrevious]      NVARCHAR (255)   NULL,
    [NameMachineUnfriendlyPrevious] NVARCHAR (255)   NULL,
    [DescriptionPrevious]           NVARCHAR (255)   NULL,
    [InactivePrevious]              BIT              NULL,
    [CreatedByPrevious]             NVARCHAR (100)   NULL,
    [CreatedDatePrevious]           DATETIME         NULL,
    [LastModifiedByPrevious]        NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]      DATETIME         NULL,
    [SYS_CHANGE_VERSION]            BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION]   BIGINT           NULL,
    [SYS_CHANGE_OPERATION]          NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]            NVARCHAR (1000)  NULL,
    CONSTRAINT [PK_zAuditAccountInfoField] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditAccountInfoFieldRequired]...';


GO
CREATE TABLE [dbo].[zAuditAccountInfoFieldRequired] (
    [IdPrimary]                   UNIQUEIDENTIFIER NOT NULL,
    [Id]                          UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]            UNIQUEIDENTIFIER NOT NULL,
    [AccountInfoFieldId]          UNIQUEIDENTIFIER NOT NULL,
    [IsRequired]                  BIT              NOT NULL,
    [Inactive]                    BIT              NOT NULL,
    [CreatedBy]                   NVARCHAR (100)   NOT NULL,
    [CreatedDate]                 DATETIME         NOT NULL,
    [LastModifiedBy]              NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]            DATETIME         NOT NULL,
    [IdPrevious]                  UNIQUEIDENTIFIER NULL,
    [UtilityCompanyIdPrevious]    UNIQUEIDENTIFIER NULL,
    [AccountInfoFieldIdPrevious]  UNIQUEIDENTIFIER NULL,
    [IsRequiredPrevious]          BIT              NULL,
    [InactivePrevious]            BIT              NULL,
    [CreatedByPrevious]           NVARCHAR (100)   NULL,
    [CreatedDatePrevious]         DATETIME         NULL,
    [LastModifiedByPrevious]      NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]    DATETIME         NULL,
    [SYS_CHANGE_VERSION]          BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION] BIGINT           NULL,
    [SYS_CHANGE_OPERATION]        NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]          NVARCHAR (1000)  NULL,
    CONSTRAINT [PK_zAuditAccountInfoFieldRequired] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditAccountType]...';


GO
CREATE TABLE [dbo].[zAuditAccountType] (
    [Id]                          UNIQUEIDENTIFIER NOT NULL,
    [Name]                        NVARCHAR (255)   NOT NULL,
    [Description]                 NVARCHAR (255)   NOT NULL,
    [Inactive]                    BIT              NOT NULL,
    [CreatedBy]                   NVARCHAR (100)   NOT NULL,
    [CreatedDate]                 DATETIME         NOT NULL,
    [LastModifiedBy]              NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]            DATETIME         NOT NULL,
    [IdPrevious]                  UNIQUEIDENTIFIER NULL,
    [NamePrevious]                NVARCHAR (255)   NULL,
    [DescriptionPrevious]         NVARCHAR (255)   NULL,
    [InactivePrevious]            BIT              NULL,
    [CreatedByPrevious]           NVARCHAR (100)   NULL,
    [CreatedDatePrevious]         DATETIME         NULL,
    [LastModifiedByPrevious]      NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]    DATETIME         NULL,
    [SYS_CHANGE_VERSION]          BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION] BIGINT           NULL,
    [SYS_CHANGE_OPERATION]        NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]          NVARCHAR (1000)  NULL,
    [IdPrimary]                   UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_zAuditAccountType] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditBillingType]...';


GO
CREATE TABLE [dbo].[zAuditBillingType] (
    [IdPrimary]                   UNIQUEIDENTIFIER NOT NULL,
    [Id]                          UNIQUEIDENTIFIER NOT NULL,
    [Name]                        NVARCHAR (255)   NOT NULL,
    [Description]                 NVARCHAR (255)   NOT NULL,
    [Inactive]                    BIT              NOT NULL,
    [CreatedBy]                   NVARCHAR (100)   NOT NULL,
    [CreatedDate]                 DATETIME         NOT NULL,
    [LastModifiedBy]              NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]            DATETIME         NOT NULL,
    [IdPrevious]                  UNIQUEIDENTIFIER NULL,
    [NamePrevious]                NVARCHAR (255)   NULL,
    [DescriptionPrevious]         NVARCHAR (255)   NULL,
    [InactivePrevious]            BIT              NULL,
    [CreatedByPrevious]           NVARCHAR (100)   NULL,
    [CreatedDatePrevious]         DATETIME         NULL,
    [LastModifiedByPrevious]      NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]    DATETIME         NULL,
    [SYS_CHANGE_VERSION]          BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION] BIGINT           NULL,
    [SYS_CHANGE_OPERATION]        NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]          NVARCHAR (1000)  NULL,
    [EnumValue]                   INT              NOT NULL,
    [EnumValuePrevious]           INT              NULL,
    CONSTRAINT [PK_zAuditBillingType] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditIdrRule]...';


GO
CREATE TABLE [dbo].[zAuditIdrRule] (
    [IdPrimary]                            UNIQUEIDENTIFIER NOT NULL,
    [Id]                                   UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]                     UNIQUEIDENTIFIER NOT NULL,
    [RequestModeTypeId]                    UNIQUEIDENTIFIER NOT NULL,
    [RateClassId]                          UNIQUEIDENTIFIER NULL,
    [LoadProfileId]                        UNIQUEIDENTIFIER NULL,
    [MinUsageMWh]                          INT              NULL,
    [MaxUsageMWh]                          INT              NULL,
    [IsOnEligibleCustomerList]             BIT              NOT NULL,
    [IsHistoricalArchiveAvailable]         BIT              NOT NULL,
    [Inactive]                             BIT              NOT NULL,
    [CreatedBy]                            NVARCHAR (100)   NOT NULL,
    [CreatedDate]                          DATETIME         NOT NULL,
    [LastModifiedBy]                       NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]                     DATETIME         NOT NULL,
    [IdPrevious]                           UNIQUEIDENTIFIER NULL,
    [UtilityCompanyIdPrevious]             UNIQUEIDENTIFIER NULL,
    [RequestModeTypeIdPrevious]            UNIQUEIDENTIFIER NULL,
    [RateClassIdPrevious]                  UNIQUEIDENTIFIER NULL,
    [LoadProfileIdPrevious]                UNIQUEIDENTIFIER NULL,
    [MinUsageMWhPrevious]                  INT              NULL,
    [MaxUsageMWhPrevious]                  INT              NULL,
    [IsOnEligibleCustomerListPrevious]     BIT              NULL,
    [IsHistoricalArchiveAvailablePrevious] BIT              NULL,
    [InactivePrevious]                     BIT              NULL,
    [CreatedByPrevious]                    NVARCHAR (100)   NULL,
    [CreatedDatePrevious]                  DATETIME         NULL,
    [LastModifiedByPrevious]               NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]             DATETIME         NULL,
    [SYS_CHANGE_VERSION]                   BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION]          BIGINT           NULL,
    [SYS_CHANGE_OPERATION]                 NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]                   NVARCHAR (1000)  NULL,
    CONSTRAINT [PK_zAuditIdrRule] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditLoadProfile]...';


GO
CREATE TABLE [dbo].[zAuditLoadProfile] (
    [IdPrimary]                       UNIQUEIDENTIFIER NOT NULL,
    [Id]                              UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]                UNIQUEIDENTIFIER NOT NULL,
    [LpStandardLoadProfileId]         UNIQUEIDENTIFIER NULL,
    [LoadProfileId]                   INT              NULL,
    [LoadProfileCode]                 NVARCHAR (255)   NOT NULL,
    [Description]                     NVARCHAR (255)   NOT NULL,
    [AccountTypeId]                   UNIQUEIDENTIFIER NOT NULL,
    [Inactive]                        BIT              NOT NULL,
    [CreatedBy]                       NVARCHAR (100)   NOT NULL,
    [CreatedDate]                     DATETIME         NOT NULL,
    [LastModifiedBy]                  NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]                DATETIME         NOT NULL,
    [IdPrevious]                      UNIQUEIDENTIFIER NULL,
    [UtilityCompanyIdPrevious]        UNIQUEIDENTIFIER NULL,
    [LpStandardLoadProfileIdPrevious] UNIQUEIDENTIFIER NULL,
    [LoadProfileIdPrevious]           INT              NULL,
    [LoadProfileCodePrevious]         NVARCHAR (255)   NULL,
    [DescriptionPrevious]             NVARCHAR (255)   NULL,
    [AccountTypeIdPrevious]           UNIQUEIDENTIFIER NULL,
    [InactivePrevious]                BIT              NULL,
    [CreatedByPrevious]               NVARCHAR (100)   NULL,
    [CreatedDatePrevious]             DATETIME         NULL,
    [LastModifiedByPrevious]          NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]        DATETIME         NULL,
    [SYS_CHANGE_VERSION]              BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION]     BIGINT           NULL,
    [SYS_CHANGE_OPERATION]            NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]              NVARCHAR (1000)  NULL,
    CONSTRAINT [PK_zAuditLoadProfile] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditLoadProfileAlias]...';


GO
CREATE TABLE [dbo].[zAuditLoadProfileAlias] (
    [IdPrimary]                    UNIQUEIDENTIFIER NOT NULL,
    [Id]                           UNIQUEIDENTIFIER NOT NULL,
    [LoadProfileId]                UNIQUEIDENTIFIER NOT NULL,
    [LoadProfileCodeAlias]         NVARCHAR (255)   NOT NULL,
    [Inactive]                     BIT              NOT NULL,
    [CreatedBy]                    NVARCHAR (100)   NOT NULL,
    [CreatedDate]                  DATETIME         NOT NULL,
    [LastModifiedBy]               NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]             DATETIME         NOT NULL,
    [IdPrevious]                   UNIQUEIDENTIFIER NULL,
    [LoadProfileIdPrevious]        UNIQUEIDENTIFIER NULL,
    [LoadProfileCodeAliasPrevious] NVARCHAR (255)   NULL,
    [InactivePrevious]             BIT              NULL,
    [CreatedByPrevious]            NVARCHAR (100)   NULL,
    [CreatedDatePrevious]          DATETIME         NULL,
    [LastModifiedByPrevious]       NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]     DATETIME         NULL,
    [SYS_CHANGE_VERSION]           BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION]  BIGINT           NULL,
    [SYS_CHANGE_OPERATION]         NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]           NVARCHAR (1000)  NULL,
    CONSTRAINT [PK_zAuditLoadProfileAlias] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditLpApprovedBillingType]...';


GO
CREATE TABLE [dbo].[zAuditLpApprovedBillingType] (
    [IdPrimary]                     UNIQUEIDENTIFIER NOT NULL,
    [Id]                            UNIQUEIDENTIFIER NOT NULL,
    [LpBillingTypeId]               UNIQUEIDENTIFIER NOT NULL,
    [ApprovedBillingTypeId]         UNIQUEIDENTIFIER NOT NULL,
    [Inactive]                      BIT              NOT NULL,
    [CreatedBy]                     NVARCHAR (100)   NOT NULL,
    [CreatedDate]                   DATETIME         NOT NULL,
    [LastModifiedBy]                NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]              DATETIME         NOT NULL,
    [IdPrevious]                    UNIQUEIDENTIFIER NULL,
    [LpBillingTypeIdPrevious]       UNIQUEIDENTIFIER NULL,
    [ApprovedBillingTypeIdPrevious] UNIQUEIDENTIFIER NULL,
    [InactivePrevious]              BIT              NULL,
    [CreatedByPrevious]             NVARCHAR (100)   NULL,
    [CreatedDatePrevious]           DATETIME         NULL,
    [LastModifiedByPrevious]        NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]      DATETIME         NULL,
    [SYS_CHANGE_VERSION]            BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION]   BIGINT           NULL,
    [SYS_CHANGE_OPERATION]          NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]            NVARCHAR (1000)  NULL,
    CONSTRAINT [PK_zAuditLpApprovedBillingType] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditLpBillingType]...';


GO
CREATE TABLE [dbo].[zAuditLpBillingType] (
    [IdPrimary]                    UNIQUEIDENTIFIER NOT NULL,
    [Id]                           UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]             UNIQUEIDENTIFIER NOT NULL,
    [PorDriverId]                  UNIQUEIDENTIFIER NOT NULL,
    [RateClassId]                  UNIQUEIDENTIFIER NULL,
    [LoadProfileId]                UNIQUEIDENTIFIER NULL,
    [TariffCodeId]                 UNIQUEIDENTIFIER NULL,
    [DefaultBillingTypeId]         UNIQUEIDENTIFIER NOT NULL,
    [Inactive]                     BIT              NOT NULL,
    [CreatedBy]                    NVARCHAR (100)   NOT NULL,
    [CreatedDate]                  DATETIME         NOT NULL,
    [LastModifiedBy]               NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]             DATETIME         NOT NULL,
    [IdPrevious]                   UNIQUEIDENTIFIER NULL,
    [UtilityCompanyIdPrevious]     UNIQUEIDENTIFIER NULL,
    [PorDriverIdPrevious]          UNIQUEIDENTIFIER NULL,
    [RateClassIdPrevious]          UNIQUEIDENTIFIER NULL,
    [LoadProfileIdPrevious]        UNIQUEIDENTIFIER NULL,
    [TariffCodeIdPrevious]         UNIQUEIDENTIFIER NULL,
    [DefaultBillingTypeIdPrevious] UNIQUEIDENTIFIER NULL,
    [InactivePrevious]             BIT              NULL,
    [CreatedByPrevious]            NVARCHAR (100)   NULL,
    [CreatedDatePrevious]          DATETIME         NULL,
    [LastModifiedByPrevious]       NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]     DATETIME         NULL,
    [SYS_CHANGE_VERSION]           BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION]  BIGINT           NULL,
    [SYS_CHANGE_OPERATION]         NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]           NVARCHAR (1000)  NULL,
    CONSTRAINT [PK_zAuditLpBillingType] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditLpStandardLoadProfile]...';


GO
CREATE TABLE [dbo].[zAuditLpStandardLoadProfile] (
    [IdPrimary]                         UNIQUEIDENTIFIER NOT NULL,
    [Id]                                UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]                  UNIQUEIDENTIFIER NOT NULL,
    [LpStandardLoadProfileCode]         NVARCHAR (255)   NOT NULL,
    [Inactive]                          BIT              NOT NULL,
    [CreatedBy]                         NVARCHAR (100)   NOT NULL,
    [CreatedDate]                       DATETIME         NOT NULL,
    [LastModifiedBy]                    NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]                  DATETIME         NOT NULL,
    [IdPrevious]                        UNIQUEIDENTIFIER NULL,
    [UtilityCompanyIdPrevious]          UNIQUEIDENTIFIER NULL,
    [LpStandardLoadProfileCodePrevious] NVARCHAR (255)   NULL,
    [InactivePrevious]                  BIT              NULL,
    [CreatedByPrevious]                 NVARCHAR (100)   NULL,
    [CreatedDatePrevious]               DATETIME         NULL,
    [LastModifiedByPrevious]            NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]          DATETIME         NULL,
    [SYS_CHANGE_VERSION]                BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION]       BIGINT           NULL,
    [SYS_CHANGE_OPERATION]              NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]                NVARCHAR (1000)  NULL,
    CONSTRAINT [PK_zAuditLpStandardLoadProfile] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditLpStandardRateClass]...';


GO
CREATE TABLE [dbo].[zAuditLpStandardRateClass] (
    [IdPrimary]                       UNIQUEIDENTIFIER NOT NULL,
    [Id]                              UNIQUEIDENTIFIER NOT NULL,
    [LpStandardRateClassCode]         NVARCHAR (255)   NOT NULL,
    [Inactive]                        BIT              NOT NULL,
    [CreatedBy]                       NVARCHAR (100)   NOT NULL,
    [CreatedDate]                     DATETIME         NOT NULL,
    [LastModifiedBy]                  NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]                DATETIME         NOT NULL,
    [IdPrevious]                      UNIQUEIDENTIFIER NULL,
    [LpStandardRateClassCodePrevious] NVARCHAR (255)   NULL,
    [InactivePrevious]                BIT              NULL,
    [CreatedByPrevious]               NVARCHAR (100)   NULL,
    [CreatedDatePrevious]             DATETIME         NULL,
    [LastModifiedByPrevious]          NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]        DATETIME         NULL,
    [SYS_CHANGE_VERSION]              BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION]     BIGINT           NULL,
    [SYS_CHANGE_OPERATION]            NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]              NVARCHAR (1000)  NULL,
    [UtilityCompanyId]                UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyIdPrevious]        UNIQUEIDENTIFIER NULL,
    CONSTRAINT [PK_zAuditLpStandardRateClass] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditLpStandardTariffCode]...';


GO
CREATE TABLE [dbo].[zAuditLpStandardTariffCode] (
    [IdPrimary]                        UNIQUEIDENTIFIER NOT NULL,
    [Id]                               UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]                 UNIQUEIDENTIFIER NOT NULL,
    [LpStandardTariffCodeCode]         NVARCHAR (255)   NOT NULL,
    [Inactive]                         BIT              NOT NULL,
    [CreatedBy]                        NVARCHAR (100)   NOT NULL,
    [CreatedDate]                      DATETIME         NOT NULL,
    [LastModifiedBy]                   NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]                 DATETIME         NOT NULL,
    [IdPrevious]                       UNIQUEIDENTIFIER NULL,
    [UtilityCompanyIdPrevious]         UNIQUEIDENTIFIER NULL,
    [LpStandardTariffCodeCodePrevious] NVARCHAR (255)   NULL,
    [InactivePrevious]                 BIT              NULL,
    [CreatedByPrevious]                NVARCHAR (100)   NULL,
    [CreatedDatePrevious]              DATETIME         NULL,
    [LastModifiedByPrevious]           NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]         DATETIME         NULL,
    [SYS_CHANGE_VERSION]               BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION]      BIGINT           NULL,
    [SYS_CHANGE_OPERATION]             NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]               NVARCHAR (1000)  NULL,
    CONSTRAINT [PK_zAuditLpStandardTariffCode] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditLpUtilityOfferedBillingType]...';


GO
CREATE TABLE [dbo].[zAuditLpUtilityOfferedBillingType] (
    [IdPrimary]                           UNIQUEIDENTIFIER NOT NULL,
    [Id]                                  UNIQUEIDENTIFIER NOT NULL,
    [LpBillingTypeId]                     UNIQUEIDENTIFIER NOT NULL,
    [UtilityOfferedBillingTypeId]         UNIQUEIDENTIFIER NOT NULL,
    [Inactive]                            BIT              NOT NULL,
    [CreatedBy]                           NVARCHAR (100)   NOT NULL,
    [CreatedDate]                         DATETIME         NOT NULL,
    [LastModifiedBy]                      NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]                    DATETIME         NOT NULL,
    [IdPrevious]                          UNIQUEIDENTIFIER NULL,
    [LpBillingTypeIdPrevious]             UNIQUEIDENTIFIER NULL,
    [UtilityOfferedBillingTypeIdPrevious] UNIQUEIDENTIFIER NULL,
    [InactivePrevious]                    BIT              NULL,
    [CreatedByPrevious]                   NVARCHAR (100)   NULL,
    [CreatedDatePrevious]                 DATETIME         NULL,
    [LastModifiedByPrevious]              NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]            DATETIME         NULL,
    [SYS_CHANGE_VERSION]                  BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION]         BIGINT           NULL,
    [SYS_CHANGE_OPERATION]                NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]                  NVARCHAR (1000)  NULL,
    CONSTRAINT [PK_zAuditLpUtilityOfferedBillingType] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditMeterReadSchedule]...';


GO
CREATE TABLE [dbo].[zAuditMeterReadSchedule] (
    [IdPrimary]                   UNIQUEIDENTIFIER NOT NULL,
    [Id]                          UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]            UNIQUEIDENTIFIER NOT NULL,
    [UtilityTripId]               UNIQUEIDENTIFIER NOT NULL,
    [YearId]                      UNIQUEIDENTIFIER NOT NULL,
    [MonthId]                     UNIQUEIDENTIFIER NOT NULL,
    [ReadDate]                    DATETIME         NOT NULL,
    [Inactive]                    BIT              NOT NULL,
    [CreatedBy]                   NVARCHAR (100)   NOT NULL,
    [CreatedDate]                 DATETIME         NOT NULL,
    [LastModifiedBy]              NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]            DATETIME         NOT NULL,
    [IdPrevious]                  UNIQUEIDENTIFIER NULL,
    [UtilityCompanyIdPrevious]    UNIQUEIDENTIFIER NULL,
    [UtilityTripIdPrevious]       UNIQUEIDENTIFIER NULL,
    [YearIdPrevious]              UNIQUEIDENTIFIER NULL,
    [MonthIdPrevious]             UNIQUEIDENTIFIER NULL,
    [ReadDatePrevious]            DATETIME         NULL,
    [InactivePrevious]            BIT              NULL,
    [CreatedByPrevious]           NVARCHAR (100)   NULL,
    [CreatedDatePrevious]         DATETIME         NULL,
    [LastModifiedByPrevious]      NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]    DATETIME         NULL,
    [SYS_CHANGE_VERSION]          BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION] BIGINT           NULL,
    [SYS_CHANGE_OPERATION]        NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]          NVARCHAR (1000)  NULL,
    CONSTRAINT [PK_zAuditMeterReadSchedule] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditMeterType]...';


GO
CREATE TABLE [dbo].[zAuditMeterType] (
    [Id]                          UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]            UNIQUEIDENTIFIER NULL,
    [MeterTypeCode]               NVARCHAR (255)   NOT NULL,
    [Description]                 NVARCHAR (255)   NOT NULL,
    [AccountTypeId]               UNIQUEIDENTIFIER NOT NULL,
    [LpStandardMeterType]         NVARCHAR (255)   NOT NULL,
    [Sequence]                    INT              NOT NULL,
    [Inactive]                    BIT              NOT NULL,
    [CreatedBy]                   NVARCHAR (100)   NOT NULL,
    [CreatedDate]                 DATETIME         NOT NULL,
    [LastModifiedBy]              NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]            DATETIME         NOT NULL,
    [IdPrevious]                  UNIQUEIDENTIFIER NULL,
    [UtilityCompanyIdPrevious]    UNIQUEIDENTIFIER NULL,
    [MeterTypeCodePrevious]       NVARCHAR (255)   NULL,
    [DescriptionPrevious]         NVARCHAR (255)   NULL,
    [AccountTypeIdPrevious]       UNIQUEIDENTIFIER NULL,
    [LpStandardMeterTypePrevious] NVARCHAR (255)   NULL,
    [SequencePrevious]            INT              NULL,
    [InactivePrevious]            BIT              NULL,
    [CreatedByPrevious]           NVARCHAR (100)   NULL,
    [CreatedDatePrevious]         DATETIME         NULL,
    [LastModifiedByPrevious]      NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]    DATETIME         NULL,
    [SYS_CHANGE_VERSION]          BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION] BIGINT           NULL,
    [SYS_CHANGE_OPERATION]        NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]          NVARCHAR (1000)  NULL,
    [IdPrimary]                   UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_zAuditMeterType] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditPurchaseOfReceivables]...';


GO
CREATE TABLE [dbo].[zAuditPurchaseOfReceivables] (
    [IdPrimary]                         UNIQUEIDENTIFIER NOT NULL,
    [Id]                                UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]                  UNIQUEIDENTIFIER NOT NULL,
    [PorDriverId]                       UNIQUEIDENTIFIER NOT NULL,
    [RateClassId]                       UNIQUEIDENTIFIER NULL,
    [LoadProfileId]                     UNIQUEIDENTIFIER NULL,
    [TariffCodeId]                      UNIQUEIDENTIFIER NULL,
    [IsPorOffered]                      BIT              NOT NULL,
    [IsPorParticipated]                 BIT              NOT NULL,
    [PorRecourseId]                     UNIQUEIDENTIFIER NOT NULL,
    [IsPorAssurance]                    BIT              NOT NULL,
    [PorDiscountRate]                   DECIMAL (18)     NOT NULL,
    [PorFlatFee]                        DECIMAL (18)     NOT NULL,
    [PorDiscountEffectiveDate]          DATETIME         NOT NULL,
    [PorDiscountExpirationDate]         DATETIME         NULL,
    [Inactive]                          BIT              NOT NULL,
    [CreatedBy]                         NVARCHAR (100)   NOT NULL,
    [CreatedDate]                       DATETIME         NOT NULL,
    [LastModifiedBy]                    NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]                  DATETIME         NOT NULL,
    [IdPrevious]                        UNIQUEIDENTIFIER NULL,
    [UtilityCompanyIdPrevious]          UNIQUEIDENTIFIER NULL,
    [PorDriverIdPrevious]               UNIQUEIDENTIFIER NULL,
    [RateClassIdPrevious]               UNIQUEIDENTIFIER NULL,
    [LoadProfileIdPrevious]             UNIQUEIDENTIFIER NULL,
    [TariffCodeIdPrevious]              UNIQUEIDENTIFIER NULL,
    [IsPorOfferedPrevious]              BIT              NULL,
    [IsPorParticipatedPrevious]         BIT              NULL,
    [PorRecourseIdPrevious]             UNIQUEIDENTIFIER NULL,
    [IsPorAssurancePrevious]            BIT              NULL,
    [PorDiscountRatePrevious]           DECIMAL (18)     NULL,
    [PorFlatFeePrevious]                DECIMAL (18)     NULL,
    [PorDiscountEffectiveDatePrevious]  DATETIME         NULL,
    [PorDiscountExpirationDatePrevious] DATETIME         NULL,
    [InactivePrevious]                  BIT              NULL,
    [CreatedByPrevious]                 NVARCHAR (100)   NULL,
    [CreatedDatePrevious]               DATETIME         NULL,
    [LastModifiedByPrevious]            NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]          DATETIME         NULL,
    [SYS_CHANGE_VERSION]                BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION]       BIGINT           NULL,
    [SYS_CHANGE_OPERATION]              NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]                NVARCHAR (1000)  NULL,
    CONSTRAINT [PK_zAuditPurchaseOfReceivables] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditRateClass]...';


GO
CREATE TABLE [dbo].[zAuditRateClass] (
    [IdPrimary]                     UNIQUEIDENTIFIER NOT NULL,
    [Id]                            UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]              UNIQUEIDENTIFIER NOT NULL,
    [LpStandardRateClassId]         UNIQUEIDENTIFIER NULL,
    [RateClassId]                   INT              NULL,
    [RateClassCode]                 NVARCHAR (255)   NOT NULL,
    [Description]                   NVARCHAR (255)   NOT NULL,
    [AccountTypeId]                 UNIQUEIDENTIFIER NOT NULL,
    [Inactive]                      BIT              NOT NULL,
    [CreatedBy]                     NVARCHAR (100)   NOT NULL,
    [CreatedDate]                   DATETIME         NOT NULL,
    [LastModifiedBy]                NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]              DATETIME         NOT NULL,
    [IdPrevious]                    UNIQUEIDENTIFIER NULL,
    [UtilityCompanyIdPrevious]      UNIQUEIDENTIFIER NULL,
    [LpStandardRateClassIdPrevious] UNIQUEIDENTIFIER NULL,
    [RateClassIdPrevious]           INT              NULL,
    [RateClassCodePrevious]         NVARCHAR (255)   NULL,
    [DescriptionPrevious]           NVARCHAR (255)   NULL,
    [AccountTypeIdPrevious]         UNIQUEIDENTIFIER NULL,
    [InactivePrevious]              BIT              NULL,
    [CreatedByPrevious]             NVARCHAR (100)   NULL,
    [CreatedDatePrevious]           DATETIME         NULL,
    [LastModifiedByPrevious]        NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]      DATETIME         NULL,
    [SYS_CHANGE_VERSION]            BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION]   BIGINT           NULL,
    [SYS_CHANGE_OPERATION]          NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]            NVARCHAR (1000)  NULL,
    CONSTRAINT [PK_zAuditRateClass] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditRateClassAlias]...';


GO
CREATE TABLE [dbo].[zAuditRateClassAlias] (
    [IdPrimary]                   UNIQUEIDENTIFIER NOT NULL,
    [Id]                          UNIQUEIDENTIFIER NOT NULL,
    [RateClassId]                 UNIQUEIDENTIFIER NOT NULL,
    [RateClassCodeAlias]          NVARCHAR (255)   NOT NULL,
    [Inactive]                    BIT              NOT NULL,
    [CreatedBy]                   NVARCHAR (100)   NOT NULL,
    [CreatedDate]                 DATETIME         NOT NULL,
    [LastModifiedBy]              NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]            DATETIME         NOT NULL,
    [IdPrevious]                  UNIQUEIDENTIFIER NULL,
    [RateClassIdPrevious]         UNIQUEIDENTIFIER NULL,
    [RateClassCodeAliasPrevious]  NVARCHAR (255)   NULL,
    [InactivePrevious]            BIT              NULL,
    [CreatedByPrevious]           NVARCHAR (100)   NULL,
    [CreatedDatePrevious]         DATETIME         NULL,
    [LastModifiedByPrevious]      NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]    DATETIME         NULL,
    [SYS_CHANGE_VERSION]          BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION] BIGINT           NULL,
    [SYS_CHANGE_OPERATION]        NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]          NVARCHAR (1000)  NULL,
    CONSTRAINT [PK_zAuditRateClassAlias] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditRequestModeEnrollmentType]...';


GO
CREATE TABLE [dbo].[zAuditRequestModeEnrollmentType] (
    [Id]                          UNIQUEIDENTIFIER NOT NULL,
    [Name]                        NVARCHAR (50)    NOT NULL,
    [Description]                 NVARCHAR (255)   NOT NULL,
    [Inactive]                    BIT              NOT NULL,
    [CreatedBy]                   NVARCHAR (100)   NOT NULL,
    [CreatedDate]                 DATETIME         NOT NULL,
    [LastModifiedBy]              NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]            DATETIME         NOT NULL,
    [IdPrevious]                  UNIQUEIDENTIFIER NULL,
    [NamePrevious]                NVARCHAR (50)    NULL,
    [DescriptionPrevious]         NVARCHAR (255)   NULL,
    [InactivePrevious]            BIT              NULL,
    [CreatedByPrevious]           NVARCHAR (100)   NULL,
    [CreatedDatePrevious]         DATETIME         NULL,
    [LastModifiedByPrevious]      NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]    DATETIME         NULL,
    [SYS_CHANGE_VERSION]          BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION] BIGINT           NULL,
    [SYS_CHANGE_OPERATION]        NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]          NVARCHAR (1000)  NULL,
    [EnumValue]                   INT              NOT NULL,
    [EnumValuePrevious]           INT              NULL
);


GO
PRINT N'Creating [dbo].[zAuditRequestModeHistoricalUsage]...';


GO
CREATE TABLE [dbo].[zAuditRequestModeHistoricalUsage] (
    [Id]                                                                UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]                                                  UNIQUEIDENTIFIER NOT NULL,
    [RequestModeEnrollmentTypeId]                                       UNIQUEIDENTIFIER NOT NULL,
    [RequestModeTypeId]                                                 UNIQUEIDENTIFIER NOT NULL,
    [AddressForPreEnrollment]                                           NVARCHAR (200)   NOT NULL,
    [EmailTemplate]                                                     NVARCHAR (2000)  NULL,
    [Instructions]                                                      NVARCHAR (500)   NOT NULL,
    [UtilitysSlaHistoricalUsageResponseInDays]                          INT              NOT NULL,
    [LibertyPowersSlaFollowUpHistoricalUsageResponseInDays]             INT              NOT NULL,
    [IsLoaRequired]                                                     BIT              NOT NULL,
    [IcapAndHuPreEnrollmentRequestModeDifferenceIdentifiedAndOkdByUser] BIT              NULL,
    [Inactive]                                                          BIT              NOT NULL,
    [CreatedBy]                                                         NVARCHAR (100)   NOT NULL,
    [CreatedDate]                                                       DATETIME         NOT NULL,
    [LastModifiedBy]                                                    NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]                                                  DATETIME         NOT NULL,
    [IdPrevious]                                                        UNIQUEIDENTIFIER NULL,
    [UtilityCompanyIdPrevious]                                          UNIQUEIDENTIFIER NULL,
    [RequestModeEnrollmentTypeIdPrevious]                               UNIQUEIDENTIFIER NULL,
    [RequestModeTypeIdPrevious]                                         UNIQUEIDENTIFIER NULL,
    [AddressForPreEnrollmentPrevious]                                   NVARCHAR (200)   NULL,
    [EmailTemplatePrevious]                                             NVARCHAR (2000)  NULL,
    [InstructionsPrevious]                                              NVARCHAR (500)   NULL,
    [UtilitysSlaHistoricalUsageResponseInDaysPrevious]                  INT              NULL,
    [LibertyPowersSlaFollowUpHistoricalUsageResponseInDaysPrevious]     INT              NULL,
    [IsLoaRequiredPrevious]                                             BIT              NULL,
    [InactivePrevious]                                                  BIT              NULL,
    [CreatedByPrevious]                                                 NVARCHAR (100)   NULL,
    [CreatedDatePrevious]                                               DATETIME         NULL,
    [LastModifiedByPrevious]                                            NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]                                          DATETIME         NULL,
    [SYS_CHANGE_VERSION]                                                BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION]                                       BIGINT           NULL,
    [SYS_CHANGE_OPERATION]                                              NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]                                                NVARCHAR (1000)  NULL,
    [IdPrimary]                                                         UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_zAuditRequestModeHistoricalUsage] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditRequestModeIcap]...';


GO
CREATE TABLE [dbo].[zAuditRequestModeIcap] (
    [Id]                                                                UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]                                                  UNIQUEIDENTIFIER NOT NULL,
    [RequestModeEnrollmentTypeId]                                       UNIQUEIDENTIFIER NOT NULL,
    [RequestModeTypeId]                                                 UNIQUEIDENTIFIER NOT NULL,
    [AddressForPreEnrollment]                                           NVARCHAR (200)   NOT NULL,
    [EmailTemplate]                                                     NVARCHAR (2000)  NULL,
    [Instructions]                                                      NVARCHAR (500)   NOT NULL,
    [UtilitysSlaIcapResponseInDays]                                     INT              NOT NULL,
    [LibertyPowersSlaFollowUpIcapResponseInDays]                        INT              NOT NULL,
    [IsLoaRequired]                                                     BIT              NOT NULL,
    [IcapAndHuPreEnrollmentRequestModeDifferenceIdentifiedAndOkdByUser] BIT              NULL,
    [Inactive]                                                          BIT              NOT NULL,
    [CreatedBy]                                                         NVARCHAR (100)   NOT NULL,
    [CreatedDate]                                                       DATETIME         NOT NULL,
    [LastModifiedBy]                                                    NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]                                                  DATETIME         NOT NULL,
    [IdPrevious]                                                        UNIQUEIDENTIFIER NULL,
    [UtilityCompanyIdPrevious]                                          UNIQUEIDENTIFIER NULL,
    [RequestModeEnrollmentTypeIdPrevious]                               UNIQUEIDENTIFIER NULL,
    [RequestModeTypeIdPrevious]                                         UNIQUEIDENTIFIER NULL,
    [AddressForPreEnrollmentPrevious]                                   NVARCHAR (200)   NULL,
    [EmailTemplatePrevious]                                             NVARCHAR (2000)  NULL,
    [InstructionsPrevious]                                              NVARCHAR (500)   NULL,
    [UtilitysSlaIcapResponseInDaysPrevious]                             INT              NULL,
    [LibertyPowersSlaFollowUpIcapResponseInDaysPrevious]                INT              NULL,
    [IsLoaRequiredPrevious]                                             BIT              NULL,
    [InactivePrevious]                                                  BIT              NULL,
    [CreatedByPrevious]                                                 NVARCHAR (100)   NULL,
    [CreatedDatePrevious]                                               DATETIME         NULL,
    [LastModifiedByPrevious]                                            NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]                                          DATETIME         NULL,
    [SYS_CHANGE_VERSION]                                                BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION]                                       BIGINT           NULL,
    [SYS_CHANGE_OPERATION]                                              NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]                                                NVARCHAR (1000)  NULL,
    [IdPrimary]                                                         UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_zAuditRequestModeIcap] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditRequestModeIdr]...';


GO
CREATE TABLE [dbo].[zAuditRequestModeIdr] (
    [Id]                                                UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]                                  UNIQUEIDENTIFIER NOT NULL,
    [RequestModeEnrollmentTypeId]                       UNIQUEIDENTIFIER NOT NULL,
    [RequestModeTypeId]                                 UNIQUEIDENTIFIER NOT NULL,
    [AddressForPreEnrollment]                           NVARCHAR (255)   NOT NULL,
    [EmailTemplate]                                     NVARCHAR (2000)  NOT NULL,
    [Instructions]                                      NVARCHAR (500)   NOT NULL,
    [UtilitysSlaIdrResponseInDays]                      INT              NOT NULL,
    [LibertyPowersSlaFollowUpIdrResponseInDays]         INT              NOT NULL,
    [IsLoaRequired]                                     BIT              NOT NULL,
    [RequestCostAccount]                                MONEY            NOT NULL,
    [Inactive]                                          BIT              NOT NULL,
    [CreatedBy]                                         NVARCHAR (100)   NOT NULL,
    [CreatedDate]                                       DATETIME         NOT NULL,
    [LastModifiedBy]                                    NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]                                  DATETIME         NOT NULL,
    [IdPrevious]                                        UNIQUEIDENTIFIER NULL,
    [UtilityCompanyIdPrevious]                          UNIQUEIDENTIFIER NULL,
    [RequestModeEnrollmentTypeIdPrevious]               UNIQUEIDENTIFIER NULL,
    [RequestModeTypeIdPrevious]                         UNIQUEIDENTIFIER NULL,
    [AddressForPreEnrollmentPrevious]                   NVARCHAR (255)   NULL,
    [EmailTemplatePrevious]                             NVARCHAR (2000)  NULL,
    [InstructionsPrevious]                              NVARCHAR (500)   NULL,
    [UtilitysSlaIdrResponseInDaysPrevious]              INT              NULL,
    [LibertyPowersSlaFollowUpIdrResponseInDaysPrevious] INT              NULL,
    [IsLoaRequiredPrevious]                             BIT              NULL,
    [RequestCostAccountPrevious]                        MONEY            NULL,
    [InactivePrevious]                                  BIT              NULL,
    [CreatedByPrevious]                                 NVARCHAR (100)   NULL,
    [CreatedDatePrevious]                               DATETIME         NULL,
    [LastModifiedByPrevious]                            NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]                          DATETIME         NULL,
    [SYS_CHANGE_VERSION]                                BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION]                       BIGINT           NULL,
    [SYS_CHANGE_OPERATION]                              NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]                                NVARCHAR (1000)  NULL,
    [IdPrimary]                                         UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_zAuditRequestModeIdr] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditRequestModeType]...';


GO
CREATE TABLE [dbo].[zAuditRequestModeType] (
    [Id]                          UNIQUEIDENTIFIER NOT NULL,
    [Name]                        NVARCHAR (50)    NOT NULL,
    [Description]                 NVARCHAR (255)   NOT NULL,
    [Inactive]                    BIT              NOT NULL,
    [CreatedBy]                   NVARCHAR (100)   NOT NULL,
    [CreatedDate]                 DATETIME         NOT NULL,
    [LastModifiedBy]              NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]            DATETIME         NOT NULL,
    [IdPrevious]                  UNIQUEIDENTIFIER NULL,
    [NamePrevious]                NVARCHAR (50)    NULL,
    [DescriptionPrevious]         NVARCHAR (255)   NULL,
    [InactivePrevious]            BIT              NULL,
    [CreatedByPrevious]           NVARCHAR (100)   NULL,
    [CreatedDatePrevious]         DATETIME         NULL,
    [LastModifiedByPrevious]      NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]    DATETIME         NULL,
    [SYS_CHANGE_VERSION]          BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION] BIGINT           NULL,
    [SYS_CHANGE_OPERATION]        NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]          NVARCHAR (1000)  NULL,
    [IdPrimary]                   UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_zAuditRequestModeType] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditRequestModeTypeGenre]...';


GO
CREATE TABLE [dbo].[zAuditRequestModeTypeGenre] (
    [Id]                          UNIQUEIDENTIFIER NOT NULL,
    [Name]                        NVARCHAR (50)    NOT NULL,
    [Description]                 NVARCHAR (255)   NOT NULL,
    [Inactive]                    BIT              NOT NULL,
    [CreatedBy]                   NVARCHAR (100)   NOT NULL,
    [CreatedDate]                 DATETIME         NOT NULL,
    [LastModifiedBy]              NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]            DATETIME         NOT NULL,
    [IdPrevious]                  UNIQUEIDENTIFIER NULL,
    [NamePrevious]                NVARCHAR (50)    NULL,
    [DescriptionPrevious]         NVARCHAR (255)   NULL,
    [InactivePrevious]            BIT              NULL,
    [CreatedByPrevious]           NVARCHAR (100)   NULL,
    [CreatedDatePrevious]         DATETIME         NULL,
    [LastModifiedByPrevious]      NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]    DATETIME         NULL,
    [SYS_CHANGE_VERSION]          BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION] BIGINT           NULL,
    [SYS_CHANGE_OPERATION]        NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]          NVARCHAR (1000)  NULL,
    [IdPrimary]                   UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_zAuditRequestModeTypeGenre] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditRequestModeTypeToRequestModeEnrollmentType]...';


GO
CREATE TABLE [dbo].[zAuditRequestModeTypeToRequestModeEnrollmentType] (
    [Id]                                  UNIQUEIDENTIFIER NOT NULL,
    [RequestModeTypeId]                   UNIQUEIDENTIFIER NOT NULL,
    [RequestModeEnrollmentTypeId]         UNIQUEIDENTIFIER NOT NULL,
    [Inactive]                            BIT              NOT NULL,
    [CreatedBy]                           NVARCHAR (100)   NOT NULL,
    [CreatedDate]                         DATETIME         NOT NULL,
    [LastModifiedBy]                      NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]                    DATETIME         NOT NULL,
    [IdPrevious]                          UNIQUEIDENTIFIER NULL,
    [RequestModeTypeIdPrevious]           UNIQUEIDENTIFIER NULL,
    [RequestModeEnrollmentTypeIdPrevious] UNIQUEIDENTIFIER NULL,
    [InactivePrevious]                    BIT              NULL,
    [CreatedByPrevious]                   NVARCHAR (100)   NULL,
    [CreatedDatePrevious]                 DATETIME         NULL,
    [LastModifiedByPrevious]              NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]            DATETIME         NULL,
    [SYS_CHANGE_VERSION]                  BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION]         BIGINT           NULL,
    [SYS_CHANGE_OPERATION]                NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]                  NVARCHAR (1000)  NULL,
    [IdPrimary]                           UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_zAuditRequestModeTypeToRequestModeEnrollmentType] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditRequestModeTypeToRequestModeTypeGenre]...';


GO
CREATE TABLE [dbo].[zAuditRequestModeTypeToRequestModeTypeGenre] (
    [Id]                             UNIQUEIDENTIFIER NOT NULL,
    [RequestModeTypeId]              UNIQUEIDENTIFIER NOT NULL,
    [RequestModeTypeGenreId]         UNIQUEIDENTIFIER NOT NULL,
    [Inactive]                       BIT              NOT NULL,
    [CreatedBy]                      NVARCHAR (100)   NOT NULL,
    [CreatedDate]                    DATETIME         NOT NULL,
    [LastModifiedBy]                 NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]               DATETIME         NOT NULL,
    [IdPrevious]                     UNIQUEIDENTIFIER NULL,
    [RequestModeTypeIdPrevious]      UNIQUEIDENTIFIER NULL,
    [RequestModeTypeGenreIdPrevious] UNIQUEIDENTIFIER NULL,
    [InactivePrevious]               BIT              NULL,
    [CreatedByPrevious]              NVARCHAR (100)   NULL,
    [CreatedDatePrevious]            DATETIME         NULL,
    [LastModifiedByPrevious]         NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]       DATETIME         NULL,
    [SYS_CHANGE_VERSION]             BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION]    BIGINT           NULL,
    [SYS_CHANGE_OPERATION]           NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]             NVARCHAR (1000)  NULL,
    [IdPrimary]                      UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_zAuditRequestModeTypeToRequestModeTypeGenre] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditServiceClass]...';


GO
CREATE TABLE [dbo].[zAuditServiceClass] (
    [Id]                             UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]               UNIQUEIDENTIFIER NULL,
    [ServiceClassCode]               NVARCHAR (255)   NOT NULL,
    [Description]                    NVARCHAR (255)   NOT NULL,
    [AccountTypeId]                  UNIQUEIDENTIFIER NOT NULL,
    [LpStandardServiceClass]         NVARCHAR (255)   NOT NULL,
    [Inactive]                       BIT              NOT NULL,
    [CreatedBy]                      NVARCHAR (100)   NOT NULL,
    [CreatedDate]                    DATETIME         NOT NULL,
    [LastModifiedBy]                 NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]               DATETIME         NOT NULL,
    [IdPrevious]                     UNIQUEIDENTIFIER NULL,
    [UtilityCompanyIdPrevious]       UNIQUEIDENTIFIER NULL,
    [ServiceClassCodePrevious]       NVARCHAR (255)   NULL,
    [DescriptionPrevious]            NVARCHAR (255)   NULL,
    [AccountTypeIdPrevious]          UNIQUEIDENTIFIER NULL,
    [LpStandardServiceClassPrevious] NVARCHAR (255)   NULL,
    [InactivePrevious]               BIT              NULL,
    [CreatedByPrevious]              NVARCHAR (100)   NULL,
    [CreatedDatePrevious]            DATETIME         NULL,
    [LastModifiedByPrevious]         NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]       DATETIME         NULL,
    [SYS_CHANGE_VERSION]             BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION]    BIGINT           NULL,
    [SYS_CHANGE_OPERATION]           NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]             NVARCHAR (1000)  NULL,
    [IdPrimary]                      UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_zAuditServiceClass] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditTariffCode]...';


GO
CREATE TABLE [dbo].[zAuditTariffCode] (
    [IdPrimary]                      UNIQUEIDENTIFIER NOT NULL,
    [Id]                             UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]               UNIQUEIDENTIFIER NOT NULL,
    [LpStandardTariffCodeId]         UNIQUEIDENTIFIER NULL,
    [TariffCodeId]                   INT              NULL,
    [TariffCodeCode]                 NVARCHAR (255)   NOT NULL,
    [Description]                    NVARCHAR (255)   NOT NULL,
    [AccountTypeId]                  UNIQUEIDENTIFIER NOT NULL,
    [Inactive]                       BIT              NOT NULL,
    [CreatedBy]                      NVARCHAR (100)   NOT NULL,
    [CreatedDate]                    DATETIME         NOT NULL,
    [LastModifiedBy]                 NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]               DATETIME         NOT NULL,
    [IdPrevious]                     UNIQUEIDENTIFIER NULL,
    [UtilityCompanyIdPrevious]       UNIQUEIDENTIFIER NULL,
    [LpStandardTariffCodeIdPrevious] UNIQUEIDENTIFIER NULL,
    [TariffCodeIdPrevious]           INT              NULL,
    [TariffCodeCodePrevious]         NVARCHAR (255)   NULL,
    [DescriptionPrevious]            NVARCHAR (255)   NULL,
    [AccountTypeIdPrevious]          UNIQUEIDENTIFIER NULL,
    [InactivePrevious]               BIT              NULL,
    [CreatedByPrevious]              NVARCHAR (100)   NULL,
    [CreatedDatePrevious]            DATETIME         NULL,
    [LastModifiedByPrevious]         NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]       DATETIME         NULL,
    [SYS_CHANGE_VERSION]             BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION]    BIGINT           NULL,
    [SYS_CHANGE_OPERATION]           NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]             NVARCHAR (1000)  NULL,
    CONSTRAINT [PK_zAuditTariffCode] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditTariffCodeAlias]...';


GO
CREATE TABLE [dbo].[zAuditTariffCodeAlias] (
    [IdPrimary]                   UNIQUEIDENTIFIER NOT NULL,
    [Id]                          UNIQUEIDENTIFIER NOT NULL,
    [TariffCodeId]                UNIQUEIDENTIFIER NOT NULL,
    [TariffCodeCodeAlias]         NVARCHAR (255)   NOT NULL,
    [Inactive]                    BIT              NOT NULL,
    [CreatedBy]                   NVARCHAR (100)   NOT NULL,
    [CreatedDate]                 DATETIME         NOT NULL,
    [LastModifiedBy]              NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]            DATETIME         NOT NULL,
    [IdPrevious]                  UNIQUEIDENTIFIER NULL,
    [TariffCodeIdPrevious]        UNIQUEIDENTIFIER NULL,
    [TariffCodeCodeAliasPrevious] NVARCHAR (255)   NULL,
    [InactivePrevious]            BIT              NULL,
    [CreatedByPrevious]           NVARCHAR (100)   NULL,
    [CreatedDatePrevious]         DATETIME         NULL,
    [LastModifiedByPrevious]      NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]    DATETIME         NULL,
    [SYS_CHANGE_VERSION]          BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION] BIGINT           NULL,
    [SYS_CHANGE_OPERATION]        NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]          NVARCHAR (1000)  NULL,
    CONSTRAINT [PK_zAuditTariffCodeAlias] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditUserInterfaceControlAndValueGoverningControlVisibility]...';


GO
CREATE TABLE [dbo].[zAuditUserInterfaceControlAndValueGoverningControlVisibility] (
    [Id]                                                    UNIQUEIDENTIFIER NOT NULL,
    [UserInterfaceFormId]                                   UNIQUEIDENTIFIER NOT NULL,
    [UserInterfaceFormControlGoverningVisibilityId]         UNIQUEIDENTIFIER NOT NULL,
    [ControlValueGoverningVisibiltiy]                       NVARCHAR (100)   NOT NULL,
    [Inactive]                                              BIT              NOT NULL,
    [CreatedBy]                                             NVARCHAR (100)   NOT NULL,
    [CreatedDate]                                           DATETIME         NOT NULL,
    [LastModifiedBy]                                        NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]                                      DATETIME         NOT NULL,
    [IdPrevious]                                            UNIQUEIDENTIFIER NULL,
    [UserInterfaceFormIdPrevious]                           UNIQUEIDENTIFIER NULL,
    [UserInterfaceFormControlGoverningVisibilityIdPrevious] UNIQUEIDENTIFIER NULL,
    [ControlValueGoverningVisibiltiyPrevious]               NVARCHAR (100)   NULL,
    [InactivePrevious]                                      BIT              NULL,
    [CreatedByPrevious]                                     NVARCHAR (100)   NULL,
    [CreatedDatePrevious]                                   DATETIME         NULL,
    [LastModifiedByPrevious]                                NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]                              DATETIME         NULL,
    [SYS_CHANGE_VERSION]                                    BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION]                           BIGINT           NULL,
    [SYS_CHANGE_OPERATION]                                  NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]                                    NVARCHAR (1000)  NULL,
    [IdPrimary]                                             UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_zAuditUserInterfaceControlAndValueGoverningControlVisibility] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditUserInterfaceControlVisibility]...';


GO
CREATE TABLE [dbo].[zAuditUserInterfaceControlVisibility] (
    [Id]                                                               UNIQUEIDENTIFIER NOT NULL,
    [UserInterfaceFormId]                                              UNIQUEIDENTIFIER NOT NULL,
    [UserInterfaceFormControlId]                                       UNIQUEIDENTIFIER NOT NULL,
    [UserInterfaceControlAndValueGoverningControlVisibilityId]         UNIQUEIDENTIFIER NOT NULL,
    [Inactive]                                                         BIT              NOT NULL,
    [CreatedBy]                                                        NVARCHAR (100)   NOT NULL,
    [CreatedDate]                                                      DATETIME         NOT NULL,
    [LastModifiedBy]                                                   NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]                                                 DATETIME         NOT NULL,
    [IdPrevious]                                                       UNIQUEIDENTIFIER NULL,
    [UserInterfaceFormIdPrevious]                                      UNIQUEIDENTIFIER NULL,
    [UserInterfaceFormControlIdPrevious]                               UNIQUEIDENTIFIER NULL,
    [UserInterfaceControlAndValueGoverningControlVisibilityIdPrevious] UNIQUEIDENTIFIER NULL,
    [InactivePrevious]                                                 BIT              NULL,
    [CreatedByPrevious]                                                NVARCHAR (100)   NULL,
    [CreatedDatePrevious]                                              DATETIME         NULL,
    [LastModifiedByPrevious]                                           NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]                                         DATETIME         NULL,
    [SYS_CHANGE_VERSION]                                               BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION]                                      BIGINT           NULL,
    [SYS_CHANGE_OPERATION]                                             NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]                                               NVARCHAR (1000)  NULL,
    [IdPrimary]                                                        UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_zAuditUserInterfaceControlVisibility] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditUserInterfaceForm]...';


GO
CREATE TABLE [dbo].[zAuditUserInterfaceForm] (
    [Id]                            UNIQUEIDENTIFIER NOT NULL,
    [UserInterfaceFormName]         VARCHAR (50)     NOT NULL,
    [Inactive]                      BIT              NOT NULL,
    [CreatedBy]                     NVARCHAR (100)   NOT NULL,
    [CreatedDate]                   DATETIME         NOT NULL,
    [LastModifiedBy]                NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]              DATETIME         NOT NULL,
    [IdPrevious]                    UNIQUEIDENTIFIER NULL,
    [UserInterfaceFormNamePrevious] VARCHAR (50)     NULL,
    [InactivePrevious]              BIT              NULL,
    [CreatedByPrevious]             NVARCHAR (100)   NULL,
    [CreatedDatePrevious]           DATETIME         NULL,
    [LastModifiedByPrevious]        NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]      DATETIME         NULL,
    [SYS_CHANGE_VERSION]            BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION]   BIGINT           NULL,
    [SYS_CHANGE_OPERATION]          NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]            NVARCHAR (1000)  NULL,
    [IdPrimary]                     UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_zAuditUserInterfaceForm] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditUserInterfaceFormControl]...';


GO
CREATE TABLE [dbo].[zAuditUserInterfaceFormControl] (
    [Id]                          UNIQUEIDENTIFIER NOT NULL,
    [UserInterfaceFormId]         UNIQUEIDENTIFIER NOT NULL,
    [ControlName]                 VARCHAR (50)     NOT NULL,
    [Inactive]                    BIT              NOT NULL,
    [CreatedBy]                   NVARCHAR (100)   NOT NULL,
    [CreatedDate]                 DATETIME         NOT NULL,
    [LastModifiedBy]              NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]            DATETIME         NOT NULL,
    [IdPrevious]                  UNIQUEIDENTIFIER NULL,
    [UserInterfaceFormIdPrevious] UNIQUEIDENTIFIER NULL,
    [ControlNamePrevious]         VARCHAR (50)     NULL,
    [InactivePrevious]            BIT              NULL,
    [CreatedByPrevious]           NVARCHAR (100)   NULL,
    [CreatedDatePrevious]         DATETIME         NULL,
    [LastModifiedByPrevious]      NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]    DATETIME         NULL,
    [SYS_CHANGE_VERSION]          BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION] BIGINT           NULL,
    [SYS_CHANGE_OPERATION]        NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]          NVARCHAR (1000)  NULL,
    [IdPrimary]                   UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_zAuditUserInterfaceFormControl] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditUtilityBillingType]...';


GO
CREATE TABLE [dbo].[zAuditUtilityBillingType] (
    [IdPrimary]                           UNIQUEIDENTIFIER NOT NULL,
    [Id]                                  UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]                    UNIQUEIDENTIFIER NOT NULL,
    [PorDriverId]                         UNIQUEIDENTIFIER NOT NULL,
    [RateClassId]                         UNIQUEIDENTIFIER NULL,
    [LoadProfileId]                       UNIQUEIDENTIFIER NULL,
    [TariffCodeId]                        UNIQUEIDENTIFIER NULL,
    [UtilityOfferedBillingTypeId]         UNIQUEIDENTIFIER NOT NULL,
    [Inactive]                            BIT              NOT NULL,
    [CreatedBy]                           NVARCHAR (100)   NOT NULL,
    [CreatedDate]                         DATETIME         NOT NULL,
    [LastModifiedBy]                      NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]                    DATETIME         NOT NULL,
    [IdPrevious]                          UNIQUEIDENTIFIER NULL,
    [UtilityCompanyIdPrevious]            UNIQUEIDENTIFIER NULL,
    [PorDriverIdPrevious]                 UNIQUEIDENTIFIER NULL,
    [RateClassIdPrevious]                 UNIQUEIDENTIFIER NULL,
    [LoadProfileIdPrevious]               UNIQUEIDENTIFIER NULL,
    [TariffCodeIdPrevious]                UNIQUEIDENTIFIER NULL,
    [UtilityOfferedBillingTypeIdPrevious] UNIQUEIDENTIFIER NULL,
    [InactivePrevious]                    BIT              NULL,
    [CreatedByPrevious]                   NVARCHAR (100)   NULL,
    [CreatedDatePrevious]                 DATETIME         NULL,
    [LastModifiedByPrevious]              NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]            DATETIME         NULL,
    [SYS_CHANGE_VERSION]                  BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION]         BIGINT           NULL,
    [SYS_CHANGE_OPERATION]                NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]                  NVARCHAR (1000)  NULL,
    CONSTRAINT [PK_zAuditUtilityBillingType] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditUtilityCompany]...';


GO
CREATE TABLE [dbo].[zAuditUtilityCompany] (
    [Id]                          UNIQUEIDENTIFIER NOT NULL,
    [UtilityCode]                 VARCHAR (50)     NOT NULL,
    [Inactive]                    BIT              NOT NULL,
    [CreatedBy]                   NVARCHAR (100)   NOT NULL,
    [CreatedDate]                 DATETIME         NOT NULL,
    [LastModifiedBy]              NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]            DATETIME         NOT NULL,
    [IdPrevious]                  UNIQUEIDENTIFIER NULL,
    [UtilityCodePrevious]         NVARCHAR (50)    NULL,
    [InactivePrevious]            BIT              NULL,
    [CreatedByPrevious]           NVARCHAR (100)   NULL,
    [CreatedDatePrevious]         DATETIME         NULL,
    [LastModifiedByPrevious]      NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]    DATETIME         NULL,
    [SYS_CHANGE_VERSION]          BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION] BIGINT           NULL,
    [SYS_CHANGE_OPERATION]        NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]          NVARCHAR (1000)  NULL,
    [IdPrimary]                   UNIQUEIDENTIFIER NOT NULL,
    [FullName]                    NVARCHAR (255)   NULL,
    [IsoId]                       UNIQUEIDENTIFIER NULL,
    [MarketId]                    UNIQUEIDENTIFIER NULL,
    [PrimaryDunsNumber]           NVARCHAR (255)   NULL,
    [LpEntityId]                  NVARCHAR (255)   NULL,
    [UtilityStatusId]             UNIQUEIDENTIFIER NULL,
    [SalesForceId]                NVARCHAR (255)   NULL,
    [FullNamePrevious]            NVARCHAR (255)   NULL,
    [IsoIdPrevious]               UNIQUEIDENTIFIER NULL,
    [MarketIdPrevious]            UNIQUEIDENTIFIER NULL,
    [PrimaryDunsNumberPrevious]   NVARCHAR (255)   NULL,
    [LpEntityIdPrevious]          NVARCHAR (255)   NULL,
    [UtilityStatusIdPrevious]     UNIQUEIDENTIFIER NULL,
    [SalesForceIdPrevious]        NVARCHAR (255)   NULL,
    CONSTRAINT [PK_zAuditUtilityCompany] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating [dbo].[zAuditUtilityTrip]...';


GO
CREATE TABLE [dbo].[zAuditUtilityTrip] (
    [IdPrimary]                   UNIQUEIDENTIFIER NOT NULL,
    [Id]                          UNIQUEIDENTIFIER NOT NULL,
    [UtilityCompanyId]            UNIQUEIDENTIFIER NOT NULL,
    [TripNumber]                  NVARCHAR (255)   NOT NULL,
    [Inactive]                    BIT              NOT NULL,
    [CreatedBy]                   NVARCHAR (100)   NOT NULL,
    [CreatedDate]                 DATETIME         NOT NULL,
    [LastModifiedBy]              NVARCHAR (100)   NOT NULL,
    [LastModifiedDate]            DATETIME         NOT NULL,
    [IdPrevious]                  UNIQUEIDENTIFIER NULL,
    [UtilityCompanyIdPrevious]    UNIQUEIDENTIFIER NULL,
    [TripNumberPrevious]          NVARCHAR (255)   NULL,
    [InactivePrevious]            BIT              NULL,
    [CreatedByPrevious]           NVARCHAR (100)   NULL,
    [CreatedDatePrevious]         DATETIME         NULL,
    [LastModifiedByPrevious]      NVARCHAR (100)   NULL,
    [LastModifiedDatePrevious]    DATETIME         NULL,
    [SYS_CHANGE_VERSION]          BIGINT           NULL,
    [SYS_CHANGE_CREATION_VERSION] BIGINT           NULL,
    [SYS_CHANGE_OPERATION]        NCHAR (1)        NULL,
    [SYS_CHANGE_COLUMNS]          NVARCHAR (1000)  NULL,
    CONSTRAINT [PK_zAuditUtilityTrip] PRIMARY KEY CLUSTERED ([IdPrimary] ASC)
);


GO
PRINT N'Creating Default Constraint on [dbo].[AccountInfoField]....';


GO
ALTER TABLE [dbo].[AccountInfoField]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[AccountInfoFieldRequired]....';


GO
ALTER TABLE [dbo].[AccountInfoFieldRequired]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[AccountType]....';


GO
ALTER TABLE [dbo].[AccountType]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[BillingAccountPattern]....';


GO
ALTER TABLE [dbo].[BillingAccountPattern]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[BillingType]....';


GO
ALTER TABLE [dbo].[BillingType]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[IcapTcapRefreshDate]....';


GO
ALTER TABLE [dbo].[IcapTcapRefreshDate]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[IdrRequestCost]....';


GO
ALTER TABLE [dbo].[IdrRequestCost]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[IdrRule]....';


GO
ALTER TABLE [dbo].[IdrRule]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[ISO]....';


GO
ALTER TABLE [dbo].[ISO]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[LoadProfile]....';


GO
ALTER TABLE [dbo].[LoadProfile]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[LoadProfileAlias]....';


GO
ALTER TABLE [dbo].[LoadProfileAlias]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[LpApprovedBillingType]....';


GO
ALTER TABLE [dbo].[LpApprovedBillingType]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[LpBillingType]....';


GO
ALTER TABLE [dbo].[LpBillingType]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[LpUtilityOfferedBillingType]....';


GO
ALTER TABLE [dbo].[LpUtilityOfferedBillingType]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[Market]....';


GO
ALTER TABLE [dbo].[Market]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[MeterReadSchedule]....';


GO
ALTER TABLE [dbo].[MeterReadSchedule]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[MeterType]....';


GO
ALTER TABLE [dbo].[MeterType]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[Month]....';


GO
ALTER TABLE [dbo].[Month]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[NameKeyPattern]....';


GO
ALTER TABLE [dbo].[NameKeyPattern]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[PorDriver]....';


GO
ALTER TABLE [dbo].[PorDriver]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[PorRecourse]....';


GO
ALTER TABLE [dbo].[PorRecourse]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[PurchaseOfReceivables]....';


GO
ALTER TABLE [dbo].[PurchaseOfReceivables]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[RateClass]....';


GO
ALTER TABLE [dbo].[RateClass]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[RateClassAlias]....';


GO
ALTER TABLE [dbo].[RateClassAlias]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[RequestModeEnrollmentType]....';


GO
ALTER TABLE [dbo].[RequestModeEnrollmentType]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[RequestModeHistoricalUsage]....';


GO
ALTER TABLE [dbo].[RequestModeHistoricalUsage]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[RequestModeHistoricalUsageParameter]....';


GO
ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[RequestModeIcap]....';


GO
ALTER TABLE [dbo].[RequestModeIcap]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[RequestModeIdr]....';


GO
ALTER TABLE [dbo].[RequestModeIdr]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[RequestModeType]....';


GO
ALTER TABLE [dbo].[RequestModeType]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[RequestModeTypeGenre]....';


GO
ALTER TABLE [dbo].[RequestModeTypeGenre]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[RequestModeTypeToRequestModeEnrollmentType]....';


GO
ALTER TABLE [dbo].[RequestModeTypeToRequestModeEnrollmentType]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[RequestModeTypeToRequestModeTypeGenre]....';


GO
ALTER TABLE [dbo].[RequestModeTypeToRequestModeTypeGenre]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[ServiceAccountPattern]....';


GO
ALTER TABLE [dbo].[ServiceAccountPattern]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[ServiceAddressZipPattern]....';


GO
ALTER TABLE [dbo].[ServiceAddressZipPattern]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[TariffCode]....';


GO
ALTER TABLE [dbo].[TariffCode]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[TariffCodeAlias]....';


GO
ALTER TABLE [dbo].[TariffCodeAlias]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[TriStateValue]....';


GO
ALTER TABLE [dbo].[TriStateValue]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[TriStateValuePendingActiveInactive]....';


GO
ALTER TABLE [dbo].[TriStateValuePendingActiveInactive]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[Users]....';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[UtilityBillingType]....';


GO
ALTER TABLE [dbo].[UtilityBillingType]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[UtilityCompany]....';


GO
ALTER TABLE [dbo].[UtilityCompany]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating DF_Utility_RateCodeFormat...';


GO
ALTER TABLE [dbo].[UtilityLegacy]
    ADD CONSTRAINT [DF_Utility_RateCodeFormat] DEFAULT ((0)) FOR [RateCodeFormat];


GO
PRINT N'Creating DF_Utility_RateCodeFields...';


GO
ALTER TABLE [dbo].[UtilityLegacy]
    ADD CONSTRAINT [DF_Utility_RateCodeFields] DEFAULT ((0)) FOR [RateCodeFields];


GO
PRINT N'Creating DF_Utility_PricingModeID...';


GO
ALTER TABLE [dbo].[UtilityLegacy]
    ADD CONSTRAINT [DF_Utility_PricingModeID] DEFAULT ((1)) FOR [PricingModeID];


GO
PRINT N'Creating Default Constraint on [dbo].[UtilityTrip]....';


GO
ALTER TABLE [dbo].[UtilityTrip]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[Year]....';


GO
ALTER TABLE [dbo].[Year]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditAccountInfoField]....';


GO
ALTER TABLE [dbo].[zAuditAccountInfoField]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditAccountInfoFieldRequired]....';


GO
ALTER TABLE [dbo].[zAuditAccountInfoFieldRequired]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditAccountType]....';


GO
ALTER TABLE [dbo].[zAuditAccountType]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditBillingType]....';


GO
ALTER TABLE [dbo].[zAuditBillingType]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditIdrRule]....';


GO
ALTER TABLE [dbo].[zAuditIdrRule]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditLoadProfile]....';


GO
ALTER TABLE [dbo].[zAuditLoadProfile]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditLoadProfileAlias]....';


GO
ALTER TABLE [dbo].[zAuditLoadProfileAlias]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditLpApprovedBillingType]....';


GO
ALTER TABLE [dbo].[zAuditLpApprovedBillingType]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditLpBillingType]....';


GO
ALTER TABLE [dbo].[zAuditLpBillingType]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditLpStandardLoadProfile]....';


GO
ALTER TABLE [dbo].[zAuditLpStandardLoadProfile]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditLpStandardRateClass]....';


GO
ALTER TABLE [dbo].[zAuditLpStandardRateClass]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditLpStandardTariffCode]....';


GO
ALTER TABLE [dbo].[zAuditLpStandardTariffCode]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditLpUtilityOfferedBillingType]....';


GO
ALTER TABLE [dbo].[zAuditLpUtilityOfferedBillingType]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditMeterReadSchedule]....';


GO
ALTER TABLE [dbo].[zAuditMeterReadSchedule]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditMeterType]....';


GO
ALTER TABLE [dbo].[zAuditMeterType]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditPurchaseOfReceivables]....';


GO
ALTER TABLE [dbo].[zAuditPurchaseOfReceivables]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditRateClass]....';


GO
ALTER TABLE [dbo].[zAuditRateClass]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditRateClassAlias]....';


GO
ALTER TABLE [dbo].[zAuditRateClassAlias]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditRequestModeHistoricalUsage]....';


GO
ALTER TABLE [dbo].[zAuditRequestModeHistoricalUsage]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditRequestModeIcap]....';


GO
ALTER TABLE [dbo].[zAuditRequestModeIcap]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditRequestModeIdr]....';


GO
ALTER TABLE [dbo].[zAuditRequestModeIdr]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditRequestModeType]....';


GO
ALTER TABLE [dbo].[zAuditRequestModeType]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditRequestModeTypeGenre]....';


GO
ALTER TABLE [dbo].[zAuditRequestModeTypeGenre]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditRequestModeTypeToRequestModeEnrollmentType]....';


GO
ALTER TABLE [dbo].[zAuditRequestModeTypeToRequestModeEnrollmentType]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditRequestModeTypeToRequestModeTypeGenre]....';


GO
ALTER TABLE [dbo].[zAuditRequestModeTypeToRequestModeTypeGenre]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditServiceClass]....';


GO
ALTER TABLE [dbo].[zAuditServiceClass]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditTariffCode]....';


GO
ALTER TABLE [dbo].[zAuditTariffCode]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditTariffCodeAlias]....';


GO
ALTER TABLE [dbo].[zAuditTariffCodeAlias]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditUserInterfaceControlAndValueGoverningControlVisibility]....';


GO
ALTER TABLE [dbo].[zAuditUserInterfaceControlAndValueGoverningControlVisibility]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditUserInterfaceControlVisibility]....';


GO
ALTER TABLE [dbo].[zAuditUserInterfaceControlVisibility]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditUserInterfaceForm]....';


GO
ALTER TABLE [dbo].[zAuditUserInterfaceForm]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditUserInterfaceFormControl]....';


GO
ALTER TABLE [dbo].[zAuditUserInterfaceFormControl]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditUtilityBillingType]....';


GO
ALTER TABLE [dbo].[zAuditUtilityBillingType]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditUtilityCompany]....';


GO
ALTER TABLE [dbo].[zAuditUtilityCompany]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating Default Constraint on [dbo].[zAuditUtilityTrip]....';


GO
ALTER TABLE [dbo].[zAuditUtilityTrip]
    ADD DEFAULT (newid()) FOR [IdPrimary];


GO
PRINT N'Creating FK_AccountInfoFieldRequired_AccountInfoField...';


GO
ALTER TABLE [dbo].[AccountInfoFieldRequired] WITH NOCHECK
    ADD CONSTRAINT [FK_AccountInfoFieldRequired_AccountInfoField] FOREIGN KEY ([AccountInfoFieldId]) REFERENCES [dbo].[AccountInfoField] ([Id]);


GO
PRINT N'Creating FK_AccountInfoFieldRequired_UtilityCompany...';


GO
ALTER TABLE [dbo].[AccountInfoFieldRequired] WITH NOCHECK
    ADD CONSTRAINT [FK_AccountInfoFieldRequired_UtilityCompany] FOREIGN KEY ([UtilityCompanyId]) REFERENCES [dbo].[UtilityCompany] ([Id]);


GO
PRINT N'Creating FK_BillingAccountPattern_UtilityCompany...';


GO
ALTER TABLE [dbo].[BillingAccountPattern] WITH NOCHECK
    ADD CONSTRAINT [FK_BillingAccountPattern_UtilityCompany] FOREIGN KEY ([UtilityCompanyId]) REFERENCES [dbo].[UtilityCompany] ([Id]);


GO
PRINT N'Creating FK_IcapTcapRefreshDate_UtilityCompany...';


GO
ALTER TABLE [dbo].[IcapTcapRefreshDate] WITH NOCHECK
    ADD CONSTRAINT [FK_IcapTcapRefreshDate_UtilityCompany] FOREIGN KEY ([UtilityCompanyId]) REFERENCES [dbo].[UtilityCompany] ([Id]);


GO
PRINT N'Creating FK_IdrRequestCost_UtilityCompany...';


GO
ALTER TABLE [dbo].[IdrRequestCost] WITH NOCHECK
    ADD CONSTRAINT [FK_IdrRequestCost_UtilityCompany] FOREIGN KEY ([UtilityCompanyId]) REFERENCES [dbo].[UtilityCompany] ([Id]);


GO
PRINT N'Creating FK_IdrRule_LoadProfile...';


GO
ALTER TABLE [dbo].[IdrRule] WITH NOCHECK
    ADD CONSTRAINT [FK_IdrRule_LoadProfile] FOREIGN KEY ([LoadProfileId]) REFERENCES [dbo].[LoadProfile] ([Id]);


GO
PRINT N'Creating FK_IdrRule_RateClass...';


GO
ALTER TABLE [dbo].[IdrRule] WITH NOCHECK
    ADD CONSTRAINT [FK_IdrRule_RateClass] FOREIGN KEY ([RateClassId]) REFERENCES [dbo].[RateClass] ([Id]);


GO
PRINT N'Creating FK_IdrRule_RequestModeType...';


GO
ALTER TABLE [dbo].[IdrRule] WITH NOCHECK
    ADD CONSTRAINT [FK_IdrRule_RequestModeType] FOREIGN KEY ([RequestModeTypeId]) REFERENCES [dbo].[RequestModeType] ([Id]);


GO
PRINT N'Creating FK_IdrRule_UtilityCompany...';


GO
ALTER TABLE [dbo].[IdrRule] WITH NOCHECK
    ADD CONSTRAINT [FK_IdrRule_UtilityCompany] FOREIGN KEY ([UtilityCompanyId]) REFERENCES [dbo].[UtilityCompany] ([Id]);


GO
PRINT N'Creating FK_IdrRules_LoadProfile...';


GO
ALTER TABLE [dbo].[IdrRule] WITH NOCHECK
    ADD CONSTRAINT [FK_IdrRules_LoadProfile] FOREIGN KEY ([LoadProfileId]) REFERENCES [dbo].[LoadProfile] ([Id]);


GO
PRINT N'Creating FK_LoadProfile_AccountType...';


GO
ALTER TABLE [dbo].[LoadProfile] WITH NOCHECK
    ADD CONSTRAINT [FK_LoadProfile_AccountType] FOREIGN KEY ([AccountTypeId]) REFERENCES [dbo].[AccountType] ([Id]);


GO
PRINT N'Creating FK_LoadProfile_LpStandardLoadProfile...';


GO
ALTER TABLE [dbo].[LoadProfile] WITH NOCHECK
    ADD CONSTRAINT [FK_LoadProfile_LpStandardLoadProfile] FOREIGN KEY ([LpStandardLoadProfileId]) REFERENCES [dbo].[LpStandardLoadProfile] ([Id]);


GO
PRINT N'Creating FK_LoadProfile_UtilityCompany...';


GO
ALTER TABLE [dbo].[LoadProfile] WITH NOCHECK
    ADD CONSTRAINT [FK_LoadProfile_UtilityCompany] FOREIGN KEY ([UtilityCompanyId]) REFERENCES [dbo].[UtilityCompany] ([Id]);


GO
PRINT N'Creating FK_LoadProfileAlias_LoadProfile...';


GO
ALTER TABLE [dbo].[LoadProfileAlias] WITH NOCHECK
    ADD CONSTRAINT [FK_LoadProfileAlias_LoadProfile] FOREIGN KEY ([LoadProfileId]) REFERENCES [dbo].[LoadProfile] ([Id]);


GO
PRINT N'Creating FK_LpApprovedBillingType_ApprovedBillingType...';


GO
ALTER TABLE [dbo].[LpApprovedBillingType] WITH NOCHECK
    ADD CONSTRAINT [FK_LpApprovedBillingType_ApprovedBillingType] FOREIGN KEY ([ApprovedBillingTypeId]) REFERENCES [dbo].[BillingType] ([Id]);


GO
PRINT N'Creating FK_LpApprovedBillingType_LpBillingType...';


GO
ALTER TABLE [dbo].[LpApprovedBillingType] WITH NOCHECK
    ADD CONSTRAINT [FK_LpApprovedBillingType_LpBillingType] FOREIGN KEY ([LpBillingTypeId]) REFERENCES [dbo].[LpBillingType] ([Id]);


GO
PRINT N'Creating FK_LpBillingType_BillingType...';


GO
ALTER TABLE [dbo].[LpBillingType] WITH NOCHECK
    ADD CONSTRAINT [FK_LpBillingType_BillingType] FOREIGN KEY ([DefaultBillingTypeId]) REFERENCES [dbo].[BillingType] ([Id]);


GO
PRINT N'Creating FK_LpBillingType_LoadProfile...';


GO
ALTER TABLE [dbo].[LpBillingType] WITH NOCHECK
    ADD CONSTRAINT [FK_LpBillingType_LoadProfile] FOREIGN KEY ([LoadProfileId]) REFERENCES [dbo].[LoadProfile] ([Id]) NOT FOR REPLICATION;


GO
ALTER TABLE [dbo].[LpBillingType] NOCHECK CONSTRAINT [FK_LpBillingType_LoadProfile];


GO
PRINT N'Creating FK_LpBillingType_PorDriver...';


GO
ALTER TABLE [dbo].[LpBillingType] WITH NOCHECK
    ADD CONSTRAINT [FK_LpBillingType_PorDriver] FOREIGN KEY ([PorDriverId]) REFERENCES [dbo].[PorDriver] ([Id]);


GO
PRINT N'Creating FK_LpBillingType_RateClass...';


GO
ALTER TABLE [dbo].[LpBillingType] WITH NOCHECK
    ADD CONSTRAINT [FK_LpBillingType_RateClass] FOREIGN KEY ([RateClassId]) REFERENCES [dbo].[RateClass] ([Id]) NOT FOR REPLICATION;


GO
ALTER TABLE [dbo].[LpBillingType] NOCHECK CONSTRAINT [FK_LpBillingType_RateClass];


GO
PRINT N'Creating FK_LpBillingType_TariffCode...';


GO
ALTER TABLE [dbo].[LpBillingType] WITH NOCHECK
    ADD CONSTRAINT [FK_LpBillingType_TariffCode] FOREIGN KEY ([TariffCodeId]) REFERENCES [dbo].[TariffCode] ([Id]) NOT FOR REPLICATION;


GO
ALTER TABLE [dbo].[LpBillingType] NOCHECK CONSTRAINT [FK_LpBillingType_TariffCode];


GO
PRINT N'Creating FK_LpBillingType_UtilityCompany...';


GO
ALTER TABLE [dbo].[LpBillingType] WITH NOCHECK
    ADD CONSTRAINT [FK_LpBillingType_UtilityCompany] FOREIGN KEY ([UtilityCompanyId]) REFERENCES [dbo].[UtilityCompany] ([Id]);


GO
PRINT N'Creating FK_LpStandardLoadProfile_UtilityCompany...';


GO
ALTER TABLE [dbo].[LpStandardLoadProfile] WITH NOCHECK
    ADD CONSTRAINT [FK_LpStandardLoadProfile_UtilityCompany] FOREIGN KEY ([UtilityCompanyId]) REFERENCES [dbo].[UtilityCompany] ([Id]);


GO
PRINT N'Creating FK_LpStandardRateClass_UtilityCompany...';


GO
ALTER TABLE [dbo].[LpStandardRateClass] WITH NOCHECK
    ADD CONSTRAINT [FK_LpStandardRateClass_UtilityCompany] FOREIGN KEY ([UtilityCompanyId]) REFERENCES [dbo].[UtilityCompany] ([Id]);


GO
PRINT N'Creating FK_LpStandardTariffCode_UtilityCompany...';


GO
ALTER TABLE [dbo].[LpStandardTariffCode] WITH NOCHECK
    ADD CONSTRAINT [FK_LpStandardTariffCode_UtilityCompany] FOREIGN KEY ([UtilityCompanyId]) REFERENCES [dbo].[UtilityCompany] ([Id]);


GO
PRINT N'Creating FK_LpUtilityOfferedBillingType_LpBillingType...';


GO
ALTER TABLE [dbo].[LpUtilityOfferedBillingType] WITH NOCHECK
    ADD CONSTRAINT [FK_LpUtilityOfferedBillingType_LpBillingType] FOREIGN KEY ([LpBillingTypeId]) REFERENCES [dbo].[LpBillingType] ([Id]);


GO
PRINT N'Creating FK_LpUtilityOfferedBillingType_UtilityOfferedBillingType...';


GO
ALTER TABLE [dbo].[LpUtilityOfferedBillingType] WITH NOCHECK
    ADD CONSTRAINT [FK_LpUtilityOfferedBillingType_UtilityOfferedBillingType] FOREIGN KEY ([UtilityOfferedBillingTypeId]) REFERENCES [dbo].[BillingType] ([Id]);


GO
PRINT N'Creating FK_MeterReadSchedule_Month...';


GO
ALTER TABLE [dbo].[MeterReadSchedule] WITH NOCHECK
    ADD CONSTRAINT [FK_MeterReadSchedule_Month] FOREIGN KEY ([MonthId]) REFERENCES [dbo].[Month] ([Id]);


GO
PRINT N'Creating FK_MeterReadSchedule_UtilityCompany...';


GO
ALTER TABLE [dbo].[MeterReadSchedule] WITH NOCHECK
    ADD CONSTRAINT [FK_MeterReadSchedule_UtilityCompany] FOREIGN KEY ([UtilityCompanyId]) REFERENCES [dbo].[UtilityCompany] ([Id]);


GO
PRINT N'Creating FK_MeterReadSchedule_UtilityTrip...';


GO
ALTER TABLE [dbo].[MeterReadSchedule] WITH NOCHECK
    ADD CONSTRAINT [FK_MeterReadSchedule_UtilityTrip] FOREIGN KEY ([UtilityTripId]) REFERENCES [dbo].[UtilityTrip] ([Id]);


GO
PRINT N'Creating FK_MeterReadSchedule_Year...';


GO
ALTER TABLE [dbo].[MeterReadSchedule] WITH NOCHECK
    ADD CONSTRAINT [FK_MeterReadSchedule_Year] FOREIGN KEY ([YearId]) REFERENCES [dbo].[Year] ([Id]);


GO
PRINT N'Creating FK_MeterType_AccountType...';


GO
ALTER TABLE [dbo].[MeterType] WITH NOCHECK
    ADD CONSTRAINT [FK_MeterType_AccountType] FOREIGN KEY ([AccountTypeId]) REFERENCES [dbo].[AccountType] ([Id]);


GO
PRINT N'Creating FK_MeterType_UtilityCompany...';


GO
ALTER TABLE [dbo].[MeterType] WITH NOCHECK
    ADD CONSTRAINT [FK_MeterType_UtilityCompany] FOREIGN KEY ([UtilityCompanyId]) REFERENCES [dbo].[UtilityCompany] ([Id]);


GO
PRINT N'Creating FK_NameKeyPattern_UtilityCompany...';


GO
ALTER TABLE [dbo].[NameKeyPattern] WITH NOCHECK
    ADD CONSTRAINT [FK_NameKeyPattern_UtilityCompany] FOREIGN KEY ([UtilityCompanyId]) REFERENCES [dbo].[UtilityCompany] ([Id]);


GO
PRINT N'Creating FK_PurchaseOfReceivables_PorDriver...';


GO
ALTER TABLE [dbo].[PurchaseOfReceivables] WITH NOCHECK
    ADD CONSTRAINT [FK_PurchaseOfReceivables_PorDriver] FOREIGN KEY ([PorDriverId]) REFERENCES [dbo].[PorDriver] ([Id]);


GO
PRINT N'Creating FK_PurchaseOfReceivables_PorRecourse...';


GO
ALTER TABLE [dbo].[PurchaseOfReceivables] WITH NOCHECK
    ADD CONSTRAINT [FK_PurchaseOfReceivables_PorRecourse] FOREIGN KEY ([PorRecourseId]) REFERENCES [dbo].[PorRecourse] ([Id]);


GO
PRINT N'Creating FK_PurchaseOfReceivables_UtilityCompany...';


GO
ALTER TABLE [dbo].[PurchaseOfReceivables] WITH NOCHECK
    ADD CONSTRAINT [FK_PurchaseOfReceivables_UtilityCompany] FOREIGN KEY ([UtilityCompanyId]) REFERENCES [dbo].[UtilityCompany] ([Id]);


GO
PRINT N'Creating FK_RateClass_AccountType...';


GO
ALTER TABLE [dbo].[RateClass] WITH NOCHECK
    ADD CONSTRAINT [FK_RateClass_AccountType] FOREIGN KEY ([AccountTypeId]) REFERENCES [dbo].[AccountType] ([Id]);


GO
PRINT N'Creating FK_RateClass_LpStandardRateClass...';


GO
ALTER TABLE [dbo].[RateClass] WITH NOCHECK
    ADD CONSTRAINT [FK_RateClass_LpStandardRateClass] FOREIGN KEY ([LpStandardRateClassId]) REFERENCES [dbo].[LpStandardRateClass] ([Id]);


GO
PRINT N'Creating FK_RateClass_UtilityCompany...';


GO
ALTER TABLE [dbo].[RateClass] WITH NOCHECK
    ADD CONSTRAINT [FK_RateClass_UtilityCompany] FOREIGN KEY ([UtilityCompanyId]) REFERENCES [dbo].[UtilityCompany] ([Id]);


GO
PRINT N'Creating FK_RateClassAlias_RateClass...';


GO
ALTER TABLE [dbo].[RateClassAlias] WITH NOCHECK
    ADD CONSTRAINT [FK_RateClassAlias_RateClass] FOREIGN KEY ([RateClassId]) REFERENCES [dbo].[RateClass] ([Id]);


GO
PRINT N'Creating FK_RequestModeHistoricalUsage_RequestModeEnrollmentType...';


GO
ALTER TABLE [dbo].[RequestModeHistoricalUsage] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeHistoricalUsage_RequestModeEnrollmentType] FOREIGN KEY ([RequestModeEnrollmentTypeId]) REFERENCES [dbo].[RequestModeEnrollmentType] ([Id]);


GO
PRINT N'Creating FK_RequestModeHistoricalUsage_RequestModeType...';


GO
ALTER TABLE [dbo].[RequestModeHistoricalUsage] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeHistoricalUsage_RequestModeType] FOREIGN KEY ([RequestModeTypeId]) REFERENCES [dbo].[RequestModeType] ([Id]);


GO
PRINT N'Creating FK_RequestModeHistoricalUsage_UtilityCompany...';


GO
ALTER TABLE [dbo].[RequestModeHistoricalUsage] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeHistoricalUsage_UtilityCompany] FOREIGN KEY ([UtilityCompanyId]) REFERENCES [dbo].[UtilityCompany] ([Id]);


GO
PRINT N'Creating FK_RequestModeHistoricalUsageParameter_TriStateValue_HasCustomerNumberId...';


GO
ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_HasCustomerNumberId] FOREIGN KEY ([HasCustomerNumberId]) REFERENCES [dbo].[TriStateValue] ([Id]);


GO
PRINT N'Creating FK_RequestModeHistoricalUsageParameter_TriStateValue_HasMeterTypeId...';


GO
ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_HasMeterTypeId] FOREIGN KEY ([HasMeterTypeId]) REFERENCES [dbo].[TriStateValue] ([Id]);


GO
PRINT N'Creating FK_RequestModeHistoricalUsageParameter_TriStateValue_HasPodIdNumberId...';


GO
ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_HasPodIdNumberId] FOREIGN KEY ([HasPodIdNumberId]) REFERENCES [dbo].[TriStateValue] ([Id]);


GO
PRINT N'Creating FK_RequestModeHistoricalUsageParameter_TriStateValue_HasReferenceNumberId...';


GO
ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_HasReferenceNumberId] FOREIGN KEY ([HasReferenceNumberId]) REFERENCES [dbo].[TriStateValue] ([Id]);


GO
PRINT N'Creating FK_RequestModeHistoricalUsageParameter_TriStateValue_IsBillingAccountNumberRequiredId...';


GO
ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_IsBillingAccountNumberRequiredId] FOREIGN KEY ([IsBillingAccountNumberRequiredId]) REFERENCES [dbo].[TriStateValue] ([Id]);


GO
PRINT N'Creating FK_RequestModeHistoricalUsageParameter_TriStateValue_IsMdmaId...';


GO
ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_IsMdmaId] FOREIGN KEY ([IsMdmaId]) REFERENCES [dbo].[TriStateValue] ([Id]);


GO
PRINT N'Creating FK_RequestModeHistoricalUsageParameter_TriStateValue_IsMeterInstallerId...';


GO
ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_IsMeterInstallerId] FOREIGN KEY ([IsMeterInstallerId]) REFERENCES [dbo].[TriStateValue] ([Id]);


GO
PRINT N'Creating FK_RequestModeHistoricalUsageParameter_TriStateValue_IsMeterNumberRequiredId...';


GO
ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_IsMeterNumberRequiredId] FOREIGN KEY ([IsMeterNumberRequiredId]) REFERENCES [dbo].[TriStateValue] ([Id]);


GO
PRINT N'Creating FK_RequestModeHistoricalUsageParameter_TriStateValue_IsMeterOwnerId...';


GO
ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_IsMeterOwnerId] FOREIGN KEY ([IsMeterOwnerId]) REFERENCES [dbo].[TriStateValue] ([Id]);


GO
PRINT N'Creating FK_RequestModeHistoricalUsageParameter_TriStateValue_IsMeterReaderId...';


GO
ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_IsMeterReaderId] FOREIGN KEY ([IsMeterReaderId]) REFERENCES [dbo].[TriStateValue] ([Id]);


GO
PRINT N'Creating FK_RequestModeHistoricalUsageParameter_TriStateValue_IsNameKeyRequiredId...';


GO
ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_IsNameKeyRequiredId] FOREIGN KEY ([IsNameKeyRequiredId]) REFERENCES [dbo].[TriStateValue] ([Id]);


GO
PRINT N'Creating FK_RequestModeHistoricalUsageParameter_TriStateValue_IsSchedulingCoordinatorId...';


GO
ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_IsSchedulingCoordinatorId] FOREIGN KEY ([IsSchedulingCoordinatorId]) REFERENCES [dbo].[TriStateValue] ([Id]);


GO
PRINT N'Creating FK_RequestModeHistoricalUsageParameter_TriStateValue_IsServiceProviderId...';


GO
ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_IsServiceProviderId] FOREIGN KEY ([IsServiceProviderId]) REFERENCES [dbo].[TriStateValue] ([Id]);


GO
PRINT N'Creating FK_RequestModeHistoricalUsageParameter_TriStateValue_IsZipCodeRequiredId...';


GO
ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_IsZipCodeRequiredId] FOREIGN KEY ([IsZipCodeRequiredId]) REFERENCES [dbo].[TriStateValue] ([Id]);


GO
PRINT N'Creating FK_RequestModeHistoricalUsageParameter_UtilityCompanyId...';


GO
ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeHistoricalUsageParameter_UtilityCompanyId] FOREIGN KEY ([UtilityCompanyId]) REFERENCES [dbo].[UtilityCompany] ([Id]);


GO
PRINT N'Creating FK_RequestModeIcap_RequestModeEnrollmentType...';


GO
ALTER TABLE [dbo].[RequestModeIcap] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeIcap_RequestModeEnrollmentType] FOREIGN KEY ([RequestModeEnrollmentTypeId]) REFERENCES [dbo].[RequestModeEnrollmentType] ([Id]);


GO
PRINT N'Creating FK_RequestModeIcap_RequestModeType...';


GO
ALTER TABLE [dbo].[RequestModeIcap] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeIcap_RequestModeType] FOREIGN KEY ([RequestModeTypeId]) REFERENCES [dbo].[RequestModeType] ([Id]);


GO
PRINT N'Creating FK_RequestModeIcap_UtilityCompany...';


GO
ALTER TABLE [dbo].[RequestModeIcap] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeIcap_UtilityCompany] FOREIGN KEY ([UtilityCompanyId]) REFERENCES [dbo].[UtilityCompany] ([Id]);


GO
PRINT N'Creating FK_RequestModeIdr_RequestModeEnrollmentType...';


GO
ALTER TABLE [dbo].[RequestModeIdr] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeIdr_RequestModeEnrollmentType] FOREIGN KEY ([RequestModeEnrollmentTypeId]) REFERENCES [dbo].[RequestModeEnrollmentType] ([Id]);


GO
PRINT N'Creating FK_RequestModeIdr_RequestModeType...';


GO
ALTER TABLE [dbo].[RequestModeIdr] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeIdr_RequestModeType] FOREIGN KEY ([RequestModeTypeId]) REFERENCES [dbo].[RequestModeType] ([Id]);


GO
PRINT N'Creating FK_RequestModeIdr_UtilityCompany...';


GO
ALTER TABLE [dbo].[RequestModeIdr] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeIdr_UtilityCompany] FOREIGN KEY ([UtilityCompanyId]) REFERENCES [dbo].[UtilityCompany] ([Id]);


GO
PRINT N'Creating FK_RequestModeTypeToRequestModeEnrollmentType_RequestModeEnrollmentType...';


GO
ALTER TABLE [dbo].[RequestModeTypeToRequestModeEnrollmentType] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeTypeToRequestModeEnrollmentType_RequestModeEnrollmentType] FOREIGN KEY ([RequestModeEnrollmentTypeId]) REFERENCES [dbo].[RequestModeEnrollmentType] ([Id]);


GO
PRINT N'Creating FK_RequestModeTypeToRequestModeEnrollmentType_RequestModeType...';


GO
ALTER TABLE [dbo].[RequestModeTypeToRequestModeEnrollmentType] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeTypeToRequestModeEnrollmentType_RequestModeType] FOREIGN KEY ([RequestModeTypeId]) REFERENCES [dbo].[RequestModeType] ([Id]);


GO
PRINT N'Creating FK_RequestModeTypeToRequestModeEnrollmentType_RequestModeTypeGenre...';


GO
ALTER TABLE [dbo].[RequestModeTypeToRequestModeEnrollmentType] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeTypeToRequestModeEnrollmentType_RequestModeTypeGenre] FOREIGN KEY ([RequestModeTypeGenreId]) REFERENCES [dbo].[RequestModeTypeGenre] ([Id]);


GO
PRINT N'Creating FK_RequestModeTypeToRequestModeTypeGenre_RequestModeType...';


GO
ALTER TABLE [dbo].[RequestModeTypeToRequestModeTypeGenre] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeTypeToRequestModeTypeGenre_RequestModeType] FOREIGN KEY ([RequestModeTypeId]) REFERENCES [dbo].[RequestModeType] ([Id]);


GO
PRINT N'Creating FK_RequestModeTypeToRequestModeTypeGenre_RequestModeTypeGenre...';


GO
ALTER TABLE [dbo].[RequestModeTypeToRequestModeTypeGenre] WITH NOCHECK
    ADD CONSTRAINT [FK_RequestModeTypeToRequestModeTypeGenre_RequestModeTypeGenre] FOREIGN KEY ([RequestModeTypeGenreId]) REFERENCES [dbo].[RequestModeTypeGenre] ([Id]);


GO
PRINT N'Creating FK_ServiceAccountPattern_UtilityCompany...';


GO
ALTER TABLE [dbo].[ServiceAccountPattern] WITH NOCHECK
    ADD CONSTRAINT [FK_ServiceAccountPattern_UtilityCompany] FOREIGN KEY ([UtilityCompanyId]) REFERENCES [dbo].[UtilityCompany] ([Id]);


GO
PRINT N'Creating FK_ServiceAddressZipPattern_UtilityCompany...';


GO
ALTER TABLE [dbo].[ServiceAddressZipPattern] WITH NOCHECK
    ADD CONSTRAINT [FK_ServiceAddressZipPattern_UtilityCompany] FOREIGN KEY ([UtilityCompanyId]) REFERENCES [dbo].[UtilityCompany] ([Id]);


GO
PRINT N'Creating FK_TariffCode_AccountType...';


GO
ALTER TABLE [dbo].[TariffCode] WITH NOCHECK
    ADD CONSTRAINT [FK_TariffCode_AccountType] FOREIGN KEY ([AccountTypeId]) REFERENCES [dbo].[AccountType] ([Id]);


GO
PRINT N'Creating FK_TariffCode_LpStandardTariffCode...';


GO
ALTER TABLE [dbo].[TariffCode] WITH NOCHECK
    ADD CONSTRAINT [FK_TariffCode_LpStandardTariffCode] FOREIGN KEY ([LpStandardTariffCodeId]) REFERENCES [dbo].[LpStandardTariffCode] ([Id]);


GO
PRINT N'Creating FK_TariffCode_UtilityCompany...';


GO
ALTER TABLE [dbo].[TariffCode] WITH NOCHECK
    ADD CONSTRAINT [FK_TariffCode_UtilityCompany] FOREIGN KEY ([UtilityCompanyId]) REFERENCES [dbo].[UtilityCompany] ([Id]);


GO
PRINT N'Creating FK_TariffCodeAlias_TariffCode...';


GO
ALTER TABLE [dbo].[TariffCodeAlias] WITH NOCHECK
    ADD CONSTRAINT [FK_TariffCodeAlias_TariffCode] FOREIGN KEY ([TariffCodeId]) REFERENCES [dbo].[TariffCode] ([Id]);


GO
PRINT N'Creating FK_UserInterfaceControlAndValueGoverningControlVisibility_UserInterfaceForm...';


GO
ALTER TABLE [dbo].[UserInterfaceControlAndValueGoverningControlVisibility] WITH NOCHECK
    ADD CONSTRAINT [FK_UserInterfaceControlAndValueGoverningControlVisibility_UserInterfaceForm] FOREIGN KEY ([UserInterfaceFormId]) REFERENCES [dbo].[UserInterfaceForm] ([Id]);


GO
PRINT N'Creating FK_UserInterfaceControlAndValueGoverningControlVisibility_UserInterfaceFormControl...';


GO
ALTER TABLE [dbo].[UserInterfaceControlAndValueGoverningControlVisibility] WITH NOCHECK
    ADD CONSTRAINT [FK_UserInterfaceControlAndValueGoverningControlVisibility_UserInterfaceFormControl] FOREIGN KEY ([UserInterfaceFormControlGoverningVisibilityId]) REFERENCES [dbo].[UserInterfaceFormControl] ([Id]);


GO
PRINT N'Creating FK_UserInterfaceControlVisibility_UserInterfaceControlAndValueGoverningControlVisibility...';


GO
ALTER TABLE [dbo].[UserInterfaceControlVisibility] WITH NOCHECK
    ADD CONSTRAINT [FK_UserInterfaceControlVisibility_UserInterfaceControlAndValueGoverningControlVisibility] FOREIGN KEY ([UserInterfaceControlAndValueGoverningControlVisibilityId]) REFERENCES [dbo].[UserInterfaceControlAndValueGoverningControlVisibility] ([Id]);


GO
PRINT N'Creating FK_UserInterfaceControlVisibility_UserInterfaceForm...';


GO
ALTER TABLE [dbo].[UserInterfaceControlVisibility] WITH NOCHECK
    ADD CONSTRAINT [FK_UserInterfaceControlVisibility_UserInterfaceForm] FOREIGN KEY ([UserInterfaceFormId]) REFERENCES [dbo].[UserInterfaceForm] ([Id]);


GO
PRINT N'Creating FK_UserInterfaceControlVisibility_UserInterfaceFormControl...';


GO
ALTER TABLE [dbo].[UserInterfaceControlVisibility] WITH NOCHECK
    ADD CONSTRAINT [FK_UserInterfaceControlVisibility_UserInterfaceFormControl] FOREIGN KEY ([UserInterfaceFormControlId]) REFERENCES [dbo].[UserInterfaceFormControl] ([Id]);


GO
PRINT N'Creating FK_UserInterfaceFormControl_UserInterfaceForm...';


GO
ALTER TABLE [dbo].[UserInterfaceFormControl] WITH NOCHECK
    ADD CONSTRAINT [FK_UserInterfaceFormControl_UserInterfaceForm] FOREIGN KEY ([UserInterfaceFormId]) REFERENCES [dbo].[UserInterfaceForm] ([Id]);


GO
PRINT N'Creating FK_UtilityBillingType_BillingType...';


GO
ALTER TABLE [dbo].[UtilityBillingType] WITH NOCHECK
    ADD CONSTRAINT [FK_UtilityBillingType_BillingType] FOREIGN KEY ([UtilityOfferedBillingTypeId]) REFERENCES [dbo].[BillingType] ([Id]);


GO
PRINT N'Creating FK_UtilityBillingType_LoadProfile...';


GO
ALTER TABLE [dbo].[UtilityBillingType] WITH NOCHECK
    ADD CONSTRAINT [FK_UtilityBillingType_LoadProfile] FOREIGN KEY ([LoadProfileId]) REFERENCES [dbo].[LoadProfile] ([Id]);


GO
PRINT N'Creating FK_UtilityBillingType_RateClass...';


GO
ALTER TABLE [dbo].[UtilityBillingType] WITH NOCHECK
    ADD CONSTRAINT [FK_UtilityBillingType_RateClass] FOREIGN KEY ([RateClassId]) REFERENCES [dbo].[RateClass] ([Id]);


GO
PRINT N'Creating FK_UtilityBillingType_TariffCode...';


GO
ALTER TABLE [dbo].[UtilityBillingType] WITH NOCHECK
    ADD CONSTRAINT [FK_UtilityBillingType_TariffCode] FOREIGN KEY ([TariffCodeId]) REFERENCES [dbo].[TariffCode] ([Id]);


GO
PRINT N'Creating FK_UtilityBillingType_UtilityCompany...';


GO
ALTER TABLE [dbo].[UtilityBillingType] WITH NOCHECK
    ADD CONSTRAINT [FK_UtilityBillingType_UtilityCompany] FOREIGN KEY ([UtilityCompanyId]) REFERENCES [dbo].[UtilityCompany] ([Id]);


GO
PRINT N'Creating FK_UtilityCompany_ISO...';


GO
ALTER TABLE [dbo].[UtilityCompany] WITH NOCHECK
    ADD CONSTRAINT [FK_UtilityCompany_ISO] FOREIGN KEY ([IsoId]) REFERENCES [dbo].[ISO] ([Id]);


GO
PRINT N'Creating FK_UtilityCompany_Market...';


GO
ALTER TABLE [dbo].[UtilityCompany] WITH NOCHECK
    ADD CONSTRAINT [FK_UtilityCompany_Market] FOREIGN KEY ([MarketId]) REFERENCES [dbo].[Market] ([Id]);


GO
PRINT N'Creating FK_UtilityCompany_UtilityStatus...';


GO
ALTER TABLE [dbo].[UtilityCompany] WITH NOCHECK
    ADD CONSTRAINT [FK_UtilityCompany_UtilityStatus] FOREIGN KEY ([UtilityStatusId]) REFERENCES [dbo].[TriStateValuePendingActiveInactive] ([Id]);


GO
PRINT N'Creating FK_UtilityCompanyToUtilityLegacy_UtilityCompany...';


GO
ALTER TABLE [dbo].[UtilityCompanyToUtilityLegacy] WITH NOCHECK
    ADD CONSTRAINT [FK_UtilityCompanyToUtilityLegacy_UtilityCompany] FOREIGN KEY ([UtilityCompanyId]) REFERENCES [dbo].[UtilityCompany] ([Id]);


GO
PRINT N'Creating FK_UtilityCompanyToUtilityLegacy_UtilityLegacy...';


GO
ALTER TABLE [dbo].[UtilityCompanyToUtilityLegacy] WITH NOCHECK
    ADD CONSTRAINT [FK_UtilityCompanyToUtilityLegacy_UtilityLegacy] FOREIGN KEY ([UtilityLegacyId]) REFERENCES [dbo].[UtilityLegacy] ([ID]);


GO
PRINT N'Creating FK_UtilityTrip_UtilityCompany...';


GO
ALTER TABLE [dbo].[UtilityTrip] WITH NOCHECK
    ADD CONSTRAINT [FK_UtilityTrip_UtilityCompany] FOREIGN KEY ([UtilityCompanyId]) REFERENCES [dbo].[UtilityCompany] ([Id]);


GO
PRINT N'Creating [dbo].[zAuditAccountInfoFieldInsert]...';


GO

CREATE TRIGGER [dbo].[zAuditAccountInfoFieldInsert]
	ON  [dbo].[AccountInfoField]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	INSERT INTO [dbo].[zAuditAccountInfoField]
	(	
       [Id]
       ,[NameUserFriendly]
       ,[NameMachineUnfriendly]
       ,[Description]
       ,[Inactive]
       ,[CreatedBy]
       ,[CreatedDate]
       ,[LastModifiedBy]
       ,[LastModifiedDate]
       ,[IdPrevious]
       ,[NameUserFriendlyPrevious]
       ,[NameMachineUnfriendlyPrevious]
       ,[DescriptionPrevious]
       ,[InactivePrevious]
       ,[CreatedByPrevious]
       ,[CreatedDatePrevious]
       ,[LastModifiedByPrevious]
       ,[LastModifiedDatePrevious]
       ,[SYS_CHANGE_VERSION]
       ,[SYS_CHANGE_CREATION_VERSION]
       ,[SYS_CHANGE_OPERATION]
       ,[SYS_CHANGE_COLUMNS]
	)
		SELECT 
			[Id],
			[NameUserFriendly],
			[NameMachineUnfriendly],
			[Description],
			[Inactive],
			[CreatedBy],
			[CreatedDate],
			[LastModifiedBy],
			[LastModifiedDate],
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			@ChangeTrackingCurrentVersion,
			@ChangeTrackingCurrentVersion,
			'I',
			'Id,NameUserFriendly,NameMachineUnfriendly,Description,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
		FROM 
			inserted

		INSERT INTO [ChangeTableVersioning]
		(
			Id,
			ChangeTrackingVersion,
			CreatedDate
		)
		SELECT
			NEWID(),
			@ChangeTrackingCurrentVersion,
			GETDATE()

		SET NOCOUNT OFF;
	END
GO
PRINT N'Creating [dbo].[zAuditAccountInfoFieldRequiredInsert]...';


GO





CREATE TRIGGER [dbo].[zAuditAccountInfoFieldRequiredInsert]
	ON  [dbo].[AccountInfoFieldRequired]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	INSERT INTO [dbo].[zAuditAccountInfoFieldRequired]
	(	
		[Id],
		[UtilityCompanyId],
		[AccountInfoFieldId],
		[IsRequired],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[UtilityCompanyIdPrevious],
		[AccountInfoFieldIdPrevious],
		[IsRequiredPrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
		SELECT 
			[Id],
			[UtilityCompanyId],
			[AccountInfoFieldId],
			[IsRequired],
			[Inactive],
			[CreatedBy],
			[CreatedDate],
			[LastModifiedBy],
			[LastModifiedDate],
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			@ChangeTrackingCurrentVersion,
			@ChangeTrackingCurrentVersion,
			'I',
			'Id,UtilityCompanyId,AccountInfoFieldId,IsRequired,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
		FROM 
			inserted

		INSERT INTO [ChangeTableVersioning]
		(
			Id,
			ChangeTrackingVersion,
			CreatedDate
		)
		SELECT
			NEWID(),
			@ChangeTrackingCurrentVersion,
			GETDATE()

		SET NOCOUNT OFF;
	END
GO
PRINT N'Creating [dbo].[zAuditAccountInfoFieldRequiredUpdate]...';


GO





CREATE TRIGGER [dbo].[zAuditAccountInfoFieldRequiredUpdate]
	ON  [dbo].[AccountInfoFieldRequired]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMGT.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditAccountInfoFieldRequired (NOLOCK) ZARMGT
		INNER JOIN inserted a
			ON ZARMGT.Id = a.Id
	set @SysChangeColumns = ''
	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],NEWID()) <> isnull(b.[Id],NEWID()) THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UtilityCompanyId],NEWID()) <> isnull(b.[UtilityCompanyId],NEWID()) THEN 'UtilityCompanyId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[AccountInfoFieldId],NEWID()) <> isnull(b.[AccountInfoFieldId],NEWID()) THEN 'AccountInfoFieldId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[IsRequired],'') <> isnull(b.[IsRequired],'') THEN 'IsRequired' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [dbo].[zAuditAccountInfoFieldRequired]
	(
		[Id],
		[UtilityCompanyId],
		[AccountInfoFieldId],
		[IsRequired],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[UtilityCompanyIdPrevious],
		[AccountInfoFieldIdPrevious],
		[IsRequiredPrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
	SELECT 
		a.[Id],
		a.[UtilityCompanyId],
		a.[AccountInfoFieldId],
		a.[IsRequired],
		a.[Inactive],
		a.[CreatedBy],
		a.[CreatedDate],
		a.[LastModifiedBy],
		a.[LastModifiedDate],
		b.[Id],
		b.[UtilityCompanyId],
		b.[AccountInfoFieldId],
		b.[IsRequired],
		b.[Inactive],
		b.[CreatedBy],
		b.[CreatedDate],
		b.[LastModifiedBy],
		b.[LastModifiedDate]
		,@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditAccountTypeInsert]...';


GO








CREATE TRIGGER [dbo].[zAuditAccountTypeInsert]
	ON  [dbo].[AccountType]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	INSERT INTO [dbo].[zAuditAccountType]
	(	
		[Id],
		[Name],
		[Description],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[NamePrevious],
		[DescriptionPrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
		SELECT 
			[Id],
			[Name],
			[Description],
			[Inactive],
			[CreatedBy],
			[CreatedDate],
			[LastModifiedBy],
			[LastModifiedDate],
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			@ChangeTrackingCurrentVersion,
			@ChangeTrackingCurrentVersion,
			'I',
			'Id,Name,Description,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
		FROM 
			inserted

		INSERT INTO [ChangeTableVersioning]
		(
			Id,
			ChangeTrackingVersion,
			CreatedDate
		)
		SELECT
			NEWID(),
			@ChangeTrackingCurrentVersion,
			GETDATE()

		SET NOCOUNT OFF;
	END
GO
PRINT N'Creating [dbo].[zAuditAccountTypeUpdate]...';


GO




CREATE TRIGGER [dbo].[zAuditAccountTypeUpdate]
	ON  [dbo].[AccountType]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMGT.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditAccountType (NOLOCK) ZARMGT
		INNER JOIN inserted a
			ON ZARMGT.Id = a.Id
	set @SysChangeColumns = ''
	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],'') <> isnull(b.[Id],'') THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Name],'') <> isnull(b.[Name],'') THEN 'Name' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Description],'') <> isnull(b.[Description],'') THEN 'Description' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [dbo].[zAuditAccountType]
	(
		[Id],
		[Name],
		[Description],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[NamePrevious],
		[DescriptionPrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
	SELECT 
		a.[Id],
		a.[Name],
		a.[Description],
		a.[Inactive],
		a.[CreatedBy],
		a.[CreatedDate],
		a.[LastModifiedBy],
		a.[LastModifiedDate],
		b.[Id],
		b.[Name],
		b.[Description],
		b.[Inactive],
		b.[CreatedBy],
		b.[CreatedDate],
		b.[LastModifiedBy],
		b.[LastModifiedDate]
		,@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditBillingTypeUpdate]...';


GO



CREATE TRIGGER [dbo].[zAuditBillingTypeUpdate]
	ON  [dbo].[BillingType]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()
	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMGT.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditBillingType (NOLOCK) ZARMGT
		INNER JOIN inserted a
			ON ZARMGT.Id = a.Id
	set @SysChangeColumns = ''
	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],'') <> isnull(b.[Id],'') THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Name],'') <> isnull(b.[Name],'') THEN 'Name' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Description],'') <> isnull(b.[Description],'') THEN 'Description' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[EnumValue],-1) <> isnull(b.[EnumValue],-2) THEN 'EnumValue' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [dbo].[zAuditBillingType]
	(
		[Id],
		[Name],
		[Description],
		[EnumValue],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[NamePrevious],
		[DescriptionPrevious],
		[EnumValuePrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
	SELECT 
		a.[Id],
		a.[Name],
		a.[Description],
		a.[EnumValue],
		a.[Inactive],
		a.[CreatedBy],
		a.[CreatedDate],
		a.[LastModifiedBy],
		a.[LastModifiedDate],
		b.[Id],
		b.[Name],
		b.[Description],
		b.[EnumValue],
		b.[Inactive],
		b.[CreatedBy],
		b.[CreatedDate],
		b.[LastModifiedBy],
		b.[LastModifiedDate],
		@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]


	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditBillingTypeInsert]...';


GO

CREATE TRIGGER [dbo].[zAuditBillingTypeInsert]
	ON  [dbo].[BillingType]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	INSERT INTO [dbo].[zAuditBillingType]
	(	
		[Id],
		[Name],
		[Description],
		[EnumValue],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[NamePrevious],
		[DescriptionPrevious],
		[EnumValuePrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
		SELECT 
			[Id],
			[Name],
			[Description],
			[EnumValue],
			[Inactive],
			[CreatedBy],
			[CreatedDate],
			[LastModifiedBy],
			[LastModifiedDate],
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			@ChangeTrackingCurrentVersion,
			@ChangeTrackingCurrentVersion,
			'I',
			'Id,Name,Description,EnumValue,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
		FROM 
			inserted

		INSERT INTO [ChangeTableVersioning]
		(
			Id,
			ChangeTrackingVersion,
			CreatedDate
		)
		SELECT
			NEWID(),
			@ChangeTrackingCurrentVersion,
			GETDATE()

		SET NOCOUNT OFF;
	END
GO
PRINT N'Creating [dbo].[zAuditIdrRuleUpdate]...';


GO
CREATE TRIGGER [dbo].[zAuditIdrRuleUpdate]
	ON  [dbo].[IdrRule]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)
			
	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()
	
	SELECT 
		@ChangeTrackingCreationVersion = MIN(AZUC.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditIdrRule (NOLOCK) AZUC 
		INNER JOIN inserted a
			ON AZUC.Id = a.Id
	set @SysChangeColumns = ''
	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],NEWID()) <> isnull(b.[Id],NEWID()) THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UtilityCompanyId],NEWID()) <> isnull(b.[UtilityCompanyId],NEWID()) THEN 'UtilityCompanyId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[RequestModeTypeId],NEWID()) <> isnull(b.[RequestModeTypeId],NEWID()) THEN 'RequestModeTypeId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[RateClassId],NEWID()) <> isnull(b.[RateClassId],NEWID()) THEN 'RateClassId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LoadProfileId],NEWID()) <> isnull(b.[LoadProfileId],NEWID()) THEN 'LoadProfileId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[MinUsageMWh],'') <> isnull(b.[MinUsageMWh],'') THEN 'MinUsageMWh' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[MaxUsageMWh],'') <> isnull(b.[MaxUsageMWh],'') THEN 'MaxUsageMWh' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[IsOnEligibleCustomerList],'') <> isnull(b.[IsOnEligibleCustomerList],'') THEN 'IsOnEligibleCustomerList' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[IsHistoricalArchiveAvailable],'') <> isnull(b.[IsHistoricalArchiveAvailable],'') THEN 'IsHistoricalArchiveAvailable' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]
	
	INSERT INTO [dbo].zAuditIdrRule 
	(
	[Id],
	[UtilityCompanyId],
	[RequestModeTypeId],
	[RateClassId],
	[LoadProfileId],
	[MinUsageMWh],
	[MaxUsageMWh],
	[IsOnEligibleCustomerList],
	[IsHistoricalArchiveAvailable],
	[Inactive],
	[CreatedBy],
	[CreatedDate],
	[LastModifiedBy],
	[LastModifiedDate],
	[IdPrevious],
	[UtilityCompanyIdPrevious],
	[RequestModeTypeIdPrevious],
	[RateClassIdPrevious],
	[LoadProfileIdPrevious] ,
	[MinUsageMWhPrevious],
	[MaxUsageMWhPrevious],
	[IsOnEligibleCustomerListPrevious],
	[IsHistoricalArchiveAvailablePrevious],
	[InactivePrevious],
	[CreatedByPrevious],
	[CreatedDatePrevious],
	[LastModifiedByPrevious],
	[LastModifiedDatePrevious],
	[SYS_CHANGE_VERSION],
	[SYS_CHANGE_CREATION_VERSION],
	[SYS_CHANGE_OPERATION],
	[SYS_CHANGE_COLUMNS]
	)
	SELECT 
		a.[Id]
		,a.[UtilityCompanyId]
		,a.[RequestModeTypeId]
		,a.[RateClassId]
		,a.[LoadProfileId]
		,a.[MinUsageMWh]
		,a.[MaxUsageMWh]
		,
		a.[IsOnEligibleCustomerList]
		,a.[IsHistoricalArchiveAvailable]
		,a.[Inactive]
		,a.[CreatedBy]
		,a.[CreatedDate]
		,a.[LastModifiedBy]
		,a.[LastModifiedDate]
		,b.[Id]
		,b.[UtilityCompanyId]
		,b.[RequestModeTypeId]
		,b.[RateClassId]
		,b.[LoadProfileId]
		,b.[MinUsageMWh]
		,b.[MaxUsageMWh]
		,b.[IsOnEligibleCustomerList]
		,b.[IsHistoricalArchiveAvailable]
		,b.[Inactive]
		,b.[CreatedBy]
		,b.[CreatedDate]
		,b.[LastModifiedBy]
		,b.[LastModifiedDate]
		,
		@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]
			
	SET NOCOUNT OFF;

END
GO
PRINT N'Creating [dbo].[zAuditIdrRuleInsert]...';


GO
CREATE TRIGGER [dbo].[zAuditIdrRuleInsert]
	ON  [dbo].[IdrRule]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT;
	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()
	PRINT @ChangeTrackingCurrentVersion 


	INSERT INTO [Lp_UtilityManagement].[dbo].[zAuditIdrRule]
	(
	[Id],
	[UtilityCompanyId],
	[RequestModeTypeId],
	[RateClassId],
	[LoadProfileId],
	[MinUsageMWh],
	[MaxUsageMWh],
	[IsOnEligibleCustomerList],
	[IsHistoricalArchiveAvailable],
	[Inactive],
	[CreatedBy],
	[CreatedDate],
	[LastModifiedBy],
	[LastModifiedDate],
	[IdPrevious],
	[UtilityCompanyIdPrevious],
	[RequestModeTypeIdPrevious],
	[RateClassIdPrevious],
	[LoadProfileIdPrevious] ,
	[MinUsageMWhPrevious],
	[MaxUsageMWhPrevious],
	[IsOnEligibleCustomerListPrevious],
	[IsHistoricalArchiveAvailablePrevious],
	[InactivePrevious],
	[CreatedByPrevious],
	[CreatedDatePrevious],
	[LastModifiedByPrevious],
	[LastModifiedDatePrevious],
	[SYS_CHANGE_VERSION],
	[SYS_CHANGE_CREATION_VERSION],
	[SYS_CHANGE_OPERATION],
	[SYS_CHANGE_COLUMNS]
	)
	SELECT 
	[Id],
	[UtilityCompanyId],
	[RequestModeTypeId],
	[RateClassId],
	[LoadProfileId],
	[MinUsageMWh],
	[MaxUsageMWh],
	[IsOnEligibleCustomerList],
	[IsHistoricalArchiveAvailable],
	[Inactive],
	[CreatedBy],
	[CreatedDate],
	[LastModifiedBy],
	[LastModifiedDate]
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,@ChangeTrackingCurrentVersion
		,@ChangeTrackingCurrentVersion
		,'I'
		,'Id,UtilityCompanyId,RequestModeTypeId,RateClassId,LoadProfileId,MinUsageMWh,MaxUsageMWh,IsOnEligibleCustomerList,IsHistoricalArchiveAvailable,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
	FROM 
		inserted

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()
		
	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditLoadProfileInsert]...';


GO



CREATE TRIGGER [dbo].[zAuditLoadProfileInsert]
	ON  [dbo].[LoadProfile]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	INSERT INTO [dbo].[zAuditLoadProfile]
	(	
		[Id],
		[UtilityCompanyId],
		[LoadProfileCode],
		[Description],
		[AccountTypeId],
		[LpStandardLoadProfileId],
		[LoadProfileId],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[UtilityCompanyIdPrevious],
		[LoadProfileCodePrevious],
		[DescriptionPrevious],
		[AccountTypeIdPrevious],
		[LpStandardLoadProfileIdPrevious],
		[LoadProfileIdPrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
		SELECT 
			[Id],
			[UtilityCompanyId],
			[LoadProfileCode],
			[Description],
			[AccountTypeId],
			[LpStandardLoadProfileId],
			[LoadProfileId],
			[Inactive],
			[CreatedBy],
			[CreatedDate],
			[LastModifiedBy],
			[LastModifiedDate],
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			@ChangeTrackingCurrentVersion,
			@ChangeTrackingCurrentVersion,
			'I',
			'Id,UtilityCompanyId,LoadProfileCode,Description,AccountTypeId,LpStandardLoadProfileId,LoadProfileId,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
		FROM 
			inserted

		INSERT INTO [ChangeTableVersioning]
		(
			Id,
			ChangeTrackingVersion,
			CreatedDate
		)
		SELECT
			NEWID(),
			@ChangeTrackingCurrentVersion,
			GETDATE()

		SET NOCOUNT OFF;
	END
GO
PRINT N'Creating [dbo].[zAuditLoadProfileUpdate]...';


GO



CREATE TRIGGER [dbo].[zAuditLoadProfileUpdate]
	ON  [dbo].[LoadProfile]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMGT.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditLoadProfile (NOLOCK) ZARMGT
		INNER JOIN inserted a
			ON ZARMGT.Id = a.Id

	set @SysChangeColumns = ''

	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],'') <> isnull(b.[Id],'') THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UtilityCompanyId],'') <> isnull(b.[UtilityCompanyId],'') THEN 'UtilityCompanyId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LoadProfileCode],'') <> isnull(b.[LoadProfileCode],'') THEN 'LoadProfileCode' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Description],'') <> isnull(b.[Description],'') THEN 'Description' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[AccountTypeId],'') <> isnull(b.[AccountTypeId],'') THEN 'AccountTypeId' + ',' ELSE '' END
		+ CASE WHEN a.[LpStandardLoadProfileId] <> b.[LpStandardLoadProfileId] THEN 'LpStandardLoadProfileId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LoadProfileId],0) <> isnull(b.[LoadProfileId],0) THEN 'LoadProfileId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [dbo].[zAuditLoadProfile]
	(
		[Id],
		[UtilityCompanyId],
		[LoadProfileCode],
		[Description],
		[AccountTypeId],
		[LpStandardLoadProfileId],
		[LoadProfileId],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[UtilityCompanyIdPrevious],
		[LoadProfileCodePrevious],
		[DescriptionPrevious],
		[AccountTypeIdPrevious],
		[LpStandardLoadProfileIdPrevious],
		[LoadProfileIdPrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
	SELECT 
		a.[Id],
		a.[UtilityCompanyId],
		a.[LoadProfileCode],
		a.[Description],
		a.[AccountTypeId],
		a.[LpStandardLoadProfileId],
		a.[LoadProfileId],
		a.[Inactive],
		a.[CreatedBy],
		a.[CreatedDate],
		a.[LastModifiedBy],
		a.[LastModifiedDate],
		b.[Id],
		b.[UtilityCompanyId],
		b.[LoadProfileCode],
		b.[Description],
		b.[AccountTypeId],
		b.[LpStandardLoadProfileId],
		b.[LoadProfileId],
		b.[Inactive],
		b.[CreatedBy],
		b.[CreatedDate],
		b.[LastModifiedBy],
		b.[LastModifiedDate],
		@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditLoadProfileAliasInsert]...';


GO




CREATE TRIGGER [dbo].[zAuditLoadProfileAliasInsert]
	ON  [dbo].[LoadProfileAlias]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	INSERT INTO [dbo].[zAuditLoadProfileAlias]
	(	
		[Id]
		,[LoadProfileId]
		,[LoadProfileCodeAlias]
		,[Inactive]
		,[CreatedBy]
		,[CreatedDate]
		,[LastModifiedBy]
		,[LastModifiedDate]
		,[IdPrevious]
		,[LoadProfileIdPrevious]
		,[LoadProfileCodeAliasPrevious]
		,[InactivePrevious]
		,[CreatedByPrevious]
		,[CreatedDatePrevious]
		,[LastModifiedByPrevious]
		,[LastModifiedDatePrevious]
		,[SYS_CHANGE_VERSION]
		,[SYS_CHANGE_CREATION_VERSION]
		,[SYS_CHANGE_OPERATION]
		,[SYS_CHANGE_COLUMNS]
	)
		SELECT 
			[Id],
			[LoadProfileId],
			[LoadProfileCodeAlias],
			[Inactive],
			[CreatedBy],
			[CreatedDate],
			[LastModifiedBy],
			[LastModifiedDate],
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			@ChangeTrackingCurrentVersion,
			@ChangeTrackingCurrentVersion,
			'I',
			'Id,LoadProfileId,LoadProfileCodeAlias,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
		FROM 
			inserted

		INSERT INTO [ChangeTableVersioning]
		(
			Id,
			ChangeTrackingVersion,
			CreatedDate
		)
		SELECT
			NEWID(),
			@ChangeTrackingCurrentVersion,
			GETDATE()

		SET NOCOUNT OFF;
	END
GO
PRINT N'Creating [dbo].[zAuditLoadProfileAliasUpdate]...';


GO





CREATE TRIGGER [dbo].[zAuditLoadProfileAliasUpdate]
	ON  [dbo].[LoadProfileAlias]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMGT.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditLoadProfileAlias (NOLOCK) ZARMGT
		INNER JOIN inserted a
			ON ZARMGT.Id = a.Id

	set @SysChangeColumns = ''

	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],'') <> isnull(b.[Id],'') THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LoadProfileId],'') <> isnull(b.[LoadProfileId],'') THEN 'LoadProfileId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LoadProfileCodeAlias],'') <> isnull(b.[LoadProfileCodeAlias],'') THEN 'LoadProfileCodeAlias' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [dbo].[zAuditLoadProfileAlias]
	(
		[Id],
		[LoadProfileId],
		[LoadProfileCodeAlias],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[LoadProfileIdPrevious],
		[LoadProfileCodeAliasPrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
	SELECT 
		a.[Id],
		a.[LoadProfileId],
		a.[LoadProfileCodeAlias],
		a.[Inactive],
		a.[CreatedBy],
		a.[CreatedDate],
		a.[LastModifiedBy],
		a.[LastModifiedDate],
		b.[Id],
		b.[LoadProfileId],
		b.[LoadProfileCodeAlias],
		b.[Inactive],
		b.[CreatedBy],
		b.[CreatedDate],
		b.[LastModifiedBy],
		b.[LastModifiedDate],
		@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()
	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditLpApprovedBillingTypeUpdate]...';


GO







CREATE TRIGGER [dbo].[zAuditLpApprovedBillingTypeUpdate]
	ON  [dbo].[LpApprovedBillingType]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()
	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMGT.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditLpApprovedBillingType (NOLOCK) ZARMGT
		INNER JOIN inserted a
			ON ZARMGT.Id = a.Id
	set @SysChangeColumns = ''
	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],NEWID()) <> isnull(b.[Id],NEWID()) THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LpBillingTypeId],NEWID()) <> isnull(b.[LpBillingTypeId],NEWID()) THEN 'LpBillingTypeId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[ApprovedBillingTypeId],NEWID()) <> isnull(b.[ApprovedBillingTypeId],NEWID()) THEN 'ApprovedBillingTypeId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [dbo].[zAuditLpApprovedBillingType]
	(
		[Id],
		[LpBillingTypeId],
		[ApprovedBillingTypeId],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[LpBillingTypeIdPrevious],
		[ApprovedBillingTypeIdPrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
	SELECT 
		a.[Id],
		a.[LpBillingTypeId],
		a.[ApprovedBillingTypeId],
		a.[Inactive],
		a.[CreatedBy],
		a.[CreatedDate],
		a.[LastModifiedBy],
		a.[LastModifiedDate],
		b.[Id],
		b.[LpBillingTypeId],
		b.[ApprovedBillingTypeId],
		b.[Inactive],
		b.[CreatedBy],
		b.[CreatedDate],
		b.[LastModifiedBy],
		b.[LastModifiedDate],
		@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]


	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditLpApprovedBillingTypeInsert]...';


GO













---------------------------

CREATE TRIGGER [dbo].[zAuditLpApprovedBillingTypeInsert]
	ON  [dbo].[LpApprovedBillingType]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	INSERT INTO [dbo].[zAuditLpApprovedBillingType]
	(	
		[Id],
		[LpBillingTypeId],
		[ApprovedBillingTypeId],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[LpBillingTypeIdPrevious],
		[ApprovedBillingTypeIdPrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
		SELECT 
			[Id],
			[LpBillingTypeId],
			[ApprovedBillingTypeId],
			[Inactive],
			[CreatedBy],
			[CreatedDate],
			[LastModifiedBy],
			[LastModifiedDate],
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			@ChangeTrackingCurrentVersion,
			@ChangeTrackingCurrentVersion,
			'I',
			'Id,LpBillingTypeId,ApprovedBillingTypeId,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
		FROM 
			inserted

		INSERT INTO [ChangeTableVersioning]
		(
			Id,
			ChangeTrackingVersion,
			CreatedDate
		)
		SELECT
			NEWID(),
			@ChangeTrackingCurrentVersion,
			GETDATE()

		SET NOCOUNT OFF;
	END
GO
PRINT N'Creating [dbo].[zAuditLpBillingTypeUpdate]...';


GO




CREATE TRIGGER [dbo].[zAuditLpBillingTypeUpdate]
	ON  [dbo].[LpBillingType]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()
	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMGT.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditLpBillingType (NOLOCK) ZARMGT
		INNER JOIN inserted a
			ON ZARMGT.Id = a.Id
	set @SysChangeColumns = ''
	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],NEWID()) <> isnull(b.[Id],NEWID()) THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UtilityCompanyId],NEWID()) <> isnull(b.[UtilityCompanyId],'') THEN 'UtilityCompanyId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[PorDriverId],NEWID()) <> isnull(b.[PorDriverId],NEWID()) THEN 'PorDriverId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[RateClassId],NEWID()) <> isnull(b.[RateClassId],NEWID()) THEN 'RateClassId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LoadProfileId],NEWID()) <> isnull(b.[LoadProfileId],NEWID()) THEN 'LoadProfileId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[TariffCodeId],NEWID()) <> isnull(b.[TariffCodeId],NEWID()) THEN 'TariffCodeId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[DefaultBillingTypeId],NEWID()) <> isnull(b.[DefaultBillingTypeId],NEWID()) THEN 'DefaultBillingTypeId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [dbo].[zAuditLpBillingType]
	(
		[Id],
		[UtilityCompanyId],
		[PorDriverId],
		[RateClassId],
		[LoadProfileId],
		[TariffCodeId],
		[DefaultBillingTypeId],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[UtilityCompanyIdPrevious],
		[PorDriverIdPrevious],
		[RateClassIdPrevious],
		[LoadProfileIdPrevious],
		[TariffCodeIdPrevious],
		[DefaultBillingTypeIdPrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
	SELECT 
		a.[Id],
		a.[UtilityCompanyId],
		a.[PorDriverId],
		a.[RateClassId],
		a.[LoadProfileId],
		a.[TariffCodeId],
		a.[DefaultBillingTypeId],
		a.[Inactive],
		a.[CreatedBy],
		a.[CreatedDate],
		a.[LastModifiedBy],
		a.[LastModifiedDate],
		b.[Id],
		b.[UtilityCompanyId],
		b.[PorDriverId],
		b.[RateClassId],
		b.[LoadProfileId],
		b.[TariffCodeId],
		b.[DefaultBillingTypeId],
		b.[Inactive],
		b.[CreatedBy],
		b.[CreatedDate],
		b.[LastModifiedBy],
		b.[LastModifiedDate],
		@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]


	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditLpBillingTypeInsert]...';


GO






---------------------------

CREATE TRIGGER [dbo].[zAuditLpBillingTypeInsert]
	ON  [dbo].[LpBillingType]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	INSERT INTO [dbo].[zAuditLpBillingType]
	(	
		[Id],
		[UtilityCompanyId],
		[PorDriverId],
		[RateClassId],
		[LoadProfileId],
		[TariffCodeId],
		[DefaultBillingTypeId],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[UtilityCompanyIdPrevious],
		[PorDriverIdPrevious],
		[RateClassIdPrevious],
		[LoadProfileIdPrevious],
		[TariffCodeIdPrevious],
		[DefaultBillingTypeIdPrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
		SELECT 
			[Id],
			[UtilityCompanyId],
			[PorDriverId],
			[RateClassId],
			[LoadProfileId],
			[TariffCodeId],
			[DefaultBillingTypeId],
			[Inactive],
			[CreatedBy],
			[CreatedDate],
			[LastModifiedBy],
			[LastModifiedDate],
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			@ChangeTrackingCurrentVersion,
			@ChangeTrackingCurrentVersion,
			'I',
			'Id,UtilityCompanyId,PorDriverId,RateClassId,LoadProfileId,TariffCodeId,DefaultBillingTypeId,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
		FROM 
			inserted

		INSERT INTO [ChangeTableVersioning]
		(
			Id,
			ChangeTrackingVersion,
			CreatedDate
		)
		SELECT
			NEWID(),
			@ChangeTrackingCurrentVersion,
			GETDATE()

		SET NOCOUNT OFF;
	END
GO
PRINT N'Creating [dbo].[zAuditLpStandardRateClassInsert]...';


GO



CREATE TRIGGER [dbo].[zAuditLpStandardRateClassInsert]
	ON  [dbo].[LpStandardRateClass]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	INSERT INTO [dbo].[zAuditLpStandardRateClass]
	(	
		[Id],
		[UtilityCompanyId],
		[LpStandardRateClassCode],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[UtilityCompanyIdPrevious],
		[LpStandardRateClassCodePrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
		SELECT 
			[Id],
			[UtilityCompanyId],
			[LpStandardRateClassCode],
			[Inactive],
			[CreatedBy],
			[CreatedDate],
			[LastModifiedBy],
			[LastModifiedDate],
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			@ChangeTrackingCurrentVersion,
			@ChangeTrackingCurrentVersion,
			'I',
			'Id,UtilityCompanyId,LpStandardRateClassCode,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
		FROM 
			inserted

		INSERT INTO [ChangeTableVersioning]
		(
			Id,
			ChangeTrackingVersion,
			CreatedDate
		)
		SELECT
			NEWID(),
			@ChangeTrackingCurrentVersion,
			GETDATE()

		SET NOCOUNT OFF;
	END
GO
PRINT N'Creating [dbo].[zAuditLpStandardRateClassUpdate]...';


GO

CREATE TRIGGER [dbo].[zAuditLpStandardRateClassUpdate]
	ON  [dbo].[LpStandardRateClass]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMGT.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditLpStandardRateClass (NOLOCK) ZARMGT
		INNER JOIN inserted a
			ON ZARMGT.Id = a.Id

	set @SysChangeColumns = ''

	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],'') <> isnull(b.[Id],'') THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LpStandardRateClassCode],'') <> isnull(b.[LpStandardRateClassCode],'') THEN 'LpStandardRateClassCode' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UtilityCompanyId],'') <> isnull(b.[UtilityCompanyId],'') THEN 'UtilityCompanyId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [dbo].[zAuditLpStandardRateClass]
	(
		[Id],
		[UtilityCompanyId],
		[LpStandardRateClassCode],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[UtilityCompanyIdPrevious],
		[LpStandardRateClassCodePrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
	SELECT 
		a.[Id],
		a.[UtilityCompanyId],
		a.[LpStandardRateClassCode],
		a.[Inactive],
		a.[CreatedBy],
		a.[CreatedDate],
		a.[LastModifiedBy],
		a.[LastModifiedDate],
		b.[Id],
		b.[UtilityCompanyId],
		b.[LpStandardRateClassCode],
		b.[Inactive],
		b.[CreatedBy],
		b.[CreatedDate],
		b.[LastModifiedBy],
		b.[LastModifiedDate],
		@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()
	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditLpUtilityOfferedBillingTypeUpdate]...';


GO







CREATE TRIGGER [dbo].[zAuditLpUtilityOfferedBillingTypeUpdate]
	ON  [dbo].[LpUtilityOfferedBillingType]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()
	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMGT.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditLpUtilityOfferedBillingType (NOLOCK) ZARMGT
		INNER JOIN inserted a
			ON ZARMGT.Id = a.Id
	set @SysChangeColumns = ''
	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],NEWID()) <> isnull(b.[Id],NEWID()) THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LpBillingTypeId],NEWID()) <> isnull(b.[LpBillingTypeId],NEWID()) THEN 'LpBillingTypeId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UtilityOfferedBillingTypeId],NEWID()) <> isnull(b.[UtilityOfferedBillingTypeId],NEWID()) THEN 'UtilityOfferedBillingTypeId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [dbo].[zAuditLpUtilityOfferedBillingType]
	(
		[Id],
		[LpBillingTypeId],
		[UtilityOfferedBillingTypeId],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[LpBillingTypeIdPrevious],
		[UtilityOfferedBillingTypeIdPrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
	SELECT 
		a.[Id],
		a.[LpBillingTypeId],
		a.[UtilityOfferedBillingTypeId],
		a.[Inactive],
		a.[CreatedBy],
		a.[CreatedDate],
		a.[LastModifiedBy],
		a.[LastModifiedDate],
		b.[Id],
		b.[LpBillingTypeId],
		b.[UtilityOfferedBillingTypeId],
		b.[Inactive],
		b.[CreatedBy],
		b.[CreatedDate],
		b.[LastModifiedBy],
		b.[LastModifiedDate],
		@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]


	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditLpUtilityOfferedBillingTypeInsert]...';


GO













---------------------------

CREATE TRIGGER [dbo].[zAuditLpUtilityOfferedBillingTypeInsert]
	ON  [dbo].[LpUtilityOfferedBillingType]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	INSERT INTO [dbo].[zAuditLpUtilityOfferedBillingType]
	(	
		[Id],
		[LpBillingTypeId],
		[UtilityOfferedBillingTypeId],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[LpBillingTypeIdPrevious],
		[UtilityOfferedBillingTypeIdPrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
		SELECT 
			[Id],
			[LpBillingTypeId],
			[UtilityOfferedBillingTypeId],
			[Inactive],
			[CreatedBy],
			[CreatedDate],
			[LastModifiedBy],
			[LastModifiedDate],
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			@ChangeTrackingCurrentVersion,
			@ChangeTrackingCurrentVersion,
			'I',
			'Id,LpBillingTypeId,UtilityOfferedBillingTypeId,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
		FROM 
			inserted

		INSERT INTO [ChangeTableVersioning]
		(
			Id,
			ChangeTrackingVersion,
			CreatedDate
		)
		SELECT
			NEWID(),
			@ChangeTrackingCurrentVersion,
			GETDATE()

		SET NOCOUNT OFF;
	END
GO
PRINT N'Creating [dbo].[zAuditMeterReadScheduleUpdate]...';


GO




CREATE TRIGGER [dbo].[zAuditMeterReadScheduleUpdate]
	ON  [dbo].[MeterReadSchedule]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMGT.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditMeterReadSchedule (NOLOCK) ZARMGT
		INNER JOIN inserted a
			ON ZARMGT.Id = a.Id

	set @SysChangeColumns = ''

	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],'') <> isnull(b.[Id],'') THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UtilityCompanyId],NEWID()) <> isnull(b.[UtilityCompanyId],NEWID()) THEN 'UtilityCompanyId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UtilityTripId],NEWID()) <> isnull(b.[UtilityTripId],NEWID()) THEN 'UtilityTripId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[YearId],NEWID()) <> isnull(b.[YearId],NEWID()) THEN 'YearId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[MonthId],NEWID()) <> isnull(b.[MonthId],NEWID()) THEN 'MonthId' + ',' ELSE '' END
		+ CASE WHEN a.[ReadDate] <> b.[ReadDate] THEN 'ReadDate' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [dbo].[zAuditMeterReadSchedule]
	(
		[Id],
		[UtilityCompanyId],
		[UtilityTripId],
		[YearId],
		[MonthId],
		[ReadDate],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[UtilityCompanyIdPrevious],
		[UtilityTripIdPrevious],
		[YearIdPrevious],
		[MonthIdPrevious],
		[ReadDatePrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
	SELECT 
		a.[Id],
		a.[UtilityCompanyId],
		a.[UtilityTripId],
		a.[YearId],
		a.[MonthId],
		a.[ReadDate],
		a.[Inactive],
		a.[CreatedBy],
		a.[CreatedDate],
		a.[LastModifiedBy],
		a.[LastModifiedDate],
		b.[Id],
		b.[UtilityCompanyId],
		b.[UtilityTripId],
		b.[YearId],
		b.[MonthId],
		b.[ReadDate],
		b.[Inactive],
		b.[CreatedBy],
		b.[CreatedDate],
		b.[LastModifiedBy],
		b.[LastModifiedDate],
		@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()
	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditMeterReadScheduleInsert]...';


GO





CREATE TRIGGER [dbo].[zAuditMeterReadScheduleInsert]
	ON  [dbo].[MeterReadSchedule]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	INSERT INTO [dbo].[zAuditMeterReadSchedule]
	(	
		[Id]
		,[UtilityCompanyId]
		,[UtilityTripId]
		,[YearId]
		,[MonthId]
		,[ReadDate]
		,[Inactive]
		,[CreatedBy]
		,[CreatedDate]
		,[LastModifiedBy]
		,[LastModifiedDate]
		,[IdPrevious]
		,[UtilityCompanyIdPrevious]
		,[UtilityTripIdPrevious]
		,[YearIdPrevious]
		,[MonthIdPrevious]
		,[ReadDatePrevious]
		,[InactivePrevious]
		,[CreatedByPrevious]
		,[CreatedDatePrevious]
		,[LastModifiedByPrevious]
		,[LastModifiedDatePrevious]
		,[SYS_CHANGE_VERSION]
		,[SYS_CHANGE_CREATION_VERSION]
		,[SYS_CHANGE_OPERATION]
		,[SYS_CHANGE_COLUMNS]
	)
		SELECT 
			[Id],
			[UtilityCompanyId],
			[UtilityTripId],
			[YearId],
			[MonthId],
			[ReadDate],
			[Inactive],
			[CreatedBy],
			[CreatedDate],
			[LastModifiedBy],
			[LastModifiedDate],
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			@ChangeTrackingCurrentVersion,
			@ChangeTrackingCurrentVersion,
			'I',
			'Id,UtilityCompanyId,UtilityTripId,YearId,MonthId,ReadDate,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
		FROM 
			inserted

		INSERT INTO [ChangeTableVersioning]
		(
			Id,
			ChangeTrackingVersion,
			CreatedDate
		)
		SELECT
			NEWID(),
			@ChangeTrackingCurrentVersion,
			GETDATE()

		SET NOCOUNT OFF;
	END
GO
PRINT N'Creating [dbo].[zAuditMeterTypeInsert]...';


GO



CREATE TRIGGER [dbo].[zAuditMeterTypeInsert]
	ON  [dbo].[MeterType]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	INSERT INTO [dbo].[zAuditMeterType]
	(	
		[Id],
		[UtilityCompanyId],
		[MeterTypeCode],
		[Description],
		[AccountTypeId],
		[LpStandardMeterType],
		[Sequence],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[UtilityCompanyIdPrevious],
		[MeterTypeCodePrevious],
		[DescriptionPrevious],
		[AccountTypeIdPrevious],
		[LpStandardMeterTypePrevious],
		[SequencePrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
		SELECT 
			[Id],
			[UtilityCompanyId],
			[MeterTypeCode],
			[Description],
			[AccountTypeId],
			[LpStandardMeterType],
			[Sequence],
			[Inactive],
			[CreatedBy],
			[CreatedDate],
			[LastModifiedBy],
			[LastModifiedDate],
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			@ChangeTrackingCurrentVersion,
			@ChangeTrackingCurrentVersion,
			'I',
			'Id,UtilityCompanyId,MeterTypeCode,Description,AccountTypeId,LpStandardMeterType,Sequence,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
		FROM 
			inserted

		INSERT INTO [ChangeTableVersioning]
		(
			Id,
			ChangeTrackingVersion,
			CreatedDate
		)
		SELECT
			NEWID(),
			@ChangeTrackingCurrentVersion,
			GETDATE()

		SET NOCOUNT OFF;
	END
GO
PRINT N'Creating [dbo].[zAuditMeterTypeUpdate]...';


GO




CREATE TRIGGER [dbo].[zAuditMeterTypeUpdate]
	ON  [dbo].[MeterType]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMGT.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditMeterType (NOLOCK) ZARMGT
		INNER JOIN inserted a
			ON ZARMGT.Id = a.Id
	set @SysChangeColumns = ''
	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],'') <> isnull(b.[Id],'') THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UtilityCompanyId],'') <> isnull(b.[UtilityCompanyId],'') THEN 'UtilityCompanyId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[MeterTypeCode],'') <> isnull(b.[MeterTypeCode],'') THEN 'MeterTypeCode' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Description],'') <> isnull(b.[Description],'') THEN 'Description' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[AccountTypeId],'') <> isnull(b.[AccountTypeId],'') THEN 'AccountTypeId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LpStandardMeterType],'') <> isnull(b.[LpStandardMeterType],'') THEN 'LpStandardMeterType' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Sequence],'') <> isnull(b.[Sequence],'') THEN 'Sequence' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [dbo].[zAuditMeterType]
	(
		[Id],
		[UtilityCompanyId],
		[MeterTypeCode],
		[Description],
		[AccountTypeId],
		[LpStandardMeterType],
		[Sequence],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[UtilityCompanyIdPrevious],
		[MeterTypeCodePrevious],
		[DescriptionPrevious],
		[AccountTypeIdPrevious],
		[LpStandardMeterTypePrevious],
		[SequencePrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
	SELECT 
		a.[Id],
		a.[UtilityCompanyId],
		a.[MeterTypeCode],
		a.[Description],
		a.[AccountTypeId],
		a.[LpStandardMeterType],
		a.[Sequence],
		a.[Inactive],
		a.[CreatedBy],
		a.[CreatedDate],
		a.[LastModifiedBy],
		a.[LastModifiedDate],
		b.[Id],
		b.[UtilityCompanyId],
		b.[MeterTypeCode],
		b.[Description],
		b.[AccountTypeId],
		b.[LpStandardMeterType],
		b.[Sequence],
		b.[Inactive],
		b.[CreatedBy],
		b.[CreatedDate],
		b.[LastModifiedBy],
		b.[LastModifiedDate]
		,@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditPurchaseOfReceivablesInsert]...';


GO



CREATE TRIGGER [dbo].[zAuditPurchaseOfReceivablesInsert]
	ON  [dbo].[PurchaseOfReceivables]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT;
	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()
	PRINT @ChangeTrackingCurrentVersion 

	INSERT INTO [dbo].[zAuditPurchaseOfReceivables]
	(
		[Id]
       ,[UtilityCompanyId]
       ,[PorDriverId]
       ,[RateClassId]
       ,[LoadProfileId]
       ,[TariffCodeId]
       ,[IsPorOffered]
       ,[IsPorParticipated]
       ,[PorRecourseId]
       ,[IsPorAssurance]
       ,[PorDiscountRate]
       ,[PorFlatFee]
       ,[PorDiscountEffectiveDate]
       ,[PorDiscountExpirationDate]
       ,[Inactive]
       ,[CreatedBy]
       ,[CreatedDate]
       ,[LastModifiedBy]
       ,[LastModifiedDate]
       ,[IdPrevious]
       ,[UtilityCompanyIdPrevious]
       ,[PorDriverIdPrevious]
       ,[RateClassIdPrevious]
       ,[LoadProfileIdPrevious]
       ,[TariffCodeIdPrevious]
       ,[IsPorOfferedPrevious]
       ,[IsPorParticipatedPrevious]
       ,[PorRecourseIdPrevious]
       ,[IsPorAssurancePrevious]
       ,[PorDiscountRatePrevious]
       ,[PorFlatFeePrevious]
       ,[PorDiscountEffectiveDatePrevious]
       ,[PorDiscountExpirationDatePrevious]
       ,[InactivePrevious]
       ,[CreatedByPrevious]
       ,[CreatedDatePrevious]
       ,[LastModifiedByPrevious]
       ,[LastModifiedDatePrevious]
       ,[SYS_CHANGE_VERSION]
       ,[SYS_CHANGE_CREATION_VERSION]
       ,[SYS_CHANGE_OPERATION]
       ,[SYS_CHANGE_COLUMNS]
	)
	SELECT 
		[Id]
       ,[UtilityCompanyId]
       ,[PorDriverId]
       ,[RateClassId]
       ,[LoadProfileId]
       ,[TariffCodeId]
       ,[IsPorOffered]
       ,[IsPorParticipated]
       ,[PorRecourseId]
       ,[IsPorAssurance]
       ,[PorDiscountRate]
       ,[PorFlatFee]
       ,[PorDiscountEffectiveDate]
       ,[PorDiscountExpirationDate]
       ,[Inactive]
       ,[CreatedBy]
       ,[CreatedDate]
       ,[LastModifiedBy]
       ,[LastModifiedDate]
       ,NULL
       ,NULL
       ,NULL
       ,NULL
       ,NULL
       ,NULL
       ,NULL
       ,NULL
       ,NULL
       ,NULL
       ,NULL
       ,NULL
       ,NULL
       ,NULL
       ,NULL
       ,NULL
       ,NULL
       ,NULL
       ,NULL
		,@ChangeTrackingCurrentVersion
		,@ChangeTrackingCurrentVersion
		,'I'
		,'Id,UtilityCompanyId,PorDriverId,RateClassId,LoadProfileId,TariffCodeId,IsPorOffered,IsPorParticipated,PorRecourceId,IsPorAssurance,PorDiscountRate,PorFlatFee,PorDiscountEffectiveDate,PorDiscountExpirationDate,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
	FROM 
		inserted

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()
		
	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditPurchaseOfReceivablesUpdate]...';


GO



CREATE TRIGGER [dbo].[zAuditPurchaseOfReceivablesUpdate]
	ON [dbo].[PurchaseOfReceivables]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)
			
	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()
	
	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMHU.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditPurchaseOfReceivables (NOLOCK) ZARMHU 
		INNER JOIN inserted a
			ON ZARMHU.Id = a.Id
	set @SysChangeColumns = ''
	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],NEWID()) <> isnull(b.[Id],NEWID()) THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UtilityCompanyId],NEWID()) <> isnull(b.[UtilityCompanyId],NEWID()) THEN 'UtilityCompanyId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[PorDriverId],NEWID()) <> isnull(b.[PorDriverId],NEWID()) THEN 'PorDriverId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[RateClassId],NEWID()) <> isnull(b.[RateClassId],NEWID()) THEN 'RateClassId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LoadProfileId],NEWID()) <> isnull(b.[LoadProfileId],NEWID()) THEN 'LoadProfileId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[TariffCodeId],NEWID()) <> isnull(b.[TariffCodeId],NEWID()) THEN 'TariffCodeId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[IsPorOffered],'') <> isnull(b.[IsPorOffered],'') THEN 'IsPorOffered' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[IsPorParticipated],'') <> isnull(b.[IsPorParticipated],'') THEN 'IsPorParticipated' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[PorRecourseId],NEWID()) <> isnull(b.[PorRecourseId],NEWID()) THEN 'PorRecourseId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[IsPorAssurance],'') <> isnull(b.[IsPorAssurance],'') THEN 'IsPorAssurance' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[PorDiscountRate],'') <> isnull(b.[PorDiscountRate],'') THEN 'PorDiscountRate' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[PorFlatFee],'') <> isnull(b.[PorFlatFee],'') THEN 'PorFlatFee' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[PorDiscountEffectiveDate],'') <> isnull(b.[PorDiscountEffectiveDate],'') THEN 'PorDiscountEffectiveDate' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[PorDiscountExpirationDate],'') <> isnull(b.[PorDiscountExpirationDate],'') THEN 'PorDiscountExpirationDate' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [dbo].[zAuditPurchaseOfReceivables]
           ([Id]
           ,[UtilityCompanyId]
           ,[PorDriverId]
           ,[RateClassId]
           ,[LoadProfileId]
           ,[TariffCodeId]
           ,[IsPorOffered]
           ,[IsPorParticipated]
           ,[PorRecourseId]
           ,[IsPorAssurance]
           ,[PorDiscountRate]
           ,[PorFlatFee]
           ,[PorDiscountEffectiveDate]
           ,[PorDiscountExpirationDate]
           ,[Inactive]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastModifiedBy]
           ,[LastModifiedDate]
           ,[IdPrevious]
           ,[UtilityCompanyIdPrevious]
           ,[PorDriverIdPrevious]
           ,[RateClassIdPrevious]
           ,[LoadProfileIdPrevious]
           ,[TariffCodeIdPrevious]
           ,[IsPorOfferedPrevious]
           ,[IsPorParticipatedPrevious]
           ,[PorRecourseIdPrevious]
           ,[IsPorAssurancePrevious]
           ,[PorDiscountRatePrevious]
           ,[PorFlatFeePrevious]
           ,[PorDiscountEffectiveDatePrevious]
           ,[PorDiscountExpirationDatePrevious]
           ,[InactivePrevious]
           ,[CreatedByPrevious]
           ,[CreatedDatePrevious]
           ,[LastModifiedByPrevious]
           ,[LastModifiedDatePrevious]
           ,[SYS_CHANGE_VERSION]
           ,[SYS_CHANGE_CREATION_VERSION]
           ,[SYS_CHANGE_OPERATION]
           ,[SYS_CHANGE_COLUMNS])
	SELECT 
		a.[Id]
		,a.[UtilityCompanyId]
		,a.[PorDriverId]
		,a.[RateClassId]
		,a.[LoadProfileId]
		,a.[TariffCodeId]
		,a.[IsPorOffered]
		,a.[IsPorParticipated]
		,a.[PorRecourseId]
		,a.[IsPorAssurance]
		,a.[PorDiscountRate]
		,a.[PorFlatFee]
		,a.[PorDiscountEffectiveDate]
		,a.[PorDiscountExpirationDate]
		,a.[Inactive]
		,a.[CreatedBy]
		,a.[CreatedDate]
		,a.[LastModifiedBy]
		,a.[LastModifiedDate]
		,b.[Id]
		,b.[UtilityCompanyId]
		,b.[PorDriverId]
		,b.[RateClassId]
		,b.[LoadProfileId]
		,b.[TariffCodeId]
		,b.[IsPorOffered]
		,b.[IsPorParticipated]
		,b.[PorRecourseId]
		,b.[IsPorAssurance]
		,b.[PorDiscountRate]
		,b.[PorFlatFee]
		,b.[PorDiscountEffectiveDate]
		,b.[PorDiscountExpirationDate]
		,b.[Inactive]
		,b.[CreatedBy]
		,b.[CreatedDate]
		,b.[LastModifiedBy]
		,b.[LastModifiedDate]
		,@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditRateClassInsert]...';


GO


CREATE TRIGGER [dbo].[zAuditRateClassInsert]
	ON  [dbo].[RateClass]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	INSERT INTO [dbo].[zAuditRateClass]
	(	
		[Id],
		[UtilityCompanyId],
		[RateClassCode],
		[Description],
		[AccountTypeId],
		[LpStandardRateClassId],
		[RateClassId],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[UtilityCompanyIdPrevious],
		[RateClassCodePrevious],
		[DescriptionPrevious],
		[AccountTypeIdPrevious],
		[LpStandardRateClassIdPrevious],
		[RateClassIdPrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
		SELECT 
			[Id],
			[UtilityCompanyId],
			[RateClassCode],
			[Description],
			[AccountTypeId],
			[LpStandardRateClassId],
			[RateClassId],
			[Inactive],
			[CreatedBy],
			[CreatedDate],
			[LastModifiedBy],
			[LastModifiedDate],
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			@ChangeTrackingCurrentVersion,
			@ChangeTrackingCurrentVersion,
			'I',
			'Id,UtilityCompanyId,RateClassCode,Description,AccountTypeId,LpStandardRateClassId,RateClassId,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
		FROM 
			inserted

		INSERT INTO [ChangeTableVersioning]
		(
			Id,
			ChangeTrackingVersion,
			CreatedDate
		)
		SELECT
			NEWID(),
			@ChangeTrackingCurrentVersion,
			GETDATE()

		SET NOCOUNT OFF;
	END
GO
PRINT N'Creating [dbo].[zAuditRateClassUpdate]...';


GO

CREATE TRIGGER [dbo].[zAuditRateClassUpdate]
	ON  [dbo].[RateClass]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()
	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMGT.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditRateClass (NOLOCK) ZARMGT
		INNER JOIN inserted a
			ON ZARMGT.Id = a.Id
	set @SysChangeColumns = ''
	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],'') <> isnull(b.[Id],'') THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UtilityCompanyId],'') <> isnull(b.[UtilityCompanyId],'') THEN 'UtilityCompanyId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[RateClassCode],'') <> isnull(b.[RateClassCode],'') THEN 'RateClassCode' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Description],'') <> isnull(b.[Description],'') THEN 'Description' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[AccountTypeId],'') <> isnull(b.[AccountTypeId],'') THEN 'AccountTypeId' + ',' ELSE '' END
		+ CASE WHEN a.[LpStandardRateClassId] <> b.[LpStandardRateClassId] THEN 'LpStandardRateClassId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[RateClassId],0) <> isnull(b.[RateClassId],0) THEN 'RateClassId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [dbo].[zAuditRateClass]
	(
		[Id],
		[UtilityCompanyId],
		[RateClassCode],
		[Description],
		[AccountTypeId],
		[LpStandardRateClassId],
		[RateClassId],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[UtilityCompanyIdPrevious],
		[RateClassCodePrevious],
		[DescriptionPrevious],
		[AccountTypeIdPrevious],
		[LpStandardRateClassIdPrevious],
		[RateClassIdPrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
	SELECT 
		a.[Id],
		a.[UtilityCompanyId],
		a.[RateClassCode],
		a.[Description],
		a.[AccountTypeId],
		a.[LpStandardRateClassId],
		a.[RateClassId],
		a.[Inactive],
		a.[CreatedBy],
		a.[CreatedDate],
		a.[LastModifiedBy],
		a.[LastModifiedDate],
		b.[Id],
		b.[UtilityCompanyId],
		b.[RateClassCode],
		b.[Description],
		b.[AccountTypeId],
		b.[LpStandardRateClassId],
		b.[RateClassId],
		b.[Inactive],
		b.[CreatedBy],
		b.[CreatedDate],
		b.[LastModifiedBy],
		b.[LastModifiedDate],
		@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]


	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditRateClassAliasInsert]...';


GO

CREATE TRIGGER [dbo].[zAuditRateClassAliasInsert]
	ON  [dbo].[RateClassAlias]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	INSERT INTO [dbo].[zAuditRateClassAlias]
	(	
		[Id]
		,[RateClassId]
		,[RateClassCodeAlias]
		,[Inactive]
		,[CreatedBy]
		,[CreatedDate]
		,[LastModifiedBy]
		,[LastModifiedDate]
		,[IdPrevious]
		,[RateClassIdPrevious]
		,[RateClassCodeAliasPrevious]
		,[InactivePrevious]
		,[CreatedByPrevious]
		,[CreatedDatePrevious]
		,[LastModifiedByPrevious]
		,[LastModifiedDatePrevious]
		,[SYS_CHANGE_VERSION]
		,[SYS_CHANGE_CREATION_VERSION]
		,[SYS_CHANGE_OPERATION]
		,[SYS_CHANGE_COLUMNS]
	)
		SELECT 
			[Id],
			[RateClassId],
			[RateClassCodeAlias],
			[Inactive],
			[CreatedBy],
			[CreatedDate],
			[LastModifiedBy],
			[LastModifiedDate],
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			@ChangeTrackingCurrentVersion,
			@ChangeTrackingCurrentVersion,
			'I',
			'Id,RateClassId,RateClassCodeAlias,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
		FROM 
			inserted

		INSERT INTO [ChangeTableVersioning]
		(
			Id,
			ChangeTrackingVersion,
			CreatedDate
		)
		SELECT
			NEWID(),
			@ChangeTrackingCurrentVersion,
			GETDATE()

		SET NOCOUNT OFF;
	END
GO
PRINT N'Creating [dbo].[zAuditRateClassAliasUpdate]...';


GO


CREATE TRIGGER [dbo].[zAuditRateClassAliasUpdate]
	ON  [dbo].[RateClassAlias]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMGT.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditRateClassAlias (NOLOCK) ZARMGT
		INNER JOIN inserted a
			ON ZARMGT.Id = a.Id

	set @SysChangeColumns = ''

	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],'') <> isnull(b.[Id],'') THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[RateClassId],'') <> isnull(b.[RateClassId],'') THEN 'RateClassId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[RateClassCodeAlias],'') <> isnull(b.[RateClassCodeAlias],'') THEN 'RateClassCodeAlias' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [dbo].[zAuditRateClassAlias]
	(
		[Id],
		[RateClassId],
		[RateClassCodeAlias],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[RateClassIdPrevious],
		[RateClassCodeAliasPrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
	SELECT 
		a.[Id],
		a.[RateClassId],
		a.[RateClassCodeAlias],
		a.[Inactive],
		a.[CreatedBy],
		a.[CreatedDate],
		a.[LastModifiedBy],
		a.[LastModifiedDate],
		b.[Id],
		b.[RateClassId],
		b.[RateClassCodeAlias],
		b.[Inactive],
		b.[CreatedBy],
		b.[CreatedDate],
		b.[LastModifiedBy],
		b.[LastModifiedDate],
		@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()
	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditRequestModeEnrollmentTypeInsert]...';


GO





CREATE TRIGGER [dbo].[zAuditRequestModeEnrollmentTypeInsert]
	ON  [dbo].[RequestModeEnrollmentType]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)
	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	INSERT INTO [dbo].[zAuditRequestModeEnrollmentType]
           ([Id]
           ,[Name]
           ,[Description]
           ,[EnumValue]
           ,[Inactive]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastModifiedBy]
           ,[LastModifiedDate]
           ,[IdPrevious]
           ,[NamePrevious]
           ,[DescriptionPrevious]
           ,[EnumValuePrevious]
           ,[InactivePrevious]
           ,[CreatedByPrevious]
           ,[CreatedDatePrevious]
           ,[LastModifiedByPrevious]
           ,[LastModifiedDatePrevious]
           ,[SYS_CHANGE_VERSION]
           ,[SYS_CHANGE_CREATION_VERSION]
           ,[SYS_CHANGE_OPERATION]
           ,[SYS_CHANGE_COLUMNS])
	SELECT 
		a.[Id]
		,a.[Name]
		,a.[Description]
		,a.[EnumValue]
		,a.[Inactive]
		,a.[CreatedBy]
		,a.[CreatedDate]
		,a.[LastModifiedBy]
		,a.[LastModifiedDate]
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,@ChangeTrackingCurrentVersion
		,@ChangeTrackingCurrentVersion
		,'I'
		,'Id,Name,Description,EnumValue,Inactive,CreatedBy,CreatedDate,LastModifiedBy,[LastModifiedDate'	
	FROM 
		inserted a


	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()


	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditRequestModeEnrollmentTypeUpdate]...';


GO




CREATE TRIGGER [dbo].[zAuditRequestModeEnrollmentTypeUpdate]
	ON [dbo].[RequestModeEnrollmentType]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMET.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditRequestModeEnrollmentType (NOLOCK) ZARMET
		INNER JOIN inserted a
			ON ZARMET.Id = a.Id
	set @SysChangeColumns = ''
	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],'') <> isnull(b.[Id],'') THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Name],'') <> isnull(b.[Name],'') THEN 'Name' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Description],'') <> isnull(b.[Description],'') THEN 'Description' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[EnumValue],-2) <> isnull(b.[EnumValue],-1) THEN 'EnumValue' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]
	
	INSERT INTO [dbo].[zAuditRequestModeEnrollmentType]
           ([Id]
           ,[Name]
           ,[Description]
           ,[EnumValue]
           ,[Inactive]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastModifiedBy]
           ,[LastModifiedDate]
           ,[IdPrevious]
           ,[NamePrevious]
           ,[DescriptionPrevious]
           ,[EnumValuePrevious]
           ,[InactivePrevious]
           ,[CreatedByPrevious]
           ,[CreatedDatePrevious]
           ,[LastModifiedByPrevious]
           ,[LastModifiedDatePrevious]
           ,[SYS_CHANGE_VERSION]
           ,[SYS_CHANGE_CREATION_VERSION]
           ,[SYS_CHANGE_OPERATION]
           ,[SYS_CHANGE_COLUMNS])
	SELECT 
		a.[Id]
		,a.[Name]
		,a.[Description]
		,a.[EnumValue]
		,a.[Inactive]
		,a.[CreatedBy]
		,a.[CreatedDate]
		,a.[LastModifiedBy]
		,a.[LastModifiedDate]
		,b.[Id]
		,b.[Name]
		,b.[Description]
		,b.[EnumValue]
		,b.[Inactive]
		,b.[CreatedBy]
		,b.[CreatedDate]
		,b.[LastModifiedBy]
		,b.[LastModifiedDate]
		,@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]
			

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()
			
	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditRequestModeHistoricalUsageUpdate]...';


GO


CREATE TRIGGER [dbo].[zAuditRequestModeHistoricalUsageUpdate]
	ON  [dbo].[RequestModeHistoricalUsage]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)
			
	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()
	
	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMHU.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditRequestModeHistoricalUsage (NOLOCK) ZARMHU 
		INNER JOIN inserted a
			ON ZARMHU.Id = a.Id
	set @SysChangeColumns = ''
	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],'') <> isnull(b.[Id],'') THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UtilityCompanyId],'') <> isnull(b.[UtilityCompanyId],'') THEN 'UtilityCompanyId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[RequestModeEnrollmentTypeId],'') <> isnull(b.[RequestModeEnrollmentTypeId],'') THEN 'RequestModeEnrollmentTypeId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[RequestModeTypeId],'') <> isnull(b.[RequestModeTypeId],'') THEN 'RequestModeTypeId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[AddressForPreEnrollment],'') <> isnull(b.[AddressForPreEnrollment],'') THEN 'AddressForPreEnrollment' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[EmailTemplate],'') <> isnull(b.[EmailTemplate],'') THEN 'EmailTemplate' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Instructions],'') <> isnull(b.[Instructions],'') THEN 'Instructions' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UtilitysSlaHistoricalUsageResponseInDays],'') <> isnull(b.[UtilitysSlaHistoricalUsageResponseInDays],'') THEN 'UtilitysSlaHistoricalUsageResponseInDays' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LibertyPowersSlaFollowUpHistoricalUsageResponseInDays],'') <> isnull(b.[LibertyPowersSlaFollowUpHistoricalUsageResponseInDays],'') THEN 'LibertyPowersSlaFollowUpHistoricalUsageResponseInDays' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[IsLoaRequired],'') <> isnull(b.[IsLoaRequired],'') THEN 'IsLoaRequired' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]
	


	INSERT INTO [Lp_UtilityManagement].[dbo].[zAuditRequestModeHistoricalUsage]
           ([Id]
           ,[UtilityCompanyId]
           ,[RequestModeEnrollmentTypeId]
           ,[RequestModeTypeId]
           ,[AddressForPreEnrollment]
           ,[EmailTemplate]
           ,[Instructions]
           ,[UtilitysSlaHistoricalUsageResponseInDays]
           ,[LibertyPowersSlaFollowUpHistoricalUsageResponseInDays]
           ,[IsLoaRequired]
           ,[Inactive]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastModifiedBy]
           ,[LastModifiedDate]
           ,[IdPrevious]
           ,[UtilityCompanyIdPrevious]
           ,[RequestModeEnrollmentTypeIdPrevious]
           ,[RequestModeTypeIdPrevious]
           ,[AddressForPreEnrollmentPrevious]
           ,[EmailTemplatePrevious]
           ,[InstructionsPrevious]
           ,[UtilitysSlaHistoricalUsageResponseInDaysPrevious]
           ,[LibertyPowersSlaFollowUpHistoricalUsageResponseInDaysPrevious]
           ,[IsLoaRequiredPrevious]
           ,[InactivePrevious]
           ,[CreatedByPrevious]
           ,[CreatedDatePrevious]
           ,[LastModifiedByPrevious]
           ,[LastModifiedDatePrevious]
           ,[SYS_CHANGE_VERSION]
           ,[SYS_CHANGE_CREATION_VERSION]
           ,[SYS_CHANGE_OPERATION]
           ,[SYS_CHANGE_COLUMNS])
	SELECT 
		a.[Id]
		,a.[UtilityCompanyId]
		,a.[RequestModeEnrollmentTypeId]
		,a.[RequestModeTypeId]
		,a.[AddressForPreEnrollment]
		,a.[EmailTemplate]
		,a.[Instructions]
		,a.[UtilitysSlaHistoricalUsageResponseInDays]
		,a.[LibertyPowersSlaFollowUpHistoricalUsageResponseInDays]
		,a.[IsLoaRequired]
		,a.[Inactive]
		,a.[CreatedBy]
		,a.[CreatedDate]
		,a.[LastModifiedBy]
		,a.[LastModifiedDate]
		,b.[Id]
		,b.[UtilityCompanyId]
		,b.[RequestModeEnrollmentTypeId]
		,b.[RequestModeTypeId]
		,b.[AddressForPreEnrollment]
		,b.[EmailTemplate]
		,b.[Instructions]
		,b.[UtilitysSlaHistoricalUsageResponseInDays]
		,b.[LibertyPowersSlaFollowUpHistoricalUsageResponseInDays]
		,b.[IsLoaRequired]
		,b.[Inactive]
		,b.[CreatedBy]
		,b.[CreatedDate]
		,b.[LastModifiedBy]
		,b.[LastModifiedDate]
		,@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]
			
	SET NOCOUNT OFF;

END
GO
PRINT N'Creating [dbo].[zAuditRequestModeHistoricalUsageInsert]...';


GO

CREATE TRIGGER [dbo].[zAuditRequestModeHistoricalUsageInsert]
	ON  [dbo].[RequestModeHistoricalUsage]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT;
	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()
	PRINT @ChangeTrackingCurrentVersion 


	INSERT INTO [Lp_UtilityManagement].[dbo].[zAuditRequestModeHistoricalUsage]
	(
		[Id]
       ,[UtilityCompanyId]
       ,[RequestModeEnrollmentTypeId]
       ,[RequestModeTypeId]
       ,[AddressForPreEnrollment]
       ,[EmailTemplate]
       ,[Instructions]
       ,[UtilitysSlaHistoricalUsageResponseInDays]
       ,[LibertyPowersSlaFollowUpHistoricalUsageResponseInDays]
       ,[IsLoaRequired]
       ,[Inactive]
       ,[CreatedBy]
       ,[CreatedDate]
       ,[LastModifiedBy]
       ,[LastModifiedDate]
       ,[IdPrevious]
       ,[UtilityCompanyIdPrevious]
       ,[RequestModeEnrollmentTypeIdPrevious]
       ,[RequestModeTypeIdPrevious]
       ,[AddressForPreEnrollmentPrevious]
       ,[EmailTemplatePrevious]
       ,[InstructionsPrevious]
       ,[UtilitysSlaHistoricalUsageResponseInDaysPrevious]
       ,[LibertyPowersSlaFollowUpHistoricalUsageResponseInDaysPrevious]
       ,[IsLoaRequiredPrevious]
       ,[InactivePrevious]
       ,[CreatedByPrevious]
       ,[CreatedDatePrevious]
       ,[LastModifiedByPrevious]
       ,[LastModifiedDatePrevious]
       ,[SYS_CHANGE_VERSION]
       ,[SYS_CHANGE_CREATION_VERSION]
       ,[SYS_CHANGE_OPERATION]
       ,[SYS_CHANGE_COLUMNS]
	)
	SELECT 
		[Id]
       ,[UtilityCompanyId]
       ,[RequestModeEnrollmentTypeId]
       ,[RequestModeTypeId]
       ,[AddressForPreEnrollment]
       ,[EmailTemplate]
       ,[Instructions]
       ,[UtilitysSlaHistoricalUsageResponseInDays]
       ,[LibertyPowersSlaFollowUpHistoricalUsageResponseInDays]
       ,[IsLoaRequired]
       ,[Inactive]
       ,[CreatedBy]
       ,[CreatedDate]
       ,[LastModifiedBy]
       ,[LastModifiedDate]
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,@ChangeTrackingCurrentVersion
		,@ChangeTrackingCurrentVersion
		,'I'
		,'Id,UtilityCompanyId,RequestModeEnrollmentTypeId,RequestModeTypeId,AddressForPreEnrollment,EmailTemplate,Instructions,UtilitysSlaHistoricalUsageResponseInDays,LibertyPowersSlaFollowUpHistoricalUsageResponseInDays,IsLoaRequired,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
	FROM 
		inserted

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()
		
	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditRequestModeIcapInsert]...';


GO



CREATE TRIGGER [dbo].[zAuditRequestModeIcapInsert]
	ON  [dbo].[RequestModeIcap]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT;
	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()
	PRINT @ChangeTrackingCurrentVersion 

	INSERT INTO [dbo].[zAuditRequestModeIcap]
	(
		[Id]
       ,[UtilityCompanyId]
       ,[RequestModeEnrollmentTypeId]
       ,[RequestModeTypeId]
       ,[AddressForPreEnrollment]
       ,[EmailTemplate]
       ,[Instructions]
       ,[UtilitysSlaIcapResponseInDays]
       ,[LibertyPowersSlaFollowUpIcapResponseInDays]
       ,[IsLoaRequired]
       ,[Inactive]
       ,[CreatedBy]
       ,[CreatedDate]
       ,[LastModifiedBy]
       ,[LastModifiedDate]
       ,[IdPrevious]
       ,[UtilityCompanyIdPrevious]
       ,[RequestModeEnrollmentTypeIdPrevious]
       ,[RequestModeTypeIdPrevious]
       ,[AddressForPreEnrollmentPrevious]
       ,[EmailTemplatePrevious]
       ,[InstructionsPrevious]
       ,[UtilitysSlaIcapResponseInDaysPrevious]
       ,[LibertyPowersSlaFollowUpIcapResponseInDaysPrevious]
       ,[IsLoaRequiredPrevious]
       ,[InactivePrevious]
       ,[CreatedByPrevious]
       ,[CreatedDatePrevious]
       ,[LastModifiedByPrevious]
       ,[LastModifiedDatePrevious]
       ,[SYS_CHANGE_VERSION]
       ,[SYS_CHANGE_CREATION_VERSION]
       ,[SYS_CHANGE_OPERATION]
       ,[SYS_CHANGE_COLUMNS]
	)
	SELECT 
		[Id]
       ,[UtilityCompanyId]
       ,[RequestModeEnrollmentTypeId]
       ,[RequestModeTypeId]
       ,[AddressForPreEnrollment]
       ,[EmailTemplate]
       ,[Instructions]
       ,[UtilitysSlaIcapResponseInDays]
       ,[LibertyPowersSlaFollowUpIcapResponseInDays]
       ,[IsLoaRequired]
       ,[Inactive]
       ,[CreatedBy]
       ,[CreatedDate]
       ,[LastModifiedBy]
       ,[LastModifiedDate]
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,@ChangeTrackingCurrentVersion
		,@ChangeTrackingCurrentVersion
		,'I'
		,'Id,UtilityCompanyId,RequestModeEnrollmentTypeId,RequestModeTypeId,AddressForPreEnrollment,EmailTemplate,Instructions,UtilitysSlaIcapResponseInDays,LibertyPowersSlaFollowUpIcapResponseInDays,IsLoaRequired,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
	FROM 
		inserted

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()
		
	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditRequestModeIcapUpdate]...';


GO

CREATE TRIGGER [dbo].[zAuditRequestModeIcapUpdate]
	ON [dbo].[RequestModeIcap]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)
			
	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()
	
	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMHU.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditRequestModeIcap (NOLOCK) ZARMHU 
		INNER JOIN inserted a
			ON ZARMHU.Id = a.Id
	set @SysChangeColumns = ''
	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],'') <> isnull(b.[Id],'') THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UtilityCompanyId],'') <> isnull(b.[UtilityCompanyId],'') THEN 'UtilityCompanyId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[RequestModeEnrollmentTypeId],'') <> isnull(b.[RequestModeEnrollmentTypeId],'') THEN 'RequestModeEnrollmentTypeId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[RequestModeTypeId],'') <> isnull(b.[RequestModeTypeId],'') THEN 'RequestModeTypeId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[AddressForPreEnrollment],'') <> isnull(b.[AddressForPreEnrollment],'') THEN 'AddressForPreEnrollment' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[EmailTemplate],'') <> isnull(b.[EmailTemplate],'') THEN 'EmailTemplate' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Instructions],'') <> isnull(b.[Instructions],'') THEN 'Instructions' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UtilitysSlaIcapResponseInDays],'') <> isnull(b.[UtilitysSlaIcapResponseInDays],'') THEN 'UtilitysSlaIcapResponseInDays' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LibertyPowersSlaFollowUpIcapResponseInDays],'') <> isnull(b.[LibertyPowersSlaFollowUpIcapResponseInDays],'') THEN 'LibertyPowersSlaFollowUpIcapResponseInDays' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[IsLoaRequired],'') <> isnull(b.[IsLoaRequired],'') THEN 'IsLoaRequired' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [dbo].[zAuditRequestModeIcap]
           ([Id]
           ,[UtilityCompanyId]
           ,[RequestModeEnrollmentTypeId]
           ,[RequestModeTypeId]
           ,[AddressForPreEnrollment]
           ,[EmailTemplate]
           ,[Instructions]
           ,[UtilitysSlaIcapResponseInDays]
           ,[LibertyPowersSlaFollowUpIcapResponseInDays]
           ,[IsLoaRequired]
           ,[Inactive]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastModifiedBy]
           ,[LastModifiedDate]
           ,[IdPrevious]
           ,[UtilityCompanyIdPrevious]
           ,[RequestModeEnrollmentTypeIdPrevious]
           ,[RequestModeTypeIdPrevious]
           ,[AddressForPreEnrollmentPrevious]
           ,[EmailTemplatePrevious]
           ,[InstructionsPrevious]
           ,[UtilitysSlaIcapResponseInDaysPrevious]
           ,[LibertyPowersSlaFollowUpIcapResponseInDaysPrevious]
           ,[IsLoaRequiredPrevious]
           ,[InactivePrevious]
           ,[CreatedByPrevious]
           ,[CreatedDatePrevious]
           ,[LastModifiedByPrevious]
           ,[LastModifiedDatePrevious]
           ,[SYS_CHANGE_VERSION]
           ,[SYS_CHANGE_CREATION_VERSION]
           ,[SYS_CHANGE_OPERATION]
           ,[SYS_CHANGE_COLUMNS])
	SELECT 
		a.[Id]
		,a.[UtilityCompanyId]
		,a.[RequestModeEnrollmentTypeId]
		,a.[RequestModeTypeId]
		,a.[AddressForPreEnrollment]
		,a.[EmailTemplate]
		,a.[Instructions]
		,a.[UtilitysSlaIcapResponseInDays]
		,a.[LibertyPowersSlaFollowUpIcapResponseInDays]
		,a.[IsLoaRequired]
		,a.[Inactive]
		,a.[CreatedBy]
		,a.[CreatedDate]
		,a.[LastModifiedBy]
		,a.[LastModifiedDate]
		,b.[Id]
		,b.[UtilityCompanyId]
		,b.[RequestModeEnrollmentTypeId]
		,b.[RequestModeTypeId]
		,b.[AddressForPreEnrollment]
		,b.[EmailTemplate]
		,b.[Instructions]
		,b.[UtilitysSlaIcapResponseInDays]
		,b.[LibertyPowersSlaFollowUpIcapResponseInDays]
		,b.[IsLoaRequired]
		,b.[Inactive]
		,b.[CreatedBy]
		,b.[CreatedDate]
		,b.[LastModifiedBy]
		,b.[LastModifiedDate]
		,@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditRequestModeIdrInsert]...';


GO







CREATE TRIGGER [dbo].[zAuditRequestModeIdrInsert]
	ON  [dbo].[RequestModeIdr]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	INSERT INTO [dbo].[zAuditRequestModeIdr]
	(	
		[Id],
		[UtilityCompanyId],
		[RequestModeEnrollmentTypeId],
		[RequestModeTypeId],
		[AddressForPreEnrollment],
		[EmailTemplate],
		[Instructions],
		[UtilitysSlaIdrResponseInDays],
		[LibertyPowersSlaFollowUpIdrResponseInDays],
		[IsLoaRequired],
		[RequestCostAccount],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[UtilityCompanyIdPrevious],
		[RequestModeEnrollmentTypeIdPrevious],
		[RequestModeTypeIdPrevious],
		[AddressForPreEnrollmentPrevious],
		[EmailTemplatePrevious],
		[InstructionsPrevious],
		[UtilitysSlaIdrResponseInDaysPrevious],
		[LibertyPowersSlaFollowUpIdrResponseInDaysPrevious],
		[IsLoaRequiredPrevious],
		[RequestCostAccountPrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
		SELECT 
			[Id],
			[UtilityCompanyId],
			[RequestModeEnrollmentTypeId],
			[RequestModeTypeId],
			[AddressForPreEnrollment],
			[EmailTemplate],
			[Instructions],
			[UtilitysSlaIdrResponseInDays],
			[LibertyPowersSlaFollowUpIdrResponseInDays],
			[IsLoaRequired],
			[RequestCostAccount],
			[Inactive],
			[CreatedBy],
			[CreatedDate],
			[LastModifiedBy],
			[LastModifiedDate],
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			@ChangeTrackingCurrentVersion,
			@ChangeTrackingCurrentVersion,
			'I',
			'Id,UtilityCompanyId,RequestModeEnrollmentTypeId,RequestModeTypeId,AddressForPreEnrollment,EmailTemplate,Instructions,UtilitysSlaIdrResponseInDays,LibertyPowersSlaFollowUpIdrResponseInDays,IsLoaRequired,RequestCostAccount,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
		FROM 
			inserted

		INSERT INTO [ChangeTableVersioning]
		(
			Id,
			ChangeTrackingVersion,
			CreatedDate
		)
		SELECT
			NEWID(),
			@ChangeTrackingCurrentVersion,
			GETDATE()

		SET NOCOUNT OFF;
	END
GO
PRINT N'Creating [dbo].[zAuditRequestModeIdrUpdate]...';


GO




CREATE TRIGGER [dbo].[zAuditRequestModeIdrUpdate]
	ON  [dbo].[RequestModeIdr]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMGT.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditRequestModeIdr (NOLOCK) ZARMGT
		INNER JOIN inserted a
			ON ZARMGT.Id = a.Id
	set @SysChangeColumns = ''
	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],'') <> isnull(b.[Id],'') THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UtilityCompanyId],'') <> isnull(b.[UtilityCompanyId],'') THEN 'UtilityCompanyId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[RequestModeEnrollmentTypeId],'') <> isnull(b.[RequestModeEnrollmentTypeId],'') THEN 'RequestModeEnrollmentTypeId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[RequestModeTypeId],'') <> isnull(b.[RequestModeTypeId],'') THEN 'RequestModeTypeId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[AddressForPreEnrollment],'') <> isnull(b.[AddressForPreEnrollment],'') THEN 'AddressForPreEnrollment' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[EmailTemplate],'') <> isnull(b.[EmailTemplate],'') THEN 'EmailTemplate' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Instructions],'') <> isnull(b.[Instructions],'') THEN 'Instructions' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UtilitysSlaIdrResponseInDays],'') <> isnull(b.[UtilitysSlaIdrResponseInDays],'') THEN 'UtilitysSlaIdrResponseInDays' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LibertyPowersSlaFollowUpIdrResponseInDays],'') <> isnull(b.[LibertyPowersSlaFollowUpIdrResponseInDays],'') THEN 'LibertyPowersSlaFollowUpIdrResponseInDays' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[IsLoaRequired],'') <> isnull(b.[IsLoaRequired],'') THEN 'IsLoaRequired' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[RequestCostAccount],'') <> isnull(b.[RequestCostAccount],'') THEN 'RequestCostAccount' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [dbo].[zAuditRequestModeIdr]
	(
		[Id],
		[UtilityCompanyId],
		[RequestModeEnrollmentTypeId],
		[RequestModeTypeId],
		[AddressForPreEnrollment],
		[EmailTemplate],
		[Instructions],
		[UtilitysSlaIdrResponseInDays],
		[LibertyPowersSlaFollowUpIdrResponseInDays],
		[IsLoaRequired],
		[RequestCostAccount],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[UtilityCompanyIdPrevious],
		[RequestModeEnrollmentTypeIdPrevious],
		[RequestModeTypeIdPrevious],
		[AddressForPreEnrollmentPrevious],
		[EmailTemplatePrevious],
		[InstructionsPrevious],
		[UtilitysSlaIdrResponseInDaysPrevious],
		[LibertyPowersSlaFollowUpIdrResponseInDaysPrevious],
		[IsLoaRequiredPrevious],
		[RequestCostAccountPrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
	SELECT 
		a.[Id],
		a.[UtilityCompanyId],
		a.[RequestModeEnrollmentTypeId],
		a.[RequestModeTypeId],
		a.[AddressForPreEnrollment],
		a.[EmailTemplate],
		a.[Instructions],
		a.[UtilitysSlaIdrResponseInDays],
		a.[LibertyPowersSlaFollowUpIdrResponseInDays],
		a.[IsLoaRequired],
		a.[RequestCostAccount],
		a.[Inactive],
		a.[CreatedBy],
		a.[CreatedDate],
		a.[LastModifiedBy],
		a.[LastModifiedDate],
		b.[Id],
		b.[UtilityCompanyId],
		b.[RequestModeEnrollmentTypeId],
		b.[RequestModeTypeId],
		b.[AddressForPreEnrollment],
		b.[EmailTemplate],
		b.[Instructions],
		b.[UtilitysSlaIdrResponseInDays],
		b.[LibertyPowersSlaFollowUpIdrResponseInDays],
		b.[IsLoaRequired],
		b.[RequestCostAccount],
		b.[Inactive],
		b.[CreatedBy],
		b.[CreatedDate],
		b.[LastModifiedBy],
		b.[LastModifiedDate]
		,@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditRequestModeTypeInsert]...';


GO


CREATE TRIGGER [dbo].[zAuditRequestModeTypeInsert]
	ON  [dbo].[RequestModeType]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

		DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	INSERT INTO [dbo].[zAuditRequestModeType]
           ([Id]
           ,[Name]
           ,[Description]
           ,[Inactive]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastModifiedBy]
           ,[LastModifiedDate]
           ,[IdPrevious]
           ,[NamePrevious]
           ,[DescriptionPrevious]
           ,[InactivePrevious]
           ,[CreatedByPrevious]
           ,[CreatedDatePrevious]
           ,[LastModifiedByPrevious]
           ,[LastModifiedDatePrevious]
           ,[SYS_CHANGE_VERSION]
           ,[SYS_CHANGE_CREATION_VERSION]
           ,[SYS_CHANGE_OPERATION]
           ,[SYS_CHANGE_COLUMNS])
	SELECT 
		 a.[Id]
		,a.[Name]
		,a.[Description]
		,a.[Inactive]
		,a.[CreatedBy]
		,a.[CreatedDate]
		,a.[LastModifiedBy]
		,a.[LastModifiedDate]
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,@ChangeTrackingCurrentVersion
		,@ChangeTrackingCurrentVersion
		,'I'
		,'Id,Name,Description,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'	
	FROM 
		inserted a

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditRequestModeTypeUpdate]...';


GO




CREATE TRIGGER [dbo].[zAuditRequestModeTypeUpdate]
	ON  [dbo].[RequestModeType]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMT.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditRequestModeType (NOLOCK) ZARMT
		INNER JOIN inserted a
			ON ZARMT.Id = a.Id
	set @SysChangeColumns = ''
	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],'') <> isnull(b.[Id],'') THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Name],'') <> isnull(b.[Name],'') THEN 'Name' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Description],'') <> isnull(b.[Description],'') THEN 'Description' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]
	
	INSERT INTO [dbo].[zAuditRequestModeType]
           ([Id]
           ,[Name]
           ,[Description]
           ,[Inactive]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastModifiedBy]
           ,[LastModifiedDate]
           ,[IdPrevious]
           ,[NamePrevious]
           ,[DescriptionPrevious]
           ,[InactivePrevious]
           ,[CreatedByPrevious]
           ,[CreatedDatePrevious]
           ,[LastModifiedByPrevious]
           ,[LastModifiedDatePrevious]
           ,[SYS_CHANGE_VERSION]
           ,[SYS_CHANGE_CREATION_VERSION]
           ,[SYS_CHANGE_OPERATION]
           ,[SYS_CHANGE_COLUMNS])
	SELECT 
		a.[Id]
		,a.[Name]
		,a.[Description]
		,a.[Inactive]
		,a.[CreatedBy]
		,a.[CreatedDate]
		,a.[LastModifiedBy]
		,a.[LastModifiedDate]
		,b.[Id]
		,b.[Name]
		,b.[Description]
		,b.[Inactive]
		,b.[CreatedBy]
		,b.[CreatedDate]
		,b.[LastModifiedBy]
		,b.[LastModifiedDate]
		,@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditRequestModeTypeGenreInsert]...';


GO





CREATE TRIGGER [dbo].[zAuditRequestModeTypeGenreInsert]
	ON  [dbo].[RequestModeTypeGenre]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()
	
	INSERT INTO [dbo].[zAuditRequestModeTypeGenre]
           ([Id]
           ,[Name]
           ,[Description]
           ,[Inactive]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastModifiedBy]
           ,[LastModifiedDate]
           ,[IdPrevious]
           ,[NamePrevious]
           ,[DescriptionPrevious]
           ,[InactivePrevious]
           ,[CreatedByPrevious]
           ,[CreatedDatePrevious]
           ,[LastModifiedByPrevious]
           ,[LastModifiedDatePrevious]
           ,[SYS_CHANGE_VERSION]
           ,[SYS_CHANGE_CREATION_VERSION]
           ,[SYS_CHANGE_OPERATION]
           ,[SYS_CHANGE_COLUMNS])
	SELECT 
		a.[Id]
		,a.[Name]
		,a.[Description]
		,a.[Inactive]
		,a.[CreatedBy]
		,a.[CreatedDate]
		,a.[LastModifiedBy]
		,a.[LastModifiedDate]
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,@ChangeTrackingCurrentVersion
		,@ChangeTrackingCurrentVersion
		,'I'
		,'Id,Name,Description,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
	FROM 
		inserted a

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditRequestModeTypeGenreUpdate]...';


GO




CREATE TRIGGER [dbo].[zAuditRequestModeTypeGenreUpdate]
	ON  [dbo].[RequestModeTypeGenre]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMGT.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditRequestModeType (NOLOCK) ZARMGT
		INNER JOIN inserted a
			ON ZARMGT.Id = a.Id
	set @SysChangeColumns = ''
	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],'') <> isnull(b.[Id],'') THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Name],'') <> isnull(b.[Name],'') THEN 'Name' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Description],'') <> isnull(b.[Description],'') THEN 'Description' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]
	
	INSERT INTO [dbo].[zAuditRequestModeTypeGenre]
           ([Id]
           ,[Name]
           ,[Description]
           ,[Inactive]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastModifiedBy]
           ,[LastModifiedDate]
           ,[IdPrevious]
           ,[NamePrevious]
           ,[DescriptionPrevious]
           ,[InactivePrevious]
           ,[CreatedByPrevious]
           ,[CreatedDatePrevious]
           ,[LastModifiedByPrevious]
           ,[LastModifiedDatePrevious]
           ,[SYS_CHANGE_VERSION]
           ,[SYS_CHANGE_CREATION_VERSION]
           ,[SYS_CHANGE_OPERATION]
           ,[SYS_CHANGE_COLUMNS])
	SELECT 
		a.[Id]
		,a.[Name]
		,a.[Description]
		,a.[Inactive]
		,a.[CreatedBy]
		,a.[CreatedDate]
		,a.[LastModifiedBy]
		,a.[LastModifiedDate]
		,b.[Id]
		,b.[Name]
		,b.[Description]
		,b.[Inactive]
		,b.[CreatedBy]
		,b.[CreatedDate]
		,b.[LastModifiedBy]
		,b.[LastModifiedDate]
		,@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditRequestModeTypeToRequestModeEnrollmentTypeInsert]...';


GO





CREATE TRIGGER [dbo].[zAuditRequestModeTypeToRequestModeEnrollmentTypeInsert]
	ON  [dbo].[RequestModeTypeToRequestModeEnrollmentType]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	INSERT INTO [dbo].[zAuditRequestModeTypeToRequestModeEnrollmentType]
           ([Id]
           ,[RequestModeTypeId]
           ,[RequestModeEnrollmentTypeId]
           ,[Inactive]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastModifiedBy]
           ,[LastModifiedDate]
           ,[IdPrevious]
           ,[RequestModeTypeIdPrevious]
           ,[RequestModeEnrollmentTypeIdPrevious]
           ,[InactivePrevious]
           ,[CreatedByPrevious]
           ,[CreatedDatePrevious]
           ,[LastModifiedByPrevious]
           ,[LastModifiedDatePrevious]
           ,[SYS_CHANGE_VERSION]
           ,[SYS_CHANGE_CREATION_VERSION]
           ,[SYS_CHANGE_OPERATION]
           ,[SYS_CHANGE_COLUMNS])
	SELECT 
		[Id],
		[RequestModeTypeId],
		[RequestModeEnrollmentTypeId],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		@ChangeTrackingCurrentVersion
		,@ChangeTrackingCurrentVersion
		,'I'
		,'Id,RequestModeTypeId,RequestModeEnrollmentTypeId,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
	FROM 
		inserted

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditRequestModeTypeToRequestModeEnrollmentTypeUpdate]...';


GO



CREATE TRIGGER [dbo].[zAuditRequestModeTypeToRequestModeEnrollmentTypeUpdate]
	ON  [dbo].[RequestModeTypeToRequestModeEnrollmentType]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMGT.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditRequestModeTypeToRequestModeEnrollmentType (NOLOCK) ZARMGT
		INNER JOIN inserted a
			ON ZARMGT.Id = a.Id
	set @SysChangeColumns = ''
	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],'') <> isnull(b.[Id],'') THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[RequestModeTypeId],'') <> isnull(b.[RequestModeTypeId],'') THEN 'RequestModeTypeId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[RequestModeEnrollmentTypeId],'') <> isnull(b.[RequestModeEnrollmentTypeId],'') THEN 'RequestModeEnrollmentTypeId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [dbo].[zAuditRequestModeTypeToRequestModeEnrollmentType]
           ([Id]
           ,[RequestModeTypeId]
           ,[RequestModeEnrollmentTypeId]
           ,[Inactive]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastModifiedBy]
           ,[LastModifiedDate]
           ,[IdPrevious]
           ,[RequestModeTypeIdPrevious]
           ,[RequestModeEnrollmentTypeIdPrevious]
           ,[InactivePrevious]
           ,[CreatedByPrevious]
           ,[CreatedDatePrevious]
           ,[LastModifiedByPrevious]
           ,[LastModifiedDatePrevious]
           ,[SYS_CHANGE_VERSION]
           ,[SYS_CHANGE_CREATION_VERSION]
           ,[SYS_CHANGE_OPERATION]
           ,[SYS_CHANGE_COLUMNS])
	SELECT 
		a.[Id],
		a.[RequestModeTypeId],
		a.[RequestModeEnrollmentTypeId],
		a.[Inactive],
		a.[CreatedBy],
		a.[CreatedDate],
		a.[LastModifiedBy],
		a.[LastModifiedDate],
		b.[Id],
		b.[RequestModeTypeId],
		b.[RequestModeEnrollmentTypeId],
		b.[Inactive],
		b.[CreatedBy],
		b.[CreatedDate],
		b.[LastModifiedBy],
		b.[LastModifiedDate]
		,@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditRequestModeTypeToRequestModeTypeGenreInsert]...';


GO




CREATE TRIGGER [dbo].[zAuditRequestModeTypeToRequestModeTypeGenreInsert]
	ON  [dbo].[RequestModeTypeToRequestModeTypeGenre]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	INSERT INTO [dbo].[zAuditRequestModeTypeToRequestModeTypeGenre]
           ([Id]
           ,[RequestModeTypeId]
           ,[RequestModeTypeGenreId]
           ,[Inactive]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastModifiedBy]
           ,[LastModifiedDate]
           ,[IdPrevious]
           ,[RequestModeTypeIdPrevious]
           ,[RequestModeTypeGenreIdPrevious]
           ,[InactivePrevious]
           ,[CreatedByPrevious]
           ,[CreatedDatePrevious]
           ,[LastModifiedByPrevious]
           ,[LastModifiedDatePrevious]
           ,[SYS_CHANGE_VERSION]
           ,[SYS_CHANGE_CREATION_VERSION]
           ,[SYS_CHANGE_OPERATION]
           ,[SYS_CHANGE_COLUMNS])
	SELECT 
		[Id],
		[RequestModeTypeId],
		[RequestModeTypeGenreId],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		@ChangeTrackingCurrentVersion
		,@ChangeTrackingCurrentVersion
		,'I'
		,'Id,RequestModeTypeId,RequestModeTypeGenreId,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
	FROM 
		inserted

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditRequestModeTypeToRequestModeTypeGenreUpdate]...';


GO



CREATE TRIGGER [dbo].[zAuditRequestModeTypeToRequestModeTypeGenreUpdate]
	ON  [dbo].[RequestModeTypeToRequestModeTypeGenre]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMGT.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditRequestModeTypeToRequestModeTypeGenre (NOLOCK) ZARMGT
		INNER JOIN inserted a
			ON ZARMGT.Id = a.Id
	set @SysChangeColumns = ''
	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],'') <> isnull(b.[Id],'') THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[RequestModeTypeId],'') <> isnull(b.[RequestModeTypeId],'') THEN 'RequestModeTypeId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[RequestModeTypeGenreId],'') <> isnull(b.[RequestModeTypeGenreId],'') THEN 'RequestModeTypeGenreId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [dbo].[zAuditRequestModeTypeToRequestModeTypeGenre]
           ([Id]
           ,[RequestModeTypeId]
           ,[RequestModeTypeGenreId]
           ,[Inactive]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastModifiedBy]
           ,[LastModifiedDate]
           ,[IdPrevious]
           ,[RequestModeTypeIdPrevious]
           ,[RequestModeTypeGenreIdPrevious]
           ,[InactivePrevious]
           ,[CreatedByPrevious]
           ,[CreatedDatePrevious]
           ,[LastModifiedByPrevious]
           ,[LastModifiedDatePrevious]
           ,[SYS_CHANGE_VERSION]
           ,[SYS_CHANGE_CREATION_VERSION]
           ,[SYS_CHANGE_OPERATION]
           ,[SYS_CHANGE_COLUMNS])
	SELECT 
		a.[Id],
		a.[RequestModeTypeId],
		a.[RequestModeTypeGenreId],
		a.[Inactive],
		a.[CreatedBy],
		a.[CreatedDate],
		a.[LastModifiedBy],
		a.[LastModifiedDate],
		b.[Id],
		b.[RequestModeTypeId],
		b.[RequestModeTypeGenreId],
		b.[Inactive],
		b.[CreatedBy],
		b.[CreatedDate],
		b.[LastModifiedBy],
		b.[LastModifiedDate]
		,@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditTariffCodeUpdate]...';


GO


CREATE TRIGGER [dbo].[zAuditTariffCodeUpdate]
	ON  [dbo].[TariffCode]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()
	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMGT.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditTariffCode (NOLOCK) ZARMGT
		INNER JOIN inserted a
			ON ZARMGT.Id = a.Id
	set @SysChangeColumns = ''
	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],'') <> isnull(b.[Id],'') THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UtilityCompanyId],'') <> isnull(b.[UtilityCompanyId],'') THEN 'UtilityCompanyId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[TariffCodeCode],'') <> isnull(b.[TariffCodeCode],'') THEN 'TariffCodeCode' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Description],'') <> isnull(b.[Description],'') THEN 'Description' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[AccountTypeId],'') <> isnull(b.[AccountTypeId],'') THEN 'AccountTypeId' + ',' ELSE '' END
		+ CASE WHEN a.[LpStandardTariffCodeId] <> b.[LpStandardTariffCodeId] THEN 'LpStandardTariffCodeId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[TariffCodeId],0) <> isnull(b.[TariffCodeId],0) THEN 'TariffCodeId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [dbo].[zAuditTariffCode]
	(
		[Id],
		[UtilityCompanyId],
		[TariffCodeCode],
		[Description],
		[AccountTypeId],
		[LpStandardTariffCodeId],
		[TariffCodeId],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[UtilityCompanyIdPrevious],
		[TariffCodeCodePrevious],
		[DescriptionPrevious],
		[AccountTypeIdPrevious],
		[LpStandardTariffCodeIdPrevious],
		[TariffCodeIdPrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
	SELECT 
		a.[Id],
		a.[UtilityCompanyId],
		a.[TariffCodeCode],
		a.[Description],
		a.[AccountTypeId],
		a.[LpStandardTariffCodeId],
		a.[TariffCodeId],
		a.[Inactive],
		a.[CreatedBy],
		a.[CreatedDate],
		a.[LastModifiedBy],
		a.[LastModifiedDate],
		b.[Id],
		b.[UtilityCompanyId],
		b.[TariffCodeCode],
		b.[Description],
		b.[AccountTypeId],
		b.[LpStandardTariffCodeId],
		b.[TariffCodeId],
		b.[Inactive],
		b.[CreatedBy],
		b.[CreatedDate],
		b.[LastModifiedBy],
		b.[LastModifiedDate],
		@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]


	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditTariffCodeInsert]...';


GO



CREATE TRIGGER [dbo].[zAuditTariffCodeInsert]
	ON  [dbo].[TariffCode]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	INSERT INTO [dbo].[zAuditTariffCode]
	(	
		[Id],
		[UtilityCompanyId],
		[TariffCodeCode],
		[Description],
		[AccountTypeId],
		[LpStandardTariffCodeId],
		[TariffCodeId],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[UtilityCompanyIdPrevious],
		[TariffCodeCodePrevious],
		[DescriptionPrevious],
		[AccountTypeIdPrevious],
		[LpStandardTariffCodeIdPrevious],
		[TariffCodeIdPrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
		SELECT 
			[Id],
			[UtilityCompanyId],
			[TariffCodeCode],
			[Description],
			[AccountTypeId],
			[LpStandardTariffCodeId],
			[TariffCodeId],
			[Inactive],
			[CreatedBy],
			[CreatedDate],
			[LastModifiedBy],
			[LastModifiedDate],
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			@ChangeTrackingCurrentVersion,
			@ChangeTrackingCurrentVersion,
			'I',
			'Id,UtilityCompanyId,TariffCodeCode,Description,AccountTypeId,LpStandardTariffCodeId,TariffCodeId,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
		FROM 
			inserted

		INSERT INTO [ChangeTableVersioning]
		(
			Id,
			ChangeTrackingVersion,
			CreatedDate
		)
		SELECT
			NEWID(),
			@ChangeTrackingCurrentVersion,
			GETDATE()

		SET NOCOUNT OFF;
	END
GO
PRINT N'Creating [dbo].[zAuditTariffCodeAliasInsert]...';


GO







CREATE TRIGGER [dbo].[zAuditTariffCodeAliasInsert]
	ON  [dbo].[TariffCodeAlias]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	INSERT INTO [dbo].[zAuditTariffCodeAlias]
	(	
		[Id]
		,[TariffCodeId]
		,[TariffCodeCodeAlias]
		,[Inactive]
		,[CreatedBy]
		,[CreatedDate]
		,[LastModifiedBy]
		,[LastModifiedDate]
		,[IdPrevious]
		,[TariffCodeIdPrevious]
		,[TariffCodeCodeAliasPrevious]
		,[InactivePrevious]
		,[CreatedByPrevious]
		,[CreatedDatePrevious]
		,[LastModifiedByPrevious]
		,[LastModifiedDatePrevious]
		,[SYS_CHANGE_VERSION]
		,[SYS_CHANGE_CREATION_VERSION]
		,[SYS_CHANGE_OPERATION]
		,[SYS_CHANGE_COLUMNS]
	)
		SELECT 
			[Id],
			[TariffCodeId],
			[TariffCodeCodeAlias],
			[Inactive],
			[CreatedBy],
			[CreatedDate],
			[LastModifiedBy],
			[LastModifiedDate],
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			@ChangeTrackingCurrentVersion,
			@ChangeTrackingCurrentVersion,
			'I',
			'Id,TariffCodeId,TariffCodeCodeAlias,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
		FROM 
			inserted

		INSERT INTO [ChangeTableVersioning]
		(
			Id,
			ChangeTrackingVersion,
			CreatedDate
		)
		SELECT
			NEWID(),
			@ChangeTrackingCurrentVersion,
			GETDATE()

		SET NOCOUNT OFF;
	END
GO
PRINT N'Creating [dbo].[zAuditTariffCodeAliasUpdate]...';


GO





CREATE TRIGGER [dbo].[zAuditTariffCodeAliasUpdate]
	ON  [dbo].[TariffCodeAlias]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMGT.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditTariffCodeAlias (NOLOCK) ZARMGT
		INNER JOIN inserted a
			ON ZARMGT.Id = a.Id

	set @SysChangeColumns = ''

	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],'') <> isnull(b.[Id],'') THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[TariffCodeId],'') <> isnull(b.[TariffCodeId],'') THEN 'TariffCodeId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[TariffCodeCodeAlias],'') <> isnull(b.[TariffCodeCodeAlias],'') THEN 'TariffCodeCodeAlias' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [dbo].[zAuditTariffCodeAlias]
	(
		[Id],
		[TariffCodeId],
		[TariffCodeCodeAlias],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[TariffCodeIdPrevious],
		[TariffCodeCodeAliasPrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
	SELECT 
		a.[Id],
		a.[TariffCodeId],
		a.[TariffCodeCodeAlias],
		a.[Inactive],
		a.[CreatedBy],
		a.[CreatedDate],
		a.[LastModifiedBy],
		a.[LastModifiedDate],
		b.[Id],
		b.[TariffCodeId],
		b.[TariffCodeCodeAlias],
		b.[Inactive],
		b.[CreatedBy],
		b.[CreatedDate],
		b.[LastModifiedBy],
		b.[LastModifiedDate],
		@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()
	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditUserInterfaceControlAndValueGoverningControlVisibilityInsert]...';


GO





CREATE TRIGGER [dbo].[zAuditUserInterfaceControlAndValueGoverningControlVisibilityInsert]
	ON  [dbo].[UserInterfaceControlAndValueGoverningControlVisibility]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	INSERT INTO [dbo].[zAuditUserInterfaceControlAndValueGoverningControlVisibility]
           ([Id]
           ,[UserInterfaceFormId]
           ,[UserInterfaceFormControlGoverningVisibilityId]
           ,[ControlValueGoverningVisibiltiy]
           ,[Inactive]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastModifiedBy]
           ,[LastModifiedDate]
           ,[IdPrevious]
           ,[UserInterfaceFormIdPrevious]
           ,[UserInterfaceFormControlGoverningVisibilityIdPrevious]
           ,[ControlValueGoverningVisibiltiyPrevious]
           ,[InactivePrevious]
           ,[CreatedByPrevious]
           ,[CreatedDatePrevious]
           ,[LastModifiedByPrevious]
           ,[LastModifiedDatePrevious]
           ,[SYS_CHANGE_VERSION]
           ,[SYS_CHANGE_CREATION_VERSION]
           ,[SYS_CHANGE_OPERATION]
           ,[SYS_CHANGE_COLUMNS])
	SELECT 
		[Id],
		[UserInterfaceFormId],
		[UserInterfaceFormControlGoverningVisibilityId],
		[ControlValueGoverningVisibiltiy],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		@ChangeTrackingCurrentVersion
		,@ChangeTrackingCurrentVersion
		,'I'
		,'Id,RequestModeTypeId,RequestModeTypeGenreId,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
	FROM 
		inserted

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditUserInterfaceControlAndValueGoverningControlVisibilityUpdate]...';


GO




CREATE TRIGGER [dbo].[zAuditUserInterfaceControlAndValueGoverningControlVisibilityUpdate]
	ON  [dbo].[UserInterfaceControlAndValueGoverningControlVisibility]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMGT.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditUserInterfaceControlAndValueGoverningControlVisibility (NOLOCK) ZARMGT
		INNER JOIN inserted a
			ON ZARMGT.Id = a.Id
	set @SysChangeColumns = ''
	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],'') <> isnull(b.[Id],'') THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UserInterfaceFormId],'') <> isnull(b.[UserInterfaceFormId],'') THEN 'UserInterfaceFormId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UserInterfaceFormControlGoverningVisibilityId],'') <> isnull(b.[UserInterfaceFormControlGoverningVisibilityId],'') THEN 'UserInterfaceFormControlGoverningVisibilityId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[ControlValueGoverningVisibiltiy],'') <> isnull(b.[ControlValueGoverningVisibiltiy],'') THEN 'ControlValueGoverningVisibiltiy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [dbo].[zAuditUserInterfaceControlAndValueGoverningControlVisibility]
           ([Id]
           ,[UserInterfaceFormId]
           ,[UserInterfaceFormControlGoverningVisibilityId]
           ,[ControlValueGoverningVisibiltiy]
           ,[Inactive]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastModifiedBy]
           ,[LastModifiedDate]
           ,[IdPrevious]
           ,[UserInterfaceFormIdPrevious]
           ,[UserInterfaceFormControlGoverningVisibilityIdPrevious]
           ,[ControlValueGoverningVisibiltiyPrevious]
           ,[InactivePrevious]
           ,[CreatedByPrevious]
           ,[CreatedDatePrevious]
           ,[LastModifiedByPrevious]
           ,[LastModifiedDatePrevious]
           ,[SYS_CHANGE_VERSION]
           ,[SYS_CHANGE_CREATION_VERSION]
           ,[SYS_CHANGE_OPERATION]
           ,[SYS_CHANGE_COLUMNS])
	SELECT 
		a.[Id],
		a.[UserInterfaceFormId],
		a.[UserInterfaceFormControlGoverningVisibilityId],
		a.[ControlValueGoverningVisibiltiy],
		a.[Inactive],
		a.[CreatedBy],
		a.[CreatedDate],
		a.[LastModifiedBy],
		a.[LastModifiedDate],
		b.[Id],
		b.[UserInterfaceFormId],
		b.[UserInterfaceFormControlGoverningVisibilityId],
		b.[ControlValueGoverningVisibiltiy],
		b.[Inactive],
		b.[CreatedBy],
		b.[CreatedDate],
		b.[LastModifiedBy],
		b.[LastModifiedDate]
		,@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditUserInterfaceControlVisibilityInsert]...';


GO
CREATE TRIGGER [dbo].[zAuditUserInterfaceControlVisibilityInsert]
	ON  [dbo].[UserInterfaceControlVisibility]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	INSERT INTO [dbo].[zAuditUserInterfaceControlVisibility]
           ([Id]
           ,[UserInterfaceFormId]
           ,[UserInterfaceFormControlId]
           ,[UserInterfaceControlAndValueGoverningControlVisibilityId]
           ,[Inactive]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastModifiedBy]
           ,[LastModifiedDate]
           ,[IdPrevious]
           ,[UserInterfaceFormIdPrevious]
           ,[UserInterfaceFormControlIdPrevious]
           ,[InactivePrevious]
           ,[CreatedByPrevious]
           ,[CreatedDatePrevious]
           ,[LastModifiedByPrevious]
           ,[LastModifiedDatePrevious]
           ,[SYS_CHANGE_VERSION]
           ,[SYS_CHANGE_CREATION_VERSION]
           ,[SYS_CHANGE_OPERATION]
           ,[SYS_CHANGE_COLUMNS])
	SELECT 
		[Id],
		[UserInterfaceFormId],
		[UserInterfaceFormControlId],
		[UserInterfaceControlAndValueGoverningControlVisibilityId],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		@ChangeTrackingCurrentVersion
		,@ChangeTrackingCurrentVersion
		,'I'
		,'Id,UserInterfaceFormId,UserInterfaceFormControlId,UserInterfaceControlAndValueGoverningControlVisibilityId,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
	FROM 
		inserted

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditUserInterfaceControlVisibilityUpdate]...';


GO


CREATE TRIGGER [dbo].[zAuditUserInterfaceControlVisibilityUpdate]
	ON  [dbo].[UserInterfaceControlVisibility]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMGT.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditUserInterfaceControlVisibility (NOLOCK) ZARMGT
		INNER JOIN inserted a
			ON ZARMGT.Id = a.Id
	set @SysChangeColumns = ''
	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],'') <> isnull(b.[Id],'') THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UserInterfaceFormId],'') <> isnull(b.[UserInterfaceFormId],'') THEN 'UserInterfaceFormId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UserInterfaceFormControlId],'') <> isnull(b.[UserInterfaceFormControlId],'') THEN 'UserInterfaceFormControlId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UserInterfaceControlAndValueGoverningControlVisibilityId],'') <> isnull(b.[UserInterfaceControlAndValueGoverningControlVisibilityId],'') THEN 'UserInterfaceControlAndValueGoverningControlVisibilityId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [dbo].[zAuditUserInterfaceControlVisibility]
           ([Id]
           ,[UserInterfaceFormId]
           ,[UserInterfaceFormControlId]
           ,[UserInterfaceControlAndValueGoverningControlVisibilityId]
           ,[Inactive]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastModifiedBy]
           ,[LastModifiedDate]
           ,[IdPrevious]
           ,[UserInterfaceFormIdPrevious]
           ,[UserInterfaceFormControlIdPrevious]
           ,[UserInterfaceControlAndValueGoverningControlVisibilityIdPrevious]
           ,[InactivePrevious]
           ,[CreatedByPrevious]
           ,[CreatedDatePrevious]
           ,[LastModifiedByPrevious]
           ,[LastModifiedDatePrevious]
           ,[SYS_CHANGE_VERSION]
           ,[SYS_CHANGE_CREATION_VERSION]
           ,[SYS_CHANGE_OPERATION]
           ,[SYS_CHANGE_COLUMNS])
	SELECT 
		a.[Id],
		a.[UserInterfaceFormId],
		a.[UserInterfaceFormControlId],
		a.[UserInterfaceControlAndValueGoverningControlVisibilityId],
		a.[Inactive],
		a.[CreatedBy],
		a.[CreatedDate],
		a.[LastModifiedBy],
		a.[LastModifiedDate],
		b.[Id],
		b.[UserInterfaceFormId],
		b.[UserInterfaceFormControlId],
		b.[UserInterfaceControlAndValueGoverningControlVisibilityId],
		b.[Inactive],
		b.[CreatedBy],
		b.[CreatedDate],
		b.[LastModifiedBy],
		b.[LastModifiedDate]
		,@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditUserInterfaceFormUpdate]...';


GO


CREATE TRIGGER [dbo].[zAuditUserInterfaceFormUpdate]
	ON  [dbo].[UserInterfaceForm]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMGT.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditUserInterfaceForm (NOLOCK) ZARMGT
		INNER JOIN inserted a
			ON ZARMGT.Id = a.Id
	set @SysChangeColumns = ''
	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],'') <> isnull(b.[Id],'') THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UserInterfaceFormName],'') <> isnull(b.[UserInterfaceFormName],'') THEN 'UserInterfaceFormName' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [dbo].[zAuditUserInterfaceForm]
           ([Id]
           ,[UserInterfaceFormName]
           ,[Inactive]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastModifiedBy]
           ,[LastModifiedDate]
           ,[IdPrevious]
           ,[UserInterfaceFormNamePrevious]
           ,[InactivePrevious]
           ,[CreatedByPrevious]
           ,[CreatedDatePrevious]
           ,[LastModifiedByPrevious]
           ,[LastModifiedDatePrevious]
           ,[SYS_CHANGE_VERSION]
           ,[SYS_CHANGE_CREATION_VERSION]
           ,[SYS_CHANGE_OPERATION]
           ,[SYS_CHANGE_COLUMNS])
	SELECT 
		a.[Id],
		a.[UserInterfaceFormName],
		a.[Inactive],
		a.[CreatedBy],
		a.[CreatedDate],
		a.[LastModifiedBy],
		a.[LastModifiedDate],
		b.[Id],
		b.[UserInterfaceFormName],
		b.[Inactive],
		b.[CreatedBy],
		b.[CreatedDate],
		b.[LastModifiedBy],
		b.[LastModifiedDate]
		,@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditUserInterfaceFormInsert]...';


GO
CREATE TRIGGER [dbo].[zAuditUserInterfaceFormInsert]
	ON  [dbo].[UserInterfaceForm]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	INSERT INTO [dbo].[zAuditUserInterfaceForm]
           ([Id]
           ,[UserInterfaceFormName]
           ,[Inactive]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastModifiedBy]
           ,[LastModifiedDate]
           ,[IdPrevious]
           ,[UserInterfaceFormNamePrevious]
           ,[InactivePrevious]
           ,[CreatedByPrevious]
           ,[CreatedDatePrevious]
           ,[LastModifiedByPrevious]
           ,[LastModifiedDatePrevious]
           ,[SYS_CHANGE_VERSION]
           ,[SYS_CHANGE_CREATION_VERSION]
           ,[SYS_CHANGE_OPERATION]
           ,[SYS_CHANGE_COLUMNS])
	SELECT 
		[Id],
		[UserInterfaceFormName],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		@ChangeTrackingCurrentVersion
		,@ChangeTrackingCurrentVersion
		,'I'
		,'Id,UserInterfaceFormName,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
	FROM 
		inserted

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditUserInterfaceFormControlInsert]...';


GO
CREATE TRIGGER [dbo].[zAuditUserInterfaceFormControlInsert]
	ON  [dbo].[UserInterfaceFormControl]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	INSERT INTO [dbo].[zAuditUserInterfaceFormControl]
           ([Id]
           ,[UserInterfaceFormId]
           ,[ControlName]
           ,[Inactive]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastModifiedBy]
           ,[LastModifiedDate]
           ,[IdPrevious]
           ,[UserInterfaceFormIdPrevious]
           ,[ControlNamePrevious]
           ,[InactivePrevious]
           ,[CreatedByPrevious]
           ,[CreatedDatePrevious]
           ,[LastModifiedByPrevious]
           ,[LastModifiedDatePrevious]
           ,[SYS_CHANGE_VERSION]
           ,[SYS_CHANGE_CREATION_VERSION]
           ,[SYS_CHANGE_OPERATION]
           ,[SYS_CHANGE_COLUMNS])
	SELECT 
		[Id],
		[UserInterfaceFormId],
		[ControlName],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		NULL,
		@ChangeTrackingCurrentVersion
		,@ChangeTrackingCurrentVersion
		,'I'
		,'Id,UserInterfaceFormId,ControlName,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
	FROM 
		inserted

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditUserInterfaceFormControlUpdate]...';


GO


CREATE TRIGGER [dbo].[zAuditUserInterfaceFormControlUpdate]
	ON  [dbo].[UserInterfaceFormControl]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMGT.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditUserInterfaceFormControl (NOLOCK) ZARMGT
		INNER JOIN inserted a
			ON ZARMGT.Id = a.Id
	set @SysChangeColumns = ''
	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],'') <> isnull(b.[Id],'') THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UserInterfaceFormId],'') <> isnull(b.[UserInterfaceFormId],'') THEN 'UserInterfaceFormId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[ControlName],'') <> isnull(b.[ControlName],'') THEN 'ControlName' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [dbo].[zAuditUserInterfaceFormControl]
           ([Id]
           ,[UserInterfaceFormId]
           ,[ControlName]
           ,[Inactive]
           ,[CreatedBy]
           ,[CreatedDate]
           ,[LastModifiedBy]
           ,[LastModifiedDate]
           ,[IdPrevious]
           ,[UserInterfaceFormIdPrevious]
           ,[ControlNamePrevious]
           ,[InactivePrevious]
           ,[CreatedByPrevious]
           ,[CreatedDatePrevious]
           ,[LastModifiedByPrevious]
           ,[LastModifiedDatePrevious]
           ,[SYS_CHANGE_VERSION]
           ,[SYS_CHANGE_CREATION_VERSION]
           ,[SYS_CHANGE_OPERATION]
           ,[SYS_CHANGE_COLUMNS])
	SELECT 
		a.[Id],
		a.[UserInterfaceFormId],
		a.[ControlName],
		a.[Inactive],
		a.[CreatedBy],
		a.[CreatedDate],
		a.[LastModifiedBy],
		a.[LastModifiedDate],
		b.[Id],
		b.[UserInterfaceFormId],
		b.[ControlName],
		b.[Inactive],
		b.[CreatedBy],
		b.[CreatedDate],
		b.[LastModifiedBy],
		b.[LastModifiedDate]
		,@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditUtilityBillingTypeUpdate]...';


GO



CREATE TRIGGER [dbo].[zAuditUtilityBillingTypeUpdate]
	ON  [dbo].[UtilityBillingType]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()
	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMGT.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditUtilityBillingType (NOLOCK) ZARMGT
		INNER JOIN inserted a
			ON ZARMGT.Id = a.Id
	set @SysChangeColumns = ''
	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],NEWID()) <> isnull(b.[Id],NEWID()) THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UtilityCompanyId],NEWID()) <> isnull(b.[UtilityCompanyId],'') THEN 'UtilityCompanyId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[PorDriverId],NEWID()) <> isnull(b.[PorDriverId],NEWID()) THEN 'PorDriverId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[RateClassId],NEWID()) <> isnull(b.[RateClassId],NEWID()) THEN 'RateClassId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LoadProfileId],NEWID()) <> isnull(b.[LoadProfileId],NEWID()) THEN 'LoadProfileId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[TariffCodeId],NEWID()) <> isnull(b.[TariffCodeId],NEWID()) THEN 'TariffCodeId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UtilityOfferedBillingTypeId],NEWID()) <> isnull(b.[UtilityOfferedBillingTypeId],NEWID()) THEN 'UtilityOfferedBillingTypeId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [dbo].[zAuditUtilityBillingType]
	(
		[Id],
		[UtilityCompanyId],
		[PorDriverId],
		[RateClassId],
		[LoadProfileId],
		[TariffCodeId],
		[UtilityOfferedBillingTypeId],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[UtilityCompanyIdPrevious],
		[PorDriverIdPrevious],
		[RateClassIdPrevious],
		[LoadProfileIdPrevious],
		[TariffCodeIdPrevious],
		[UtilityOfferedBillingTypeIdPrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
	SELECT 
		a.[Id],
		a.[UtilityCompanyId],
		a.[PorDriverId],
		a.[RateClassId],
		a.[LoadProfileId],
		a.[TariffCodeId],
		a.[UtilityOfferedBillingTypeId],
		a.[Inactive],
		a.[CreatedBy],
		a.[CreatedDate],
		a.[LastModifiedBy],
		a.[LastModifiedDate],
		b.[Id],
		b.[UtilityCompanyId],
		b.[PorDriverId],
		b.[RateClassId],
		b.[LoadProfileId],
		b.[TariffCodeId],
		b.[UtilityOfferedBillingTypeId],
		b.[Inactive],
		b.[CreatedBy],
		b.[CreatedDate],
		b.[LastModifiedBy],
		b.[LastModifiedDate],
		@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]


	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()

	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditUtilityBillingTypeInsert]...';


GO


---------------------------

CREATE TRIGGER [dbo].[zAuditUtilityBillingTypeInsert]
	ON  [dbo].[UtilityBillingType]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	INSERT INTO [dbo].[zAuditUtilityBillingType]
	(	
		[Id],
		[UtilityCompanyId],
		[PorDriverId],
		[RateClassId],
		[LoadProfileId],
		[TariffCodeId],
		[UtilityOfferedBillingTypeId],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[UtilityCompanyIdPrevious],
		[PorDriverIdPrevious],
		[RateClassIdPrevious],
		[LoadProfileIdPrevious],
		[TariffCodeIdPrevious],
		[UtilityOfferedBillingTypeIdPrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
		SELECT 
			[Id],
			[UtilityCompanyId],
			[PorDriverId],
			[RateClassId],
			[LoadProfileId],
			[TariffCodeId],
			[UtilityOfferedBillingTypeId],
			[Inactive],
			[CreatedBy],
			[CreatedDate],
			[LastModifiedBy],
			[LastModifiedDate],
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			@ChangeTrackingCurrentVersion,
			@ChangeTrackingCurrentVersion,
			'I',
			'Id,UtilityCompanyId,PorDriverId,RateClassId,LoadProfileId,TariffCodeId,UtilityOfferedBillingTypeId,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
		FROM 
			inserted

		INSERT INTO [ChangeTableVersioning]
		(
			Id,
			ChangeTrackingVersion,
			CreatedDate
		)
		SELECT
			NEWID(),
			@ChangeTrackingCurrentVersion,
			GETDATE()

		SET NOCOUNT OFF;
	END
GO
PRINT N'Creating [dbo].[zAuditUtilityCompanyInsert]...';


GO

CREATE TRIGGER [dbo].[zAuditUtilityCompanyInsert]
	ON  [dbo].[UtilityCompany]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT;
	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()
	PRINT @ChangeTrackingCurrentVersion 


	INSERT INTO [Lp_UtilityManagement].[dbo].[zAuditUtilityCompany]
	(
		[Id]
		,[UtilityCode]
		,[FullName]
		,[IsoId]
		,[MarketId]
		,[PrimaryDunsNumber]
		,[LpEntityId]
		,[UtilityStatusId]
		,[SalesForceId]
		,[Inactive]
		,[CreatedBy]
		,[CreatedDate]
		,[LastModifiedBy]
		,[LastModifiedDate]
		,[IdPrevious]
		,[UtilityCodePrevious]
		,[FullNamePrevious]
		,[IsoIdPrevious]
		,[MarketIdPrevious]
		,[PrimaryDunsNumberPrevious]
		,[LpEntityIdPrevious]
		,[UtilityStatusIdPrevious]
		,[SalesForceIdPrevious]
		,[InactivePrevious]
		,[CreatedByPrevious]
		,[CreatedDatePrevious]
		,[LastModifiedByPrevious]
		,[LastModifiedDatePrevious]
		,[SYS_CHANGE_VERSION]
		,[SYS_CHANGE_CREATION_VERSION]
		,[SYS_CHANGE_OPERATION]
		,[SYS_CHANGE_COLUMNS]
	)
	SELECT 
		[Id]
		,[UtilityCode]
		,[FullName]
		,[IsoId]
		,[MarketId]
		,[PrimaryDunsNumber]
		,[LpEntityId]
		,[UtilityStatusId]
		,[SalesForceId]
		,[Inactive]
		,[CreatedBy]
		,[CreatedDate]
		,[LastModifiedBy]
		,[LastModifiedDate]
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,NULL
		,@ChangeTrackingCurrentVersion
		,@ChangeTrackingCurrentVersion
		,'I'
		,'Id,UtilityCode,FullName,IsoId,MarketId,PrimaryDunsNumber,LpEntityId,UtilityStatusId,SalesForceIdInactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
	FROM 
		inserted

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()
		
	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditUtilityCompanyUpdate]...';


GO


CREATE TRIGGER [dbo].[zAuditUtilityCompanyUpdate]
	ON  [dbo].[UtilityCompany]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)
			
	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()
	
	SELECT 
		@ChangeTrackingCreationVersion = MIN(AZUC.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditUtilityCompany (NOLOCK) AZUC 
		INNER JOIN inserted a
			ON AZUC.Id = a.Id
	set @SysChangeColumns = ''
	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],'') <> isnull(b.[Id],'') THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UtilityCode],'') <> isnull(b.[UtilityCode],'') THEN 'UtilityCode' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[FullName],'') <> isnull(b.[FullName],'') THEN 'FullName' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[IsoId],NEWID()) <> isnull(b.[IsoId],NEWID()) THEN 'IsoId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[MarketId],NEWID()) <> isnull(b.[MarketId],NEWID()) THEN 'MarketId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[PrimaryDunsNumber],'') <> isnull(b.[PrimaryDunsNumber],'') THEN 'PrimaryDunsNumber' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LpEntityId],'') <> isnull(b.[LpEntityId],'') THEN 'LpEntityId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UtilityStatusId],NEWID()) <> isnull(b.[UtilityStatusId],NEWID()) THEN 'UtilityStatusId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[SalesForceId],'') <> isnull(b.[SalesForceId],'') THEN 'SalesForceId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]
	
	INSERT INTO [dbo].[zAuditUtilityCompany] 
	(
		[Id]
		,[UtilityCode]
		,[FullName]
		,[IsoId]
		,[MarketId]
		,[PrimaryDunsNumber]
		,[LpEntityId]
		,[UtilityStatusId]
		,[SalesForceId]
		,[Inactive]
		,[CreatedBy]
		,[CreatedDate]
		,[LastModifiedBy]
		,[LastModifiedDate]
		,[IdPrevious]
		,[UtilityCodePrevious]
		,[FullNamePrevious]
		,[IsoIdPrevious]
		,[MarketIdPrevious]
		,[PrimaryDunsNumberPrevious]
		,[LpEntityIdPrevious]
		,[UtilityStatusIdPrevious]
		,[SalesForceIdPrevious]
		,[InactivePrevious]
		,[CreatedByPrevious]
		,[CreatedDatePrevious]
		,[LastModifiedByPrevious]
		,[LastModifiedDatePrevious]
		,[SYS_CHANGE_VERSION]
		,[SYS_CHANGE_CREATION_VERSION]
		,[SYS_CHANGE_OPERATION]
		,[SYS_CHANGE_COLUMNS]
	)
	SELECT 
		a.[Id]
		,a.[UtilityCode]
		,a.[FullName]
		,a.[IsoId]
		,a.[MarketId]
		,a.[PrimaryDunsNumber]
		,a.[LpEntityId]
		,a.[UtilityStatusId]
		,a.[SalesForceId]
		,a.[Inactive]
		,a.[CreatedBy]
		,a.[CreatedDate]
		,a.[LastModifiedBy]
		,a.[LastModifiedDate]
		,b.[Id]
		,b.[UtilityCode]
		,b.[FullName]
		,b.[IsoId]
		,b.[MarketId]
		,b.[PrimaryDunsNumber]
		,b.[LpEntityId]
		,b.[UtilityStatusId]
		,b.[SalesForceId]
		,b.[Inactive]
		,b.[CreatedBy]
		,b.[CreatedDate]
		,b.[LastModifiedBy]
		,b.[LastModifiedDate]
		,@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]
			
	SET NOCOUNT OFF;

END
GO
PRINT N'Creating [dbo].[zAuditUtilityTripUpdate]...';


GO

CREATE TRIGGER [dbo].[zAuditUtilityTripUpdate]
	ON  [dbo].[UtilityTrip]
	AFTER UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	SELECT 
		@ChangeTrackingCreationVersion = MIN(ZARMGT.[SYS_CHANGE_CREATION_VERSION]) 
	FROM 
		dbo.zAuditUtilityTrip (NOLOCK) ZARMGT
		INNER JOIN inserted a
			ON ZARMGT.Id = a.Id

	set @SysChangeColumns = ''

	SELECT
		@SysChangeColumns = CASE WHEN isnull(a.[Id],'') <> isnull(b.[Id],'') THEN 'Id' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[UtilityCompanyId],NEWID()) <> isnull(b.[UtilityCompanyId],NEWID()) THEN 'UtilityCompanyId' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[TripNumber],'') <> isnull(b.[TripNumber],'') THEN 'TripNumber' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[Inactive],0) <> isnull(b.[Inactive],0) THEN 'Inactive' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[CreatedBy],'') <> isnull(b.[CreatedBy],'') THEN 'CreatedBy' + ',' ELSE '' END
		+ CASE WHEN isnull(a.[LastModifiedBy],'') <> isnull(b.[LastModifiedBy],'') THEN 'LastModifiedBy' + ',' ELSE '' END
		+ 'LastModifiedDate'
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [dbo].[zAuditUtilityTrip]
	(
		[Id],
		[UtilityCompanyId],
		[TripNumber],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[UtilityCompanyIdPrevious],
		[TripNumberPrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious],
		[SYS_CHANGE_VERSION],
		[SYS_CHANGE_CREATION_VERSION],
		[SYS_CHANGE_OPERATION],
		[SYS_CHANGE_COLUMNS]
	)
	SELECT 
		a.[Id],
		a.[UtilityCompanyId],
		a.[TripNumber],
		a.[Inactive],
		a.[CreatedBy],
		a.[CreatedDate],
		a.[LastModifiedBy],
		a.[LastModifiedDate],
		b.[Id],
		b.[UtilityCompanyId],
		b.[TripNumber],
		b.[Inactive],
		b.[CreatedBy],
		b.[CreatedDate],
		b.[LastModifiedBy],
		b.[LastModifiedDate],
		@ChangeTrackingCurrentVersion
		,@ChangeTrackingCreationVersion
		,'U'
		,@SysChangeColumns	
	FROM 
		inserted a
		INNER JOIN deleted b
			on b.[Id] = a.[Id]

	INSERT INTO [ChangeTableVersioning]
	(
		Id,
		ChangeTrackingVersion,
		CreatedDate
	)
	SELECT
		NEWID(),
		@ChangeTrackingCurrentVersion,
		GETDATE()
	SET NOCOUNT OFF;
END
GO
PRINT N'Creating [dbo].[zAuditUtilityTripInsert]...';


GO








CREATE TRIGGER [dbo].[zAuditUtilityTripInsert]
	ON  [dbo].[UtilityTrip]
	AFTER INSERT
AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @ChangeTrackingCurrentVersion BIGINT
			,@ChangeTrackingCreationVersion BIGINT
			,@SysChangeColumns NVARCHAR(1000)

	SELECT @ChangeTrackingCurrentVersion = CHANGE_TRACKING_CURRENT_VERSION()

	INSERT INTO [dbo].[zAuditUtilityTrip]
	(	
		[Id],
		[UtilityCompanyId],
		[TripNumber],
		[Inactive],
		[CreatedBy],
		[CreatedDate],
		[LastModifiedBy],
		[LastModifiedDate],
		[IdPrevious],
		[UtilityCompanyIdPrevious],
		[TripNumberPrevious],
		[InactivePrevious],
		[CreatedByPrevious],
		[CreatedDatePrevious],
		[LastModifiedByPrevious],
		[LastModifiedDatePrevious]
		,[SYS_CHANGE_VERSION]
		,[SYS_CHANGE_CREATION_VERSION]
		,[SYS_CHANGE_OPERATION]
		,[SYS_CHANGE_COLUMNS]
	)
		SELECT 
			[Id],
			[UtilityCompanyId],
			[TripNumber],
			[Inactive],
			[CreatedBy],
			[CreatedDate],
			[LastModifiedBy],
			[LastModifiedDate],
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			NULL,
			@ChangeTrackingCurrentVersion,
			@ChangeTrackingCurrentVersion,
			'I',
			'Id,UtilityCompanyId,TripNumber,Inactive,CreatedBy,CreatedDate,LastModifiedBy,LastModifiedDate'
		FROM 
			inserted

		INSERT INTO [ChangeTableVersioning]
		(
			Id,
			ChangeTrackingVersion,
			CreatedDate
		)
		SELECT
			NEWID(),
			@ChangeTrackingCurrentVersion,
			GETDATE()

		SET NOCOUNT OFF;
	END
GO
PRINT N'Creating [dbo].[GetAccountFieldInfoUserFriendlyNames]...';


GO
CREATE FUNCTION GetAccountFieldInfoUserFriendlyNames() RETURNS NVARCHAR(2000)
AS
BEGIN
	DECLARE @UserFriendlyName AS NVARCHAR(255)
	DECLARE @CommaSeparatedNames AS NVARCHAR(2000)
	DECLARE @FirstTimeThrough AS BIT
	SET @FirstTimeThrough = 0
	SET @CommaSeparatedNames = ''
	DECLARE UserFriendlyNameCursor CURSOR
	FOR
	SELECT NameUserFriendly FROM AccountInfoField ORDER BY NameUserFriendly
	OPEN UserFriendlyNameCursor
	FETCH NEXT FROM UserFriendlyNameCursor
	INTO @UserFriendlyName

	WHILE @@FETCH_STATUS = 0
	BEGIN

		IF @FirstTimeThrough <> 0
		BEGIN
			SET @CommaSeparatedNames += ','
		END
		SET @CommaSeparatedNames += '[' + @UserFriendlyName + ']'
		SET @FirstTimeThrough = 1
		FETCH NEXT FROM UserFriendlyNameCursor
		INTO @UserFriendlyName
	END
	CLOSE UserFriendlyNameCursor
	DEALLOCATE UserFriendlyNameCursor

	RETURN @CommaSeparatedNames
END
GO
PRINT N'Creating [dbo].[InsertGenerator]...';


GO
CREATE PROC InsertGenerator
(@tableName varchar(100)) as
--Declare a cursor to retrieve column specific information 
--for the specified table
DECLARE cursCol CURSOR FAST_FORWARD FOR 
SELECT column_name,data_type FROM information_schema.columns 
    WHERE table_name = @tableName
OPEN cursCol
DECLARE @string nvarchar(3000) --for storing the first half 
                               --of INSERT statement
DECLARE @stringData nvarchar(3000) --for storing the data 
                                   --(VALUES) related statement
DECLARE @dataType nvarchar(1000) --data types returned 
                                 --for respective columns
SET @string='INSERT '+@tableName+'('
SET @stringData=''

DECLARE @colName nvarchar(50)

FETCH NEXT FROM cursCol INTO @colName,@dataType

IF @@fetch_status<>0
    begin
    print 'Table '+@tableName+' not found, processing skipped.'
    close curscol
    deallocate curscol
    return
END

WHILE @@FETCH_STATUS=0
BEGIN
IF @dataType in ('varchar','char','nchar','nvarchar')
BEGIN
    SET @stringData=@stringData+'''''''''+
            isnull('+@colName+','''')+'''''',''+'
END
ELSE
if @dataType in ('text','ntext') --if the datatype 
                                 --is text or something else 
BEGIN
    SET @stringData=@stringData+'''''''''+
          isnull(cast('+@colName+' as varchar(2000)),'''')+'''''',''+'
END
ELSE
IF @dataType = 'money' --because money doesn't get converted 
                       --from varchar implicitly
BEGIN
    SET @stringData=@stringData+'''convert(money,''''''+
        isnull(cast('+@colName+' as varchar(200)),''0.0000'')+''''''),''+'
END
ELSE 
IF @dataType='datetime'
BEGIN
    SET @stringData=@stringData+'''convert(datetime,''''''+
        isnull(cast('+@colName+' as varchar(200)),''0'')+''''''),''+'
END
ELSE 
IF @dataType='image' 
BEGIN
    SET @stringData=@stringData+'''''''''+
       isnull(cast(convert(varbinary,'+@colName+') 
       as varchar(6)),''0'')+'''''',''+'
END
ELSE --presuming the data type is int,bit,numeric,decimal 
BEGIN
    SET @stringData=@stringData+'''''''''+
          isnull(cast('+@colName+' as varchar(200)),''0'')+'''''',''+'
END

SET @string=@string+@colName+','

FETCH NEXT FROM cursCol INTO @colName,@dataType
END
DECLARE @Query nvarchar(4000) -- provide for the whole query, 
                              -- you may increase the size

SET @query ='SELECT '''+substring(@string,0,len(@string)) + ') 
    VALUES(''+ ' + substring(@stringData,0,len(@stringData)-2)+'''+'')'' 
    FROM '+@tableName
exec sp_executesql @query --load and run the built query
CLOSE cursCol
DEALLOCATE cursCol
GO
PRINT N'Creating [dbo].[usp_AccountAccountInfoFieldRequired_GetAsGrid]...';


GO
CREATE PROC usp_AccountAccountInfoFieldRequired_GetAsGrid
AS
BEGIN

CREATE TABLE #Data 
(
UtilityCode NVARCHAR(255),
NameUserFriendly NVARCHAR(255),
IsRequired INT
)

DECLARE @List NVARCHAR(2000)
SET @List = [Lp_UtilityManagement].[dbo].[GetAccountFieldInfoUserFriendlyNames] ()
DECLARE @Zero INT
SET @Zero = 0

INSERT INTO #Data
select
	uc.UtilityCode, 
	aif.NameUserFriendly, 
	CAST(ISNULL(aifr.IsRequired,0) AS INT) IsRequired
from
	dbo.UtilityCompany (nolock) uc
	left outer join dbo.AccountInfoFieldRequired (nolock) aifr
		on aifr.UtilityCompanyId = uc.id
	left outer join dbo.AccountInfoField (nolock) aif
		on aifr.AccountInfoFieldId = aif.id or aifr.AccountInfoFieldId = null
order by
	uc.UtilityCode
	
SELECT 
	UtilityCode, 
	Grid, 
	[I-Cap], 
	[Lbmp Zone], 
	[Load Profile],
	[Meter Owner],
	[Meter Type],
	[Rate Class],
	[Tariff Code],
	[T-Cap],
	[Voltage],
	[Zone]
FROM #Data
PIVOT
	( 
	SUM(IsRequired)
	FOR NameUserFriendly IN ([Grid],[I-Cap],[Lbmp Zone],[Load Profile],[Meter Owner],[Meter Type],[Rate Class],[Tariff Code],[T-Cap],[Voltage],[Zone])
)
AS P

END

--exec usp_AccountAccountInfoFieldRequired_GetAsGrid
GO
PRINT N'Creating [dbo].[usp_AccountInfoFieldRequired_GetByUtility]...';


GO
CREATE PROC [dbo].[usp_AccountInfoFieldRequired_GetByUtility]
AS
BEGIN

	SELECT
		AIFR.Id,
		UC.UtilityIdInt,
		UC.UtilityCode,
		AIF.NameMachineUnfriendly AS NameUserFriendly,
		AIFR.IsRequired,
		AIFR.Inactive,
		AIFR.CreatedBy,
		AIFR.CreatedDate,
		AIFR.LastModifiedBy,
		AIFR.LastModifiedDate
	FROM
		UtilityCompany (NOLOCK) UC
		INNER JOIN AccountInfoFieldRequired (NOLOCK) AIFR
			ON UC.Id = AIFR.UtilityCompanyId
		INNER JOIN AccountInfoField (NOLOCK) AIF
			ON AIFR.AccountInfoFieldId = AIF.ID
	WHERE
		AIFR.IsRequired = 1
	ORDER BY
		UC.UtilityCode,
		AIF.NameUserFriendly
		
END
GO
PRINT N'Creating [dbo].[usp_BillingType_RetrieveBy_UtilityRateClassLoadProfileTariffCode]...';


GO
CREATE PROC [dbo].[usp_BillingType_RetrieveBy_UtilityRateClassLoadProfileTariffCode]
	@UtilityIdInt INT,
	@RateClass AS NVARCHAR(255),
	@LoadProfile AS NVARCHAR(255),
	@TariffCode AS NVARCHAR(255)
AS
BEGIN

	SELECT
		DISTINCT BT.EnumValue
	FROM 
		dbo.LpApprovedBillingType (NOLOCK) LABT
		INNER JOIN dbo.LpBillingType (NOLOCK) LBT
			ON LABT.LpBillingTypeId = LBT.Id
		INNER JOIN dbo.BillingType (NOLOCK) BT
			ON LABT.ApprovedBillingTypeId = BT.Id
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON LBT.UtilityCompanyId = UC.Id
				AND UC.UtilityIdInt = @UtilityIdInt
		INNER JOIN dbo.PorDriver (NOLOCK) PD
			ON LBT.PorDriverId = PD.Id
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
			ON LBT.LoadProfileId = LP.Id
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON LBT.RateClassId = RC.Id
		LEFT OUTER JOIN dbo.TariffCode (NOLOCK) TC
			ON LBT.TariffCodeId = TC.Id
	WHERE
		((--PD.Name = 'Load Profile'
		PD.EnumValue = 0
		AND @LoadProfile IS NOT NULL 
		AND LP.LoadProfileCode IS NOT NULL
		AND LP.LoadProfileCode = @LoadProfile) 
		OR
		(--PD.Name = 'Rate Class'
		PD.EnumValue = 2
		AND @RateClass IS NOT NULL 
		AND RC.RateClassCode = @RateClass)
		OR
		(--PD.Name = 'Tariff Code'
		PD.EnumValue = 1
		AND @TariffCode IS NOT NULL 
		AND TC.TariffCodeCode = @TariffCode))
		
END
GO
PRINT N'Creating [dbo].[usp_BillingType_RetrieveByParams]...';


GO
CREATE PROC [dbo].[usp_BillingType_RetrieveByParams]
	@UtilityIdInt INT,
	@RateClass AS NVARCHAR(255),
	@LoadProfile AS NVARCHAR(255),
	@TariffCode AS NVARCHAR(255)
AS
BEGIN

	SELECT
		DISTINCT BT.EnumValue
	FROM 
		dbo.LpApprovedBillingType (NOLOCK) LABT
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON LABT.UtilityCompanyId = UC.Id
				AND UC.UtilityIdInt = @UtilityIdInt
		INNER JOIN dbo.PorDriver (NOLOCK) PD
			ON LABT.PorDriverId = PD.Id
		INNER JOIN dbo.BillingType (NOLOCK) BT
			ON LABT.ApprovedBillingTypeId = BT.Id
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
			ON LABT.LoadProfileId = LP.Id
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON LABT.RateClassId = RC.Id
		LEFT OUTER JOIN dbo.TariffCode (NOLOCK) TC
			ON LABT.TariffCodeId = TC.Id
	WHERE
		((--PD.Name = 'Load Profile'
		PD.EnumValue = 0
		AND @LoadProfile IS NOT NULL 
		AND LP.LoadProfileCode IS NOT NULL
		AND LP.LoadProfileCode = @LoadProfile) 
		OR
		(--PD.Name = 'Rate Class'
		PD.EnumValue = 2
		AND @RateClass IS NOT NULL 
		AND RC.RateClassCode = @RateClass)
		OR
		(--PD.Name = 'Tariff Code'
		PD.EnumValue = 1
		AND @TariffCode IS NOT NULL 
		AND TC.TariffCodeCode = @TariffCode))
		
END
GO
PRINT N'Creating [dbo].[usp_BillingType_RetrieveByUtilityRateClassLoadProfileTariffCode]...';


GO
CREATE PROC [dbo].[usp_BillingType_RetrieveByUtilityRateClassLoadProfileTariffCode]
	@UtilityIdInt INT,
	@RateClass AS NVARCHAR(255),
	@LoadProfile AS NVARCHAR(255),
	@TariffCode AS NVARCHAR(255)
AS
BEGIN

	SELECT
		DISTINCT BT.EnumValue
	FROM 
		dbo.LpApprovedBillingType (NOLOCK) LABT
		INNER JOIN dbo.LpBillingType (NOLOCK) LBT
			ON LABT.LpBillingTypeId = LBT.Id
		INNER JOIN dbo.BillingType (NOLOCK) BT
			ON LABT.ApprovedBillingTypeId = BT.Id
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON LBT.UtilityCompanyId = UC.Id
				AND UC.UtilityIdInt = @UtilityIdInt
		INNER JOIN dbo.PorDriver (NOLOCK) PD
			ON LBT.PorDriverId = PD.Id
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
			ON LBT.LoadProfileId = LP.Id
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON LBT.RateClassId = RC.Id
		LEFT OUTER JOIN dbo.TariffCode (NOLOCK) TC
			ON LBT.TariffCodeId = TC.Id
	WHERE
		((--PD.Name = 'Load Profile'
		PD.EnumValue = 0
		AND @LoadProfile IS NOT NULL 
		AND LP.LoadProfileCode IS NOT NULL
		AND LP.LoadProfileCode = @LoadProfile) 
		OR
		(--PD.Name = 'Rate Class'
		PD.EnumValue = 2
		AND @RateClass IS NOT NULL 
		AND RC.RateClassCode = @RateClass)
		OR
		(--PD.Name = 'Tariff Code'
		PD.EnumValue = 1
		AND @TariffCode IS NOT NULL 
		AND TC.TariffCodeCode = @TariffCode))
		
END
GO
PRINT N'Creating [dbo].[usp_Chart_HistoricalUsageRequestModeParameters]...';


GO
CREATE PROC usp_Chart_HistoricalUsageRequestModeParameters
AS
BEGIN

SELECT
	SUM(IsBillingAccountNumberRequired) AS IsBillingAccountNumberRequired,
	SUM(IsZipCodeRequired) AS IsZipCodeRequired,
	SUM(IsNameKeyRequired) AS IsNameKeyRequired,
	SUM(IsMdma) AS IsMdma,
	SUM(IsServiceProvider) AS IsServiceProvider
FROM
(
select 
	UC.UtilityCode, 
	CASE WHEN TSVIBANR.Value = 'Yes' THEN 1 ELSE 0 END AS IsBillingAccountNumberRequired,
	CASE WHEN TSVIZCR.Value = 'Yes' THEN 1 ELSE 0 END AS IsZipCodeRequired,
	CASE WHEN TSVINKR.Value = 'Yes' THEN 1 ELSE 0 END  AS IsNameKeyRequired,
	CASE WHEN TSVIM.Value = 'Yes' THEN 1 ELSE 0 END  AS IsMdma,
	CASE WHEN TSVISP.Value = 'Yes' THEN 1 ELSE 0 END AS IsServiceProvider
from 
	dbo.RequestModeHistoricalUsageParameter (NOLOCK) RMHUP
	INNER JOIN dbo.UtilityCompany (NOLOCK) UC 
		ON RMHUP.UtilityCompanyId = UC.Id
	INNER JOIN dbo.TriStateValue (NOLOCK) TSVIBANR
		ON RMHUP.IsBillingAccountNumberRequiredId = TSVIBANR.Id
	INNER JOIN dbo.TriStateValue (NOLOCK) TSVIZCR
		ON RMHUP.IsZipCodeRequiredId = TSVIZCR.Id
	INNER JOIN dbo.TriStateValue (NOLOCK) TSVINKR
		ON RMHUP.IsNameKeyRequiredId = TSVINKR.Id
	INNER JOIN dbo.TriStateValue (NOLOCK) TSVIM
		ON RMHUP.IsMdmaId = TSVIM.Id
	INNER JOIN dbo.TriStateValue (NOLOCK) TSVISP
		ON RMHUP.IsServiceProviderId = TSVISP.Id
) A

END
GO
PRINT N'Creating [dbo].[usp_Chart_HistoricalUsageRequestModeParameters_Count]...';


GO
CREATE PROC [dbo].[usp_Chart_HistoricalUsageRequestModeParameters_Count]
AS
BEGIN

SELECT
	UtilityCode,
	SUM(IsBillingAccountNumberRequired) + SUM(IsZipCodeRequired) + SUM(IsNameKeyRequired) + SUM(IsMdma) + SUM(IsServiceProvider) +
	SUM(IsMeterInstallerId) + SUM(IsMeterReaderId) + SUM(IsMeterOwnerId) + SUM(IsSchedulingCoordinatorId) + SUM(HasReferenceNumberId) + SUM(HasCustomerNumberId) + SUM(HasPodIdNumberId) + SUM(HasMeterTypeId) + SUM(IsMeterNumberRequiredId)
	AS RequiredFieldCount
FROM
(
select 
	UC.UtilityCode, 
	CASE WHEN TSVIBANR.Value = 'Yes' THEN 1 ELSE 0 END AS IsBillingAccountNumberRequired,
	CASE WHEN TSVIZCR.Value = 'Yes' THEN 1 ELSE 0 END AS IsZipCodeRequired,
	CASE WHEN TSVINKR.Value = 'Yes' THEN 1 ELSE 0 END  AS IsNameKeyRequired,
	CASE WHEN TSVIM.Value = 'Yes' THEN 1 ELSE 0 END  AS IsMdma,
	CASE WHEN TSVISP.Value = 'Yes' THEN 1 ELSE 0 END AS IsServiceProvider,
	CASE WHEN TSVIMI.Value = 'Yes' THEN 1 ELSE 0 END AS IsMeterInstallerId,
	CASE WHEN TSVIMR.Value = 'Yes' THEN 1 ELSE 0 END AS IsMeterReaderId,
	CASE WHEN TSVIMO.Value = 'Yes' THEN 1 ELSE 0 END AS IsMeterOwnerId,
	CASE WHEN TSVISC.Value = 'Yes' THEN 1 ELSE 0 END AS IsSchedulingCoordinatorId,
	CASE WHEN TSVHRN.Value = 'Yes' THEN 1 ELSE 0 END AS HasReferenceNumberId,
	CASE WHEN TSVHCN.Value = 'Yes' THEN 1 ELSE 0 END AS HasCustomerNumberId,
	CASE WHEN TSVHPIN.Value = 'Yes' THEN 1 ELSE 0 END AS HasPodIdNumberId,
	CASE WHEN TSVHMT.Value = 'Yes' THEN 1 ELSE 0 END AS HasMeterTypeId,
	CASE WHEN TSVIMNR.Value = 'Yes' THEN 1 ELSE 0 END AS IsMeterNumberRequiredId
from 
	dbo.RequestModeHistoricalUsageParameter (NOLOCK) RMHUP
	INNER JOIN dbo.UtilityCompany (NOLOCK) UC 
		ON RMHUP.UtilityCompanyId = UC.Id
	INNER JOIN dbo.TriStateValue (NOLOCK) TSVIBANR
		ON RMHUP.IsBillingAccountNumberRequiredId = TSVIBANR.Id
	INNER JOIN dbo.TriStateValue (NOLOCK) TSVIZCR
		ON RMHUP.IsZipCodeRequiredId = TSVIZCR.Id
	INNER JOIN dbo.TriStateValue (NOLOCK) TSVINKR
		ON RMHUP.IsNameKeyRequiredId = TSVINKR.Id
	INNER JOIN dbo.TriStateValue (NOLOCK) TSVIM
		ON RMHUP.IsMdmaId = TSVIM.Id
	INNER JOIN dbo.TriStateValue (NOLOCK) TSVISP
		ON RMHUP.IsServiceProviderId = TSVISP.Id
	INNER JOIN dbo.TriStateValue (NOLOCK) TSVIMI
		ON RMHUP.IsMeterInstallerId = TSVIMI.Id
	INNER JOIN dbo.TriStateValue (NOLOCK) TSVIMR
		ON RMHUP.IsMeterReaderId = TSVIMR.Id
	INNER JOIN dbo.TriStateValue (NOLOCK) TSVIMO
		ON RMHUP.IsMeterOwnerId = TSVIMO.Id
	INNER JOIN dbo.TriStateValue (NOLOCK) TSVISC
		ON RMHUP.IsSchedulingCoordinatorId = TSVISC.Id
	INNER JOIN dbo.TriStateValue (NOLOCK) TSVHRN
		ON RMHUP.HasReferenceNumberId = TSVHRN.Id
	INNER JOIN dbo.TriStateValue (NOLOCK) TSVHCN
		ON RMHUP.HasCustomerNumberId = TSVHCN.Id
	INNER JOIN dbo.TriStateValue (NOLOCK) TSVHPIN
		ON RMHUP.HasPodIdNumberId = TSVHPIN.Id
	INNER JOIN dbo.TriStateValue (NOLOCK) TSVHMT
		ON RMHUP.HasMeterTypeId = TSVHMT.Id
	INNER JOIN dbo.TriStateValue (NOLOCK) TSVIMNR
		ON RMHUP.IsMeterNumberRequiredId = TSVIMNR.Id
) A
GROUP BY UtilityCode
ORDER BY SUM(IsBillingAccountNumberRequired) + SUM(IsZipCodeRequired) + SUM(IsNameKeyRequired) + SUM(IsMdma) + SUM(IsServiceProvider) +
	SUM(IsMeterInstallerId) + SUM(IsMeterReaderId) + SUM(IsMeterOwnerId) + SUM(IsSchedulingCoordinatorId) + SUM(HasReferenceNumberId) + SUM(HasCustomerNumberId) + SUM(HasPodIdNumberId) + SUM(HasMeterTypeId) + SUM(IsMeterNumberRequiredId) DESC

END
GO
PRINT N'Creating [dbo].[usp_Chart_HuLpSla]...';


GO
CREATE PROC [dbo].[usp_Chart_HuLpSla]
AS
BEGIN

SELECT
	UC.UtilityCode,
	AVG(ISNULL(RMHU.LibertyPowersSlaFollowUpHistoricalUsageResponseInDays,0)) LpSla
FROM
	RequestModehistoricalusage (NOLOCK) RMHU
	INNER JOIN UtilityCompany (NOLOCK ) UC
		ON RMHU.UtilityCompanyId = UC.Id
WHERE 
	UC.UtilityIdInt < 15
GROUP BY 
	UC.UtilityCode
ORDER BY 
	UC.UtilityCode

END
GO
PRINT N'Creating [dbo].[usp_Chart_HuUtilitySla]...';


GO
CREATE PROC [dbo].[usp_Chart_HuUtilitySla]
AS
BEGIN

SELECT
	UC.UtilityCode,
	AVG(ISNULL(RMHU.UtilitysSlaHistoricalUsageResponseInDays,0)) UtilitySla
FROM
	RequestModehistoricalusage (NOLOCK) RMHU
	INNER JOIN UtilityCompany (NOLOCK ) UC
		ON RMHU.UtilityCompanyId = UC.Id
WHERE 
	UC.UtilityIdInt < 15
GROUP BY 
	UC.UtilityCode
ORDER BY 
	AVG(ISNULL(RMHU.UtilitysSlaHistoricalUsageResponseInDays,0)) DESC

END
GO
PRINT N'Creating [dbo].[usp_Chart_IdrRuleCount]...';


GO
CREATE PROC usp_Chart_IdrRuleCount
AS 
BEGIN


	SELECT
		UtilityCode,
		COUNT(*) AS TotalRuleCount,
		SUM(RateClassRuleCount) AS RateClassRuleCount,
		SUM(LoadProfileRuleCount) AS LoadProfileRuleCount,
		SUM(MinUsageMWhRuleCount) AS MinUsageMWhRuleCount,
		SUM(MaxUsageMWhRuleCount) AS MaxUsageMWhRuleCount,
		SUM(IsEligibleRuleCount) AS IsEligibleRuleCount,
		SUM(IsHiaRuleCount) AS IsHiaRuleCount
	FROM
	(
	SELECT 
		UC.UtilityCode, 
		CASE WHEN RateClassId IS NULL THEN 0 ELSE 1 END AS RateClassRuleCount,
		CASE WHEN LoadProfileId IS NULL THEN 0 ELSE 1 END AS LoadProfileRuleCount,
		CASE WHEN MinUsageMWh IS NULL THEN 0 ELSE 1 END AS MinUsageMWhRuleCount,
		CASE WHEN MaxUsageMWh IS NULL THEN 0 ELSE 1 END AS MaxUsageMWhRuleCount,
		CAST(IsOnEligibleCustomerList AS INT) AS IsEligibleRuleCount,
		CAST(IsHistoricalArchiveAvailable AS INT) AS IsHiaRuleCount
	FROM 
		IdrRule (NOLOCK) IDR
		INNER JOIN UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
	) A
	GROUP BY A.UtilityCode
	ORDER BY A.UtilityCode
	
END
GO
PRINT N'Creating [dbo].[usp_Chart_PorAvgDiscountRate]...';


GO

CREATE PROC dbo.usp_Chart_PorAvgDiscountRate
AS 
BEGIN
SELECT
	UC.UtilityCode,
	AVG(ISNULL(POR.PorDiscountRate,0)) AvgPorDiscountRate
FROM
	PurchaseOfReceivables (NOLOCK) POR
	INNER JOIN UtilityCompany (NOLOCK ) UC
		ON POR.UtilityCompanyId = UC.Id
GROUP BY 
	UC.UtilityCode
ORDER BY 
	UC.UtilityCode

END
GO
PRINT N'Creating [dbo].[usp_Chart_PorAvgFlatFee]...';


GO
CREATE PROC dbo.usp_Chart_PorAvgFlatFee
AS 
BEGIN
SELECT
	UC.UtilityCode,
	AVG(ISNULL(POR.PorFlatFee,0)) AvgPorFlatFee
FROM
	PurchaseOfReceivables (NOLOCK) POR
	INNER JOIN UtilityCompany (NOLOCK ) UC
		ON POR.UtilityCompanyId = UC.Id
GROUP BY 
	UC.UtilityCode
ORDER BY 
	UC.UtilityCode

END
GO
PRINT N'Creating [dbo].[usp_Chart_PorCount]...';


GO
CREATE PROC usp_Chart_PorCount
AS
BEGIN

SELECT
	UC.UtilityCode,
	COUNT(POR.Id) PorCount
FROM
	PurchaseOfReceivables (NOLOCK) POR
	INNER JOIN UtilityCompany (NOLOCK ) UC
		ON POR.UtilityCompanyId = UC.Id
GROUP BY 
	UC.UtilityCode
ORDER BY 
	UC.UtilityCode

END
GO
PRINT N'Creating [dbo].[usp_ChartOne]...';


GO
CREATE Proc [dbo].[usp_ChartOne]
AS BEGIN
select 
	uc.UtilityCode + ' ' + rmet.Name + ' ' + rmt.Name AS UtilCodeEnrolAndMode,
	rmi.UtilitysSlaIdrResponseInDays
from
	RequestModeIdr (NOLOCK) rmi
	inner join UtilityCompany (NOLOCK) uc
		on rmi.UtilityCompanyId = uc.Id
	inner join RequestModeEnrollmentType (NOLOCK) rmet 
		on rmi.RequestModeEnrollmentTypeId = rmet.Id
	inner join RequestModeType (NOLOCK) rmt
		on rmi.RequestModeTypeId = rmt.id
order by 
	uc.UtilityCode,
	rmet.Name,
	rmt.Name
END
GO
PRINT N'Creating [dbo].[usp_CheckForExistingUtilityCompanyIdRequestEnrollmentTypeIds]...';


GO
CREATE PROC [dbo].[usp_CheckForExistingUtilityCompanyIdRequestEnrollmentTypeIds]
	@RequestModeEnrollmentTypeId NVARCHAR(50),
	@UtilityCompanyId NVARCHAR(50)
AS
BEGIN

	SELECT 
		COUNT(RMHU.Id) AS CountOfId
	FROM 
		RequestModeHistoricalUsage (NOLOCK) RMHU
	WHERE
		CONVERT(NVARCHAR(50), RMHU.UtilityCompanyId) = @UtilityCompanyId
		AND CONVERT(NVARCHAR(50), RMHU.RequestModeEnrollmentTypeId) = @RequestModeEnrollmentTypeId

END
GO
PRINT N'Creating [dbo].[usp_CheckForExistingUtilityCompanyIdRequestEnrollmentTypeIdsRequestModeIcap]...';


GO
CREATE PROC dbo.usp_CheckForExistingUtilityCompanyIdRequestEnrollmentTypeIdsRequestModeIcap
	@RequestModeEnrollmentTypeId NVARCHAR(50),
	@UtilityCompanyId NVARCHAR(50)
AS
BEGIN

	SELECT 
		COUNT(RMHU.Id)
	FROM 
		RequestModeIcap (NOLOCK) RMHU
	WHERE
		RMHU.UtilityCompanyId = @UtilityCompanyId
		AND RMHU.RequestModeEnrollmentTypeId = @RequestModeEnrollmentTypeId
	
END
GO
PRINT N'Creating [dbo].[usp_CheckForExistingUtilityCompanyIdRequestEnrollmentTypeIdsRequestModeIdr]...';


GO

CREATE PROC [dbo].[usp_CheckForExistingUtilityCompanyIdRequestEnrollmentTypeIdsRequestModeIdr]
	@RequestModeEnrollmentTypeId NVARCHAR(50),
	@UtilityCompanyId NVARCHAR(50)
AS
BEGIN

	SELECT 
		COUNT(RMI.Id)
	FROM 
		RequestModeIdr (NOLOCK) RMI
	WHERE
		RMI.UtilityCompanyId = @UtilityCompanyId
		AND RMI.RequestModeEnrollmentTypeId = @RequestModeEnrollmentTypeId
	
END
GO
PRINT N'Creating [dbo].[usp_IdrRule_Conglomeration]...';


GO
CREATE PROC [dbo].[usp_IdrRule_Conglomeration]
	@RateClassCode AS NVARCHAR(255),
	@LoadProfileCode AS NVARCHAR(255),
	@Eligibility AS BIT,
	@Hia AS BIT,
	@UtilityIdInt AS INT,
	@Usage AS INT
AS
BEGIN

	DECLARE @GuaranteedFactorNotMet INT
	DECLARE @TotalRuleCount INT
	DECLARE @BusinessFactorNotMet INT
	DECLARE @MatchCount INT
	DECLARE @InsufficientInfoCount INT

	DECLARE @GuaranteedFactorNotMetTable TABLE
	(
		IdrId NVARCHAR(90)
	)

	DECLARE @TotalRuleCountTable TABLE
	(
		IdrId NVARCHAR(90)
	)

	SELECT DISTINCT
		IDR.Id,
		RC.RateClassCode,
		LP.LoadProfileCode,
		IDR.IsOnEligibleCustomerList,
		IDR.IsHistoricalArchiveAvailable,
		IDR.MinUsageMWh,
		IDR.MaxUsageMWh,
		*
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON IDR.RateClassId = RC.Id
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
			ON IDR.LoadProfileId = LP.Id
		inner join dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
	WHERE
		UC.UtilityIdInt = @UtilityIdInt	

	SELECT 
		@MatchCount = COUNT(IDR.ID)
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON IDR.RateClassId = RC.Id
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
			ON IDR.LoadProfileId = LP.Id
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
	WHERE
		UC.UtilityIdInt = @UtilityIdInt
		AND
		(
			RC.RateClassCode IS NULL
			OR
			(
				@RateClassCode IS NOT NULL AND RC.RateClassCode IS NOT NULL AND @RateClassCode = RC.RateClassCode
			)
		)
		AND
		(
			LP.LoadProfileCode IS NULL 
			OR
			(
				@LoadProfileCode IS NOT NULL AND LP.LoadProfileCode IS NOT NULL AND @LoadProfileCode = LP.LoadProfileCode
			)
		)
		AND
		(
			IDR.IsOnEligibleCustomerList = 0
			OR 
			(
				IDR.IsOnEligibleCustomerList = 1
				AND
				@Eligibility = 1
			)
		)
		AND
		(
			IDR.IsHistoricalArchiveAvailable = @Hia
		)
		AND 
		(
			(IDR.MaxUsageMWh IS NULL OR (IDR.MaxUsageMWh IS NOT NULL AND @Usage IS NOT NULL AND IDR.MaxUsageMWh >= @Usage))
			AND
			(IDR.MinUsageMWh IS NULL OR (IDR.MinUsageMWh IS NOT NULL AND @Usage IS NOT NULL AND IDR.MinUsageMWh <= @Usage))
		)
		
----------------------------------------------------------------------

	SELECT 
		@InsufficientInfoCount = COUNT(DISTINCT IDR.ID)
	FROM
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
	WHERE
		UC.UtilityIdInt = @UtilityIdInt
		AND IDR.ID NOT IN
	(
	SELECT DISTINCT
		IDR.ID
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON IDR.RateClassId = RC.Id
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
			AND UC.UtilityIdInt = @UtilityIdInt
	WHERE
		RC.RateClassCode IS NOT NULL 
		AND @RateClassCode IS NOT NULL
		AND RC.RateClassCode <> @RateClassCode
	UNION	
	SELECT DISTINCT
		IDR.ID
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LC
			ON IDR.LoadProfileId = LC.Id
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
			AND UC.UtilityIdInt = @UtilityIdInt
	WHERE
		LC.LoadProfileCode IS NOT NULL 
		AND @LoadProfileCode IS NOT NULL
		AND LC.LoadProfileCode <> @LoadProfileCode
	UNION	
	SELECT DISTINCT
		IDR.ID
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
			AND UC.UtilityIdInt = @UtilityIdInt
	WHERE
		IDR.MinUsageMWh IS NOT NULL
		AND @Usage IS NOT NULL
		AND IDR.MinUsageMWh > @Usage
	UNION
	SELECT DISTINCT
		IDR.ID
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
			AND UC.UtilityIdInt = @UtilityIdInt
	WHERE
		IDR.MaxUsageMWh IS NOT NULL
		AND @Usage IS NOT NULL
		AND IDR.MaxUsageMWh < @Usage
	UNION
	SELECT DISTINCT
		IDR.ID
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
			AND UC.UtilityIdInt = @UtilityIdInt
	WHERE
		IDR.IsOnEligibleCustomerList IS NOT NULL
		AND @Eligibility IS NOT NULL
		AND IDR.IsOnEligibleCustomerList <> @Eligibility
		AND IDR.IsOnEligibleCustomerList = 1
	UNION
	SELECT DISTINCT
		IDR.ID
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
			AND UC.UtilityIdInt = @UtilityIdInt
	WHERE
		IDR.IsHistoricalArchiveAvailable IS NOT NULL
		AND @Hia IS NOT NULL
		AND IDR.IsHistoricalArchiveAvailable <> @Hia

	UNION

	SELECT DISTINCT
		IDR.[Id]
	FROM
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON IDR.RateClassId = RC.Id
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
			ON IDR.LoadProfileId = LP.Id
		INNER JOIN dbo.RequestModeIdr (NOLOCK) RMI
			ON UC.Id = RMI.UtilityCompanyId
				AND IDR.RequestModeTypeId = RMI.RequestModeTypeId
		INNER JOIN dbo.RequestModeEnrollmentType (NOLOCK) REMT
			ON RMI.RequestModeEnrollmentTypeId = REMT.Id
		LEFT OUTER JOIN dbo.RequestModeType (NOLOCK) RM
			ON IDR.RequestModeTypeId = RM.Id
	WHERE
		(((@RateClassCode IS NULL OR RTRIM(LTRIM(@RateClassCode)) = '') AND RC.RateClassCode IS NULL) OR RC.RateClassCode IS NULL OR RC.RateClassCode = @RateClassCode)
		AND (((@LoadProfileCode IS NULL OR RTRIM(LTRIM(@LoadProfileCode)) = '') AND LP.LoadProfileCode IS NULL) OR LP.LoadProfileCode IS NULL OR LP.LoadProfileCode = @LoadProfileCode)
		AND UC.UtilityIdInt = @UtilityIdInt
		AND ((@Usage IS NULL AND IDR.MinUsageMWh IS NULL) OR IDR.MinUsageMWh IS NULL OR IDR.MinUsageMWh <= @Usage)
		AND ((IDR.MaxUsageMWh IS NULL AND @Usage IS NULL) OR IDR.MaxUsageMWh IS NULL OR IDR.MaxUsageMWh >= @Usage)
		AND ((@Hia IS NULL AND IDR.IsHistoricalArchiveAvailable IS NULL) OR IDR.IsHistoricalArchiveAvailable = @Hia)
	)

----------------------------------------------------------------------		
		
		
		
		INSERT INTO @GuaranteedFactorNotMetTable
		SELECT 
			IDR.Id
		FROM
			dbo.IdrRule (NOLOCK) IDR
			INNER JOIN dbo.UtilityCompany (NOLOCK) UC
				ON IDR.UtilityCompanyId = UC.Id
			LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
				ON IDR.RateClassId = RC.Id
			LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
				ON IDR.LoadProfileId = LP.Id
		WHERE
			UC.UtilityIdInt = @UtilityIdInt
			AND
			(
				(RC.RateClassCode IS NOT NULL AND @RateClassCode IS NOT NULL AND RC.RateClassCode <> @RateClassCode)
				OR
				(LP.LoadProfileCode IS NOT NULL AND @LoadProfileCode IS NOT NULL AND LP.LoadProfileCode <> @LoadProfileCode)
				OR
				(IDR.IsOnEligibleCustomerList = 1 AND @Eligibility = 0)
				OR
				(IDR.IsHistoricalArchiveAvailable <> @Hia)
			)
	
	INSERT INTO @TotalRuleCountTable
	SELECT 
		IDR.Id
	FROM
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON IDR.RateClassId = RC.Id
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
			ON IDR.LoadProfileId = LP.Id
	WHERE
		UC.UtilityIdInt = @UtilityIdInt

	--SELECT 
	--	@GuaranteedFactorNotMet = COUNT(IdrId)
	--FROM
	--	@GuaranteedFactorNotMetTable
	SELECT 
		@GuaranteedFactorNotMet = COUNT(IDR.Id)
	FROM
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON IDR.RateClassId = RC.Id
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
			ON IDR.LoadProfileId = LP.Id
	WHERE
		UC.UtilityIdInt = @UtilityIdInt
		AND
		(
			(RC.RateClassCode IS NOT NULL AND @RateClassCode IS NOT NULL AND RC.RateClassCode <> @RateClassCode)
			OR
			(LP.LoadProfileCode IS NOT NULL AND @LoadProfileCode IS NOT NULL AND LP.LoadProfileCode <> @LoadProfileCode)
			OR
			(IDR.IsOnEligibleCustomerList = 1 AND @Eligibility = 0)
			OR
			(IDR.IsHistoricalArchiveAvailable <> @Hia)
		)

	--SELECT 
	--	@TotalRuleCount = COUNT(IdrId)
	--FROM
	--	@TotalRuleCountTable
	SELECT 
		@TotalRuleCount = COUNT(IDR.Id)
	FROM
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON IDR.RateClassId = RC.Id
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
			ON IDR.LoadProfileId = LP.Id
	WHERE
		UC.UtilityIdInt = @UtilityIdInt

	SELECT
		@BusinessFactorNotMet = COUNT(IDR.Id)
	FROM
		dbo.IdrRule (NOLOCK) IDR
	WHERE
		IDR.Id IN
		(
			SELECT
				IdrId
			FROM
				@TotalRuleCountTable TRCT
			WHERE
				TRCT.IdrId NOT IN (SELECT IdrId FROM @GuaranteedFactorNotMetTable)
		)
		AND 
		(
			(
				@Usage IS NULL AND (IDR.MinUsageMWh IS NOT NULL AND IDR.MaxUsageMWh IS NOT NULL)
			)
			OR
			(
				@Usage IS NOT NULL AND 
				(
					(
						IDR.MinUsageMWh IS NOT NULL 
						AND @Usage < IDR.MinUsageMWh
					)
					OR
					(
						IDR.MaxUsageMWh IS NOT NULL 
						AND @Usage > IDR.MaxUsageMWh
					)
				)
			)
		)

	SELECT @RateClassCode RateClassCode, @LoadProfileCode LoadProfileCode, @Eligibility Eligibility, @Hia Hia, @UtilityIdInt UtilityIdInt, @Usage Usage

	SELECT @MatchCount MatchCount, @InsufficientInfoCount InsufficientInfoCount, @TotalRuleCount TotalRuleCount, @GuaranteedFactorNotMet GuaranteedFactorNotMet, @BusinessFactorNotMet BusinessFactorNotMet

	SELECT
		CASE WHEN @MatchCount > 0 THEN 1 ELSE 0 END AS Match
		
	SELECT
		CASE WHEN @MatchCount = 0 AND @InsufficientInfoCount > 0 THEN 1 ELSE 0 END AS InsufficientInfo

	SELECT
		CASE WHEN @MatchCount > 0 OR @TotalRuleCount > @GuaranteedFactorNotMet THEN 0 ELSE 1 END AS GuaranteedFactorNotMet

	SELECT
		CASE WHEN @MatchCount = 0 AND @InsufficientInfoCount = 0 AND @BusinessFactorNotMet > 0 THEN 1 ELSE 0 END AS BusinessFactorNotMet

	SELECT
		CASE WHEN @MatchCount > 0 THEN 1 ELSE 0 END AS Match,
		CASE WHEN @MatchCount = 0 AND @InsufficientInfoCount > 0 THEN 1 ELSE 0 END AS InsufficientInfo,
		CASE WHEN @MatchCount > 0 OR @TotalRuleCount > @GuaranteedFactorNotMet THEN 0 ELSE 1 END AS GuaranteedFactorNotMet,
		CASE WHEN @MatchCount = 0 AND @InsufficientInfoCount = 0 AND @BusinessFactorNotMet > 0 THEN 1 ELSE 0 END AS BusinessFactorNotMet
		
END
GO
PRINT N'Creating [dbo].[usp_IdrRule_GuaranteedFactorNotMet]...';


GO
CREATE PROC usp_IdrRule_GuaranteedFactorNotMet
	@RateClassCode AS NVARCHAR(255),
	@LoadProfileCode AS NVARCHAR(255),
	@Eligibility AS BIT,
	@Hia AS BIT,
	@UtilityIdInt AS INT,
	@Usage AS INT
AS
BEGIN

	DECLARE @GuaranteedFactorNotMet INT
	DECLARE @TotalRuleCount INT
	DECLARE @BusinessFactorNotMet INT
	DECLARE @MatchCount INT
	DECLARE @InsufficientInfoCount INT

	DECLARE @GuaranteedFactorNotMetTable TABLE
	(
		IdrId NVARCHAR(90)
	)

	DECLARE @TotalRuleCountTable TABLE
	(
		IdrId NVARCHAR(90)
	)

	SELECT DISTINCT
		IDR.Id,
		RC.RateClassCode,
		LP.LoadProfileCode,
		IDR.IsOnEligibleCustomerList,
		IDR.IsHistoricalArchiveAvailable,
		IDR.MinUsageMWh,
		IDR.MaxUsageMWh,
		*
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON IDR.RateClassId = RC.Id
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
			ON IDR.LoadProfileId = LP.Id
		inner join dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
	WHERE
		UC.UtilityIdInt = @UtilityIdInt	

	SELECT 
		@MatchCount = COUNT(IDR.ID)
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON IDR.RateClassId = RC.Id
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
			ON IDR.LoadProfileId = LP.Id
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
	WHERE
		UC.UtilityIdInt = @UtilityIdInt
		AND
		(
			RC.RateClassCode IS NULL
			OR
			(
				@RateClassCode IS NOT NULL AND RC.RateClassCode IS NOT NULL AND @RateClassCode = RC.RateClassCode
			)
		)
		AND
		(
			LP.LoadProfileCode IS NULL 
			OR
			(
				@LoadProfileCode IS NOT NULL AND LP.LoadProfileCode IS NOT NULL AND @LoadProfileCode = LP.LoadProfileCode
			)
		)
		AND
		(
			IDR.IsOnEligibleCustomerList = 0
			OR 
			(
				IDR.IsOnEligibleCustomerList = 1
				AND
				@Eligibility = 1
			)
		)
		AND
		(
			IDR.IsHistoricalArchiveAvailable = @Hia
		)
		AND 
		(
			(IDR.MaxUsageMWh IS NULL OR (IDR.MaxUsageMWh IS NOT NULL AND @Usage IS NOT NULL AND IDR.MaxUsageMWh >= @Usage))
			AND
			(IDR.MinUsageMWh IS NULL OR (IDR.MinUsageMWh IS NOT NULL AND @Usage IS NOT NULL AND IDR.MinUsageMWh <= @Usage))
		)
		
----------------------------------------------------------------------

	SELECT 
		@InsufficientInfoCount = COUNT(DISTINCT IDR.ID)
	FROM
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
	WHERE
		UC.UtilityIdInt = @UtilityIdInt
		AND IDR.ID NOT IN
	(
	SELECT DISTINCT
		IDR.ID
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON IDR.RateClassId = RC.Id
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
			AND UC.UtilityIdInt = @UtilityIdInt
	WHERE
		RC.RateClassCode IS NOT NULL 
		AND @RateClassCode IS NOT NULL
		AND RC.RateClassCode <> @RateClassCode
	UNION	
	SELECT DISTINCT
		IDR.ID
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LC
			ON IDR.LoadProfileId = LC.Id
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
			AND UC.UtilityIdInt = @UtilityIdInt
	WHERE
		LC.LoadProfileCode IS NOT NULL 
		AND @LoadProfileCode IS NOT NULL
		AND LC.LoadProfileCode <> @LoadProfileCode
	UNION	
	SELECT DISTINCT
		IDR.ID
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
			AND UC.UtilityIdInt = @UtilityIdInt
	WHERE
		IDR.MinUsageMWh IS NOT NULL
		AND @Usage IS NOT NULL
		AND IDR.MinUsageMWh > @Usage
	UNION
	SELECT DISTINCT
		IDR.ID
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
			AND UC.UtilityIdInt = @UtilityIdInt
	WHERE
		IDR.MaxUsageMWh IS NOT NULL
		AND @Usage IS NOT NULL
		AND IDR.MaxUsageMWh < @Usage
	UNION
	SELECT DISTINCT
		IDR.ID
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
			AND UC.UtilityIdInt = @UtilityIdInt
	WHERE
		IDR.IsOnEligibleCustomerList IS NOT NULL
		AND @Eligibility IS NOT NULL
		AND IDR.IsOnEligibleCustomerList <> @Eligibility
	UNION
	SELECT DISTINCT
		IDR.ID
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
			AND UC.UtilityIdInt = @UtilityIdInt
	WHERE
		IDR.IsHistoricalArchiveAvailable IS NOT NULL
		AND @Hia IS NOT NULL
		AND IDR.IsHistoricalArchiveAvailable <> @Hia

	UNION

	SELECT DISTINCT
		IDR.[Id]
	FROM
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON IDR.RateClassId = RC.Id
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
			ON IDR.LoadProfileId = LP.Id
		INNER JOIN dbo.RequestModeIdr (NOLOCK) RMI
			ON UC.Id = RMI.UtilityCompanyId
				AND IDR.RequestModeTypeId = RMI.RequestModeTypeId
		INNER JOIN dbo.RequestModeEnrollmentType (NOLOCK) REMT
			ON RMI.RequestModeEnrollmentTypeId = REMT.Id
		LEFT OUTER JOIN dbo.RequestModeType (NOLOCK) RM
			ON IDR.RequestModeTypeId = RM.Id
	WHERE
		(((@RateClassCode IS NULL OR RTRIM(LTRIM(@RateClassCode)) = '') AND RC.RateClassCode IS NULL) OR RC.RateClassCode IS NULL OR RC.RateClassCode = @RateClassCode)
		AND (((@LoadProfileCode IS NULL OR RTRIM(LTRIM(@LoadProfileCode)) = '') AND LP.LoadProfileCode IS NULL) OR LP.LoadProfileCode IS NULL OR LP.LoadProfileCode = @LoadProfileCode)
		AND UC.UtilityIdInt = @UtilityIdInt
		AND ((@Usage IS NULL AND IDR.MinUsageMWh IS NULL) OR IDR.MinUsageMWh IS NULL OR IDR.MinUsageMWh <= @Usage)
		AND ((IDR.MaxUsageMWh IS NULL AND @Usage IS NULL) OR IDR.MaxUsageMWh IS NULL OR IDR.MaxUsageMWh >= @Usage)
		AND ((@Hia IS NULL AND IDR.IsHistoricalArchiveAvailable IS NULL) OR IDR.IsHistoricalArchiveAvailable = @Hia)
	)

----------------------------------------------------------------------		
		
		
		
		INSERT INTO @GuaranteedFactorNotMetTable
		SELECT 
			IDR.Id
		FROM
			dbo.IdrRule (NOLOCK) IDR
			INNER JOIN dbo.UtilityCompany (NOLOCK) UC
				ON IDR.UtilityCompanyId = UC.Id
			LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
				ON IDR.RateClassId = RC.Id
			LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
				ON IDR.LoadProfileId = LP.Id
		WHERE
			UC.UtilityIdInt = @UtilityIdInt
			AND
			(
				(RC.RateClassCode IS NOT NULL AND @RateClassCode IS NOT NULL AND RC.RateClassCode <> @RateClassCode)
				OR
				(LP.LoadProfileCode IS NOT NULL AND @LoadProfileCode IS NOT NULL AND LP.LoadProfileCode <> @LoadProfileCode)
				OR
				(IDR.IsOnEligibleCustomerList = 1 AND @Eligibility = 0)
				OR
				(IDR.IsHistoricalArchiveAvailable <> @Hia)
			)
	
	INSERT INTO @TotalRuleCountTable
	SELECT 
		IDR.Id
	FROM
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON IDR.RateClassId = RC.Id
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
			ON IDR.LoadProfileId = LP.Id
	WHERE
		UC.UtilityIdInt = @UtilityIdInt

	--SELECT 
	--	@GuaranteedFactorNotMet = COUNT(IdrId)
	--FROM
	--	@GuaranteedFactorNotMetTable
	SELECT 
		@GuaranteedFactorNotMet = COUNT(IDR.Id)
	FROM
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON IDR.RateClassId = RC.Id
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
			ON IDR.LoadProfileId = LP.Id
	WHERE
		UC.UtilityIdInt = @UtilityIdInt
		AND
		(
			(RC.RateClassCode IS NOT NULL AND @RateClassCode IS NOT NULL AND RC.RateClassCode <> @RateClassCode)
			OR
			(LP.LoadProfileCode IS NOT NULL AND @LoadProfileCode IS NOT NULL AND LP.LoadProfileCode <> @LoadProfileCode)
			OR
			(IDR.IsOnEligibleCustomerList = 1 AND @Eligibility = 0)
			OR
			(IDR.IsHistoricalArchiveAvailable <> @Hia)
		)

	--SELECT 
	--	@TotalRuleCount = COUNT(IdrId)
	--FROM
	--	@TotalRuleCountTable
	SELECT 
		@TotalRuleCount = COUNT(IDR.Id)
	FROM
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON IDR.RateClassId = RC.Id
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
			ON IDR.LoadProfileId = LP.Id
	WHERE
		UC.UtilityIdInt = @UtilityIdInt

	SELECT
		@BusinessFactorNotMet = COUNT(IDR.Id)
	FROM
		dbo.IdrRule (NOLOCK) IDR
	WHERE
		IDR.Id IN
		(
			SELECT
				IdrId
			FROM
				@TotalRuleCountTable TRCT
			WHERE
				TRCT.IdrId NOT IN (SELECT IdrId FROM @GuaranteedFactorNotMetTable)
		)
		AND 
		(
			(
				@Usage IS NULL AND (IDR.MinUsageMWh IS NOT NULL AND IDR.MaxUsageMWh IS NOT NULL)
			)
			OR
			(
				@Usage IS NOT NULL AND 
				(
					(
						IDR.MinUsageMWh IS NOT NULL 
						AND @Usage < IDR.MinUsageMWh
					)
					OR
					(
						IDR.MaxUsageMWh IS NOT NULL 
						AND @Usage > IDR.MaxUsageMWh
					)
				)
			)
		)

	SELECT @RateClassCode RateClassCode, @LoadProfileCode LoadProfileCode, @Eligibility Eligibility, @Hia Hia, @UtilityIdInt UtilityIdInt, @Usage Usage

	SELECT @MatchCount MatchCount, @InsufficientInfoCount InsufficientInfoCount, @TotalRuleCount TotalRuleCount, @GuaranteedFactorNotMet GuaranteedFactorNotMet, @BusinessFactorNotMet BusinessFactorNotMet

	SELECT
		CASE WHEN @MatchCount > 0 THEN 1 ELSE 0 END AS Match
		
	SELECT
		CASE WHEN @MatchCount = 0 AND @InsufficientInfoCount > 0 THEN 1 ELSE 0 END AS InsufficientInfo

	SELECT
		CASE WHEN @MatchCount > 0 OR @TotalRuleCount > @GuaranteedFactorNotMet THEN 0 ELSE 1 END AS GuaranteedFactorNotMet

	SELECT
		CASE WHEN @MatchCount = 0 AND @InsufficientInfoCount = 0 AND @BusinessFactorNotMet > 0 THEN 1 ELSE 0 END AS BusinessFactorNotMet

		
END
GO
PRINT N'Creating [dbo].[usp_IdrRule_InsufficientInfo]...';


GO

CREATE PROC [dbo].[usp_IdrRule_InsufficientInfo]
	@UtilityIdInt int,
	@RateClass NVARCHAR(250),
	@LoadProfile NVARCHAR(250),
	@Usage INT,
	@Eligibility BIT,
	@Hia BIT
AS
BEGIN

	SELECT 
		COUNT(DISTINCT IDR.ID)
	FROM
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
	WHERE
		UC.UtilityIdInt = @UtilityIdInt
		AND IDR.ID NOT IN
	(
	SELECT DISTINCT
		IDR.ID
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON IDR.RateClassId = RC.Id
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
			AND UC.UtilityIdInt = @UtilityIdInt
	WHERE
		RC.RateClassCode IS NOT NULL 
		AND @RateClass IS NOT NULL
		AND RC.RateClassCode <> @RateClass
	UNION	
	SELECT DISTINCT
		IDR.ID
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LC
			ON IDR.LoadProfileId = LC.Id
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
			AND UC.UtilityIdInt = @UtilityIdInt
	WHERE
		LC.LoadProfileCode IS NOT NULL 
		AND @LoadProfile IS NOT NULL
		AND LC.LoadProfileCode <> @LoadProfile
	UNION	
	SELECT DISTINCT
		IDR.ID
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
			AND UC.UtilityIdInt = @UtilityIdInt
	WHERE
		IDR.MinUsageMWh IS NOT NULL
		AND @Usage IS NOT NULL
		AND IDR.MinUsageMWh > @Usage
	UNION
	SELECT DISTINCT
		IDR.ID
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
			AND UC.UtilityIdInt = @UtilityIdInt
	WHERE
		IDR.MaxUsageMWh IS NOT NULL
		AND @Usage IS NOT NULL
		AND IDR.MaxUsageMWh < @Usage
	UNION
	SELECT DISTINCT
		IDR.ID
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
			AND UC.UtilityIdInt = @UtilityIdInt
	WHERE
		IDR.IsOnEligibleCustomerList IS NOT NULL
		AND @Eligibility IS NOT NULL
		AND IDR.IsOnEligibleCustomerList <> @Eligibility
	UNION
	SELECT DISTINCT
		IDR.ID
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
			AND UC.UtilityIdInt = @UtilityIdInt
	WHERE
		IDR.IsHistoricalArchiveAvailable IS NOT NULL
		AND @Hia IS NOT NULL
		AND IDR.IsHistoricalArchiveAvailable <> @Hia

	UNION

	SELECT DISTINCT
		IDR.[Id]
	FROM
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON IDR.RateClassId = RC.Id
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
			ON IDR.LoadProfileId = LP.Id
		INNER JOIN dbo.RequestModeIdr (NOLOCK) RMI
			ON UC.Id = RMI.UtilityCompanyId
				AND IDR.RequestModeTypeId = RMI.RequestModeTypeId
		INNER JOIN dbo.RequestModeEnrollmentType (NOLOCK) REMT
			ON RMI.RequestModeEnrollmentTypeId = REMT.Id
		LEFT OUTER JOIN dbo.RequestModeType (NOLOCK) RM
			ON IDR.RequestModeTypeId = RM.Id
	WHERE
		(((@RateClass IS NULL OR RTRIM(LTRIM(@RateClass)) = '') AND RC.RateClassCode IS NULL) OR RC.RateClassCode IS NULL OR RC.RateClassCode = @RateClass)
		AND (((@LoadProfile IS NULL OR RTRIM(LTRIM(@LoadProfile)) = '') AND LP.LoadProfileCode IS NULL) OR LP.LoadProfileCode IS NULL OR LP.LoadProfileCode = @LoadProfile)
		AND UC.UtilityIdInt = @UtilityIdInt
		AND ((@Usage IS NULL AND IDR.MinUsageMWh IS NULL) OR IDR.MinUsageMWh IS NULL OR IDR.MinUsageMWh <= @Usage)
		AND ((IDR.MaxUsageMWh IS NULL AND @Usage IS NULL) OR IDR.MaxUsageMWh IS NULL OR IDR.MaxUsageMWh >= @Usage)
		AND ((@Hia IS NULL AND IDR.IsHistoricalArchiveAvailable IS NULL) OR IDR.IsHistoricalArchiveAvailable = @Hia)
	)
END
GO
PRINT N'Creating [dbo].[usp_IdrRule_Integrated]...';


GO
CREATE PROC [dbo].[usp_IdrRule_Integrated]
	@RateClassCode AS NVARCHAR(255),
	@LoadProfileCode AS NVARCHAR(255),
	@Eligibility AS BIT,
	@Hia AS BIT,
	@UtilityIdInt AS INT,
	@Usage AS INT
AS
BEGIN

	DECLARE @GuaranteedFactorNotMet INT
	DECLARE @TotalRuleCount INT
	DECLARE @BusinessFactorNotMet INT
	DECLARE @MatchCount INT
	DECLARE @InsufficientInfoCount INT

	DECLARE @GuaranteedFactorNotMetTable TABLE
	(
		IdrId NVARCHAR(90)
	)

	DECLARE @TotalRuleCountTable TABLE
	(
		IdrId NVARCHAR(90)
	)

	--SELECT DISTINCT
	--	IDR.Id,
	--	RC.RateClassCode,
	--	LP.LoadProfileCode,
	--	IDR.IsOnEligibleCustomerList,
	--	IDR.IsHistoricalArchiveAvailable,
	--	IDR.MinUsageMWh,
	--	IDR.MaxUsageMWh,
	--	*
	--FROM 
	--	dbo.IdrRule (NOLOCK) IDR
	--	LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
	--		ON IDR.RateClassId = RC.Id
	--	LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
	--		ON IDR.LoadProfileId = LP.Id
	--	inner join dbo.UtilityCompany (NOLOCK) UC
	--		ON IDR.UtilityCompanyId = UC.Id
	--WHERE
	--	UC.UtilityIdInt = @UtilityIdInt	

	SELECT 
		@MatchCount = COUNT(IDR.ID)
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON IDR.RateClassId = RC.Id
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
			ON IDR.LoadProfileId = LP.Id
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
	WHERE
		UC.UtilityIdInt = @UtilityIdInt
		AND
		(
			RC.RateClassCode IS NULL
			OR
			(
				@RateClassCode IS NOT NULL AND RC.RateClassCode IS NOT NULL AND @RateClassCode = RC.RateClassCode
			)
		)
		AND
		(
			LP.LoadProfileCode IS NULL 
			OR
			(
				@LoadProfileCode IS NOT NULL AND LP.LoadProfileCode IS NOT NULL AND @LoadProfileCode = LP.LoadProfileCode
			)
		)
		AND
		(
			IDR.IsOnEligibleCustomerList = 0
			OR 
			(
				IDR.IsOnEligibleCustomerList = 1
				AND
				@Eligibility = 1
			)
		)
		AND
		(
			IDR.IsHistoricalArchiveAvailable = @Hia
		)
		AND 
		(
			(IDR.MaxUsageMWh IS NULL OR (IDR.MaxUsageMWh IS NOT NULL AND @Usage IS NOT NULL AND IDR.MaxUsageMWh >= @Usage))
			AND
			(IDR.MinUsageMWh IS NULL OR (IDR.MinUsageMWh IS NOT NULL AND @Usage IS NOT NULL AND IDR.MinUsageMWh <= @Usage))
		)
		
----------------------------------------------------------------------

	SELECT 
		@InsufficientInfoCount = COUNT(DISTINCT IDR.ID)
	FROM
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
	WHERE
		UC.UtilityIdInt = @UtilityIdInt
		AND IDR.ID NOT IN
	(
	SELECT DISTINCT
		IDR.ID
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON IDR.RateClassId = RC.Id
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
			AND UC.UtilityIdInt = @UtilityIdInt
	WHERE
		RC.RateClassCode IS NOT NULL 
		AND @RateClassCode IS NOT NULL
		AND RC.RateClassCode <> @RateClassCode
	UNION	
	SELECT DISTINCT
		IDR.ID
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LC
			ON IDR.LoadProfileId = LC.Id
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
			AND UC.UtilityIdInt = @UtilityIdInt
	WHERE
		LC.LoadProfileCode IS NOT NULL 
		AND @LoadProfileCode IS NOT NULL
		AND LC.LoadProfileCode <> @LoadProfileCode
	UNION	
	SELECT DISTINCT
		IDR.ID
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
			AND UC.UtilityIdInt = @UtilityIdInt
	WHERE
		IDR.MinUsageMWh IS NOT NULL
		AND @Usage IS NOT NULL
		AND IDR.MinUsageMWh > @Usage
	UNION
	SELECT DISTINCT
		IDR.ID
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
			AND UC.UtilityIdInt = @UtilityIdInt
	WHERE
		IDR.MaxUsageMWh IS NOT NULL
		AND @Usage IS NOT NULL
		AND IDR.MaxUsageMWh < @Usage
	UNION
	SELECT DISTINCT
		IDR.ID
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
			AND UC.UtilityIdInt = @UtilityIdInt
	WHERE
		IDR.IsOnEligibleCustomerList IS NOT NULL
		AND @Eligibility IS NOT NULL
		AND IDR.IsOnEligibleCustomerList <> @Eligibility
		AND IDR.IsOnEligibleCustomerList = 1
	UNION
	SELECT DISTINCT
		IDR.ID
	FROM 
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
			AND UC.UtilityIdInt = @UtilityIdInt
	WHERE
		IDR.IsHistoricalArchiveAvailable IS NOT NULL
		AND @Hia IS NOT NULL
		AND IDR.IsHistoricalArchiveAvailable <> @Hia

	UNION

	SELECT DISTINCT
		IDR.[Id]
	FROM
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON IDR.RateClassId = RC.Id
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
			ON IDR.LoadProfileId = LP.Id
		INNER JOIN dbo.RequestModeIdr (NOLOCK) RMI
			ON UC.Id = RMI.UtilityCompanyId
				AND IDR.RequestModeTypeId = RMI.RequestModeTypeId
		INNER JOIN dbo.RequestModeEnrollmentType (NOLOCK) REMT
			ON RMI.RequestModeEnrollmentTypeId = REMT.Id
		LEFT OUTER JOIN dbo.RequestModeType (NOLOCK) RM
			ON IDR.RequestModeTypeId = RM.Id
	WHERE
		(((@RateClassCode IS NULL OR RTRIM(LTRIM(@RateClassCode)) = '') AND RC.RateClassCode IS NULL) OR RC.RateClassCode IS NULL OR RC.RateClassCode = @RateClassCode)
		AND (((@LoadProfileCode IS NULL OR RTRIM(LTRIM(@LoadProfileCode)) = '') AND LP.LoadProfileCode IS NULL) OR LP.LoadProfileCode IS NULL OR LP.LoadProfileCode = @LoadProfileCode)
		AND UC.UtilityIdInt = @UtilityIdInt
		AND ((@Usage IS NULL AND IDR.MinUsageMWh IS NULL) OR IDR.MinUsageMWh IS NULL OR IDR.MinUsageMWh <= @Usage)
		AND ((IDR.MaxUsageMWh IS NULL AND @Usage IS NULL) OR IDR.MaxUsageMWh IS NULL OR IDR.MaxUsageMWh >= @Usage)
		AND ((@Hia IS NULL AND IDR.IsHistoricalArchiveAvailable IS NULL) OR IDR.IsHistoricalArchiveAvailable = @Hia)
	)

----------------------------------------------------------------------		
		
		
		
		INSERT INTO @GuaranteedFactorNotMetTable
		SELECT 
			IDR.Id
		FROM
			dbo.IdrRule (NOLOCK) IDR
			INNER JOIN dbo.UtilityCompany (NOLOCK) UC
				ON IDR.UtilityCompanyId = UC.Id
			LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
				ON IDR.RateClassId = RC.Id
			LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
				ON IDR.LoadProfileId = LP.Id
		WHERE
			UC.UtilityIdInt = @UtilityIdInt
			AND
			(
				(RC.RateClassCode IS NOT NULL AND @RateClassCode IS NOT NULL AND RC.RateClassCode <> @RateClassCode)
				OR
				(LP.LoadProfileCode IS NOT NULL AND @LoadProfileCode IS NOT NULL AND LP.LoadProfileCode <> @LoadProfileCode)
				OR
				(IDR.IsOnEligibleCustomerList = 1 AND @Eligibility = 0)
				OR
				(IDR.IsHistoricalArchiveAvailable <> @Hia)
			)
	
	INSERT INTO @TotalRuleCountTable
	SELECT 
		IDR.Id
	FROM
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON IDR.RateClassId = RC.Id
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
			ON IDR.LoadProfileId = LP.Id
	WHERE
		UC.UtilityIdInt = @UtilityIdInt

	--SELECT 
	--	@GuaranteedFactorNotMet = COUNT(IdrId)
	--FROM
	--	@GuaranteedFactorNotMetTable
	SELECT 
		@GuaranteedFactorNotMet = COUNT(IDR.Id)
	FROM
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON IDR.RateClassId = RC.Id
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
			ON IDR.LoadProfileId = LP.Id
	WHERE
		UC.UtilityIdInt = @UtilityIdInt
		AND
		(
			(RC.RateClassCode IS NOT NULL AND @RateClassCode IS NOT NULL AND RC.RateClassCode <> @RateClassCode)
			OR
			(LP.LoadProfileCode IS NOT NULL AND @LoadProfileCode IS NOT NULL AND LP.LoadProfileCode <> @LoadProfileCode)
			OR
			(IDR.IsOnEligibleCustomerList = 1 AND @Eligibility = 0)
			OR
			(IDR.IsHistoricalArchiveAvailable <> @Hia)
		)

	--SELECT 
	--	@TotalRuleCount = COUNT(IdrId)
	--FROM
	--	@TotalRuleCountTable
	SELECT 
		@TotalRuleCount = COUNT(IDR.Id)
	FROM
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON IDR.RateClassId = RC.Id
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
			ON IDR.LoadProfileId = LP.Id
	WHERE
		UC.UtilityIdInt = @UtilityIdInt

	SELECT
		@BusinessFactorNotMet = COUNT(IDR.Id)
	FROM
		dbo.IdrRule (NOLOCK) IDR
	WHERE
		IDR.Id IN
		(
			SELECT
				IdrId
			FROM
				@TotalRuleCountTable TRCT
			WHERE
				TRCT.IdrId NOT IN (SELECT IdrId FROM @GuaranteedFactorNotMetTable)
		)
		AND 
		(
			(
				@Usage IS NULL AND (IDR.MinUsageMWh IS NOT NULL AND IDR.MaxUsageMWh IS NOT NULL)
			)
			OR
			(
				@Usage IS NOT NULL AND 
				(
					(
						IDR.MinUsageMWh IS NOT NULL 
						AND @Usage < IDR.MinUsageMWh
					)
					OR
					(
						IDR.MaxUsageMWh IS NOT NULL 
						AND @Usage > IDR.MaxUsageMWh
					)
				)
			)
		)

	--SELECT @RateClassCode RateClassCode, @LoadProfileCode LoadProfileCode, @Eligibility Eligibility, @Hia Hia, @UtilityIdInt UtilityIdInt, @Usage Usage

	--SELECT @MatchCount MatchCount, @InsufficientInfoCount InsufficientInfoCount, @TotalRuleCount TotalRuleCount, @GuaranteedFactorNotMet GuaranteedFactorNotMet, @BusinessFactorNotMet BusinessFactorNotMet

	--SELECT
	--	CASE WHEN @MatchCount > 0 THEN 1 ELSE 0 END AS Match
		
	--SELECT
	--	CASE WHEN @MatchCount = 0 AND @InsufficientInfoCount > 0 THEN 1 ELSE 0 END AS InsufficientInfo

	--SELECT
	--	CASE WHEN @MatchCount > 0 OR @TotalRuleCount > @GuaranteedFactorNotMet THEN 0 ELSE 1 END AS GuaranteedFactorNotMet

	--SELECT
	--	CASE WHEN @MatchCount = 0 AND @InsufficientInfoCount = 0 AND @BusinessFactorNotMet > 0 THEN 1 ELSE 0 END AS BusinessFactorNotMet

	SELECT
		CASE WHEN @MatchCount > 0 THEN 1 ELSE 0 END AS Match,
		CASE WHEN @MatchCount = 0 AND @InsufficientInfoCount > 0 THEN 1 ELSE 0 END AS InsufficientInfo,
		CASE WHEN @MatchCount > 0 OR @TotalRuleCount > @GuaranteedFactorNotMet THEN 0 ELSE 1 END AS GuaranteedFactorNotMet,
		CASE WHEN @MatchCount = 0 AND @InsufficientInfoCount = 0 AND @BusinessFactorNotMet > 0 THEN 1 ELSE 0 END AS BusinessFactorNotMet
		
END
GO
PRINT N'Creating [dbo].[usp_IdrRule_Match]...';


GO
CREATE PROC usp_IdrRule_Match
	@UtilityIdInt int,
	@RateClassValue NVARCHAR(255),
	@LoadProfileValue NVARCHAR(255),
	@Hia BIT,
	@IsEligibleFromUsage BIT,
	@Usage int
AS
BEGIN

--DECLARE @RateClassValue NVARCHAR(255)
--DECLARE @LoadProfileValue NVARCHAR(255)
--DECLARE @Hia BIT
--DECLARE @IsEligibleFromUsage BIT
--DECLARE @Usage int

--SET @RateClassValue = 'Aaa 111'
--SET @LoadProfileValue = 'r'
--SET @Hia = 0
--SET @IsEligibleFromUsage = 1
--SET @Usage = 1234

	
SELECT 
	CASE WHEN COUNT(IDR.Id) > 0 THEN 1 ELSE 0 END AS Match
FROM 
	dbo.IdrRule (NOLOCK) IDR
	LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
		ON IDR.RateClassId = RC.Id
	LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
		ON IDR.LoadProfileId = LP.Id
	INNER JOIN dbo.UtilityCompany (NOLOCK) UC
		ON IDR.UtilityCompanyId = UC.Id
WHERE
	UC.UtilityIdInt = @UtilityIdInt
	AND
	(
		RC.RateClassCode IS NULL
		OR
		(
			@RateClassValue IS NOT NULL AND RC.RateClassCode IS NOT NULL AND @RateClassValue = RC.RateClassCode
		)
	)
	AND
	(
		LP.LoadProfileCode IS NULL 
		OR
		(
			@LoadProfileValue IS NOT NULL AND LP.LoadProfileCode IS NOT NULL AND @LoadProfileValue = LP.LoadProfileCode
		)
	)
	AND
	(
		IDR.IsOnEligibleCustomerList = 0
		OR 
		(
			IDR.IsOnEligibleCustomerList = 1
			AND
			@IsEligibleFromUsage = 1
		)
	)
	AND
	(
		IDR.IsHistoricalArchiveAvailable = @Hia
	)
	AND 
	(
		(IDR.MaxUsageMWh IS NULL OR (IDR.MaxUsageMWh IS NOT NULL AND @Usage IS NOT NULL AND IDR.MaxUsageMWh >= @Usage))
		AND
		(IDR.MinUsageMWh IS NULL OR (IDR.MinUsageMWh IS NOT NULL AND @Usage IS NOT NULL AND IDR.MinUsageMWh <= @Usage))
	)

END
GO
PRINT N'Creating [dbo].[usp_IdrRuleAndRequestMode_Select]...';


GO

CREATE PROC [dbo].[usp_IdrRuleAndRequestMode_Select]
	@RateClassCode AS NVARCHAR(250),
	@LoadProfileCode AS NVARCHAR(250),
	@UtilityIdInt INT,
	@AnnualUsage INT
AS
BEGIN

	SELECT 
		IDR.[Id],
		IDR.[RateClassId] AS RateClassIdGuid,
		IDR.[LoadProfileId] AS LoadProfileIdGuid,
		IDR.[MinUsageMWh],
		IDR.[MaxUsageMWh],
		IDR.[IsOnEligibleCustomerList],
		IDR.[IsHistoricalArchiveAvailable],
		IDR.[Inactive],
		IDR.[CreatedBy],
		IDR.[CreatedDate],
		IDR.[LastModifiedBy],
		IDR.[LastModifiedDate],
		UC.Id AS UtilityCompanyId,
		UC.UtilityCode,
		UC.UtilityIdInt,
		LP.LoadProfileId,
		LP.LoadProfileCode,
		RC.RateClassCode,
		RC.RateClassId,
		RMI.Id AS RequestModeIdrId,
		RMI.RequestModeTypeId,
		RMI.RequestModeEnrollmentTypeId,
		RMI.AddressForPreEnrollment,
		RMI.EmailTemplate,
		RMI.Instructions,
		RMI.UtilitysSlaIdrResponseInDays,
		RMI.LibertyPowersSlaFollowUpIdrResponseInDays,
		RMI.IsLoaRequired,
		RMI.RequestCostAccount,
		RM.Name AS RequestModeTypeName
	FROM
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON IDR.RateClassId = RC.Id
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
			ON IDR.LoadProfileId = LP.Id
		INNER JOIN dbo.RequestModeIdr (NOLOCK) RMI
			ON UC.Id = RMI.UtilityCompanyId
				AND IDR.RequestModeTypeId = RMI.RequestModeTypeId
		LEFT OUTER JOIN dbo.RequestModeType (NOLOCK) RM
			ON IDR.RequestModeTypeId = RM.Id
	WHERE
		(@RateClassCode IS NULL OR RTRIM(LTRIM(@RateClassCode)) = '' OR RC.RateClassCode = @RateClassCode)
		AND (@LoadProfileCode IS NULL OR RTRIM(LTRIM(@LoadProfileCode)) = '' OR LP.LoadProfileCode = @LoadProfileCode)
		AND UC.UtilityIdInt = @UtilityIdInt
		AND (IDR.MinUsageMWh IS NULL OR @AnnualUsage IS NULL OR IDR.MinUsageMWh <= @AnnualUsage)
		AND (IDR.MaxUsageMWh IS NULL OR @AnnualUsage IS NULL OR IDR.MaxUsageMWh >= @AnnualUsage)
		
END
GO
PRINT N'Creating [dbo].[usp_IdrRuleAndRequestMode_SelectByParam]...';


GO
CREATE PROC [dbo].[usp_IdrRuleAndRequestMode_SelectByParam]
	@RateClassCode AS NVARCHAR(250),
	@LoadProfileCode AS NVARCHAR(250),
	@UtilityIdInt INT,
	@AnnualUsage INT,
	@EnrollmentType INT,
	@Hia BIT
AS
BEGIN

	SELECT 
		IDR.[Id],
		LP.LoadProfileCode,
		RC.RateClassCode,
		IDR.[MinUsageMWh],
		IDR.[MaxUsageMWh],
		IDR.[RateClassId] AS RateClassIdGuid,
		IDR.[LoadProfileId] AS LoadProfileIdGuid,
		IDR.[IsOnEligibleCustomerList],
		IDR.[IsHistoricalArchiveAvailable],
		IDR.[Inactive],
		IDR.[CreatedBy],
		IDR.[CreatedDate],
		IDR.[LastModifiedBy],
		IDR.[LastModifiedDate],
		UC.Id AS UtilityCompanyId,
		UC.UtilityCode,
		UC.UtilityIdInt,
		LP.LoadProfileId,
		RC.RateClassId,
		RMI.Id AS RequestModeIdrId,
		RMI.RequestModeTypeId,
		RMI.RequestModeEnrollmentTypeId,
		RMI.AddressForPreEnrollment,
		RMI.EmailTemplate,
		RMI.Instructions,
		RMI.UtilitysSlaIdrResponseInDays,
		RMI.LibertyPowersSlaFollowUpIdrResponseInDays,
		RMI.IsLoaRequired,
		RMI.RequestCostAccount,
		RM.Name AS RequestModeTypeName
	FROM
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON IDR.RateClassId = RC.Id
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
			ON IDR.LoadProfileId = LP.Id
		INNER JOIN dbo.RequestModeIdr (NOLOCK) RMI
			ON UC.Id = RMI.UtilityCompanyId
		INNER JOIN dbo.RequestModeEnrollmentType (NOLOCK) REMT
			ON RMI.RequestModeEnrollmentTypeId = REMT.Id
		LEFT OUTER JOIN dbo.RequestModeType (NOLOCK) RM
			ON IDR.RequestModeTypeId = RM.Id
	WHERE
		(((@RateClassCode IS NULL OR RTRIM(LTRIM(@RateClassCode)) = '') AND RC.RateClassCode IS NULL) OR RC.RateClassCode IS NULL OR RC.RateClassCode = @RateClassCode)
		AND (((@LoadProfileCode IS NULL OR RTRIM(LTRIM(@LoadProfileCode)) = '') AND LP.LoadProfileCode IS NULL) OR LP.LoadProfileCode IS NULL OR LP.LoadProfileCode = @LoadProfileCode)
		AND UC.UtilityIdInt = @UtilityIdInt
		AND ((@AnnualUsage IS NULL AND IDR.MinUsageMWh IS NULL) OR IDR.MinUsageMWh IS NULL OR IDR.MinUsageMWh <= @AnnualUsage)
		AND ((IDR.MaxUsageMWh IS NULL AND @AnnualUsage IS NULL) OR IDR.MaxUsageMWh IS NULL OR IDR.MaxUsageMWh >= @AnnualUsage)
		AND (@EnrollmentType IS NOT NULL AND REMT.EnumValue = @EnrollmentType)
		AND ((@Hia IS NULL AND IDR.IsHistoricalArchiveAvailable IS NULL) OR IDR.IsHistoricalArchiveAvailable = @Hia)


END
GO
PRINT N'Creating [dbo].[usp_IdrRuleAndRequestMode_SelectByParams]...';


GO

CREATE PROC [dbo].[usp_IdrRuleAndRequestMode_SelectByParams]
	@RateClassCode AS NVARCHAR(250),
	@LoadProfileCode AS NVARCHAR(250),
	@UtilityIdInt INT,
	@AnnualUsage INT,
	@EnrollmentType NVARCHAR(250),
	@Hia BIT
AS
BEGIN

	SELECT 
		IDR.[Id],
		IDR.[RateClassId] AS RateClassIdGuid,
		IDR.[LoadProfileId] AS LoadProfileIdGuid,
		IDR.[MinUsageMWh],
		IDR.[MaxUsageMWh],
		IDR.[IsOnEligibleCustomerList],
		IDR.[IsHistoricalArchiveAvailable],
		IDR.[Inactive],
		IDR.[CreatedBy],
		IDR.[CreatedDate],
		IDR.[LastModifiedBy],
		IDR.[LastModifiedDate],
		UC.Id AS UtilityCompanyId,
		UC.UtilityCode,
		UC.UtilityIdInt,
		LP.LoadProfileId,
		LP.LoadProfileCode,
		RC.RateClassCode,
		RC.RateClassId,
		RMI.Id AS RequestModeIdrId,
		RMI.RequestModeTypeId,
		RMI.RequestModeEnrollmentTypeId,
		RMI.AddressForPreEnrollment,
		RMI.EmailTemplate,
		RMI.Instructions,
		RMI.UtilitysSlaIdrResponseInDays,
		RMI.LibertyPowersSlaFollowUpIdrResponseInDays,
		RMI.IsLoaRequired,
		RMI.RequestCostAccount,
		RM.Name AS RequestModeTypeName
	FROM
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON IDR.RateClassId = RC.Id
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
			ON IDR.LoadProfileId = LP.Id
		INNER JOIN dbo.RequestModeIdr (NOLOCK) RMI
			ON UC.Id = RMI.UtilityCompanyId
				AND IDR.RequestModeTypeId = RMI.RequestModeTypeId
		INNER JOIN dbo.RequestModeEnrollmentType (NOLOCK) REMT
			ON RMI.RequestModeEnrollmentTypeId = REMT.Id
		LEFT OUTER JOIN dbo.RequestModeType (NOLOCK) RM
			ON IDR.RequestModeTypeId = RM.Id
	WHERE
		(((@RateClassCode IS NULL OR RTRIM(LTRIM(@RateClassCode)) = '') AND RC.RateClassCode IS NULL) OR RC.RateClassCode IS NULL OR RC.RateClassCode = @RateClassCode)
		AND (((@LoadProfileCode IS NULL OR RTRIM(LTRIM(@LoadProfileCode)) = '') AND LP.LoadProfileCode IS NULL) OR LP.LoadProfileCode IS NULL OR LP.LoadProfileCode = @LoadProfileCode)
		AND UC.UtilityIdInt = @UtilityIdInt
		AND ((@AnnualUsage IS NULL AND IDR.MinUsageMWh IS NULL) OR IDR.MinUsageMWh IS NULL OR IDR.MinUsageMWh <= @AnnualUsage)
		AND ((IDR.MaxUsageMWh IS NULL AND @AnnualUsage IS NULL) OR IDR.MaxUsageMWh IS NULL OR IDR.MaxUsageMWh >= @AnnualUsage)
		AND (@EnrollmentType IS NOT NULL AND REMT.Name = @EnrollmentType)
		AND ((@Hia IS NULL AND IDR.IsHistoricalArchiveAvailable IS NULL) OR IDR.IsHistoricalArchiveAvailable = @Hia)


END
GO
PRINT N'Creating [dbo].[usp_IdrRuleAndRequestMode_Selection]...';


GO

CREATE PROC [dbo].[usp_IdrRuleAndRequestMode_Selection]
	@RateClassCode AS NVARCHAR(250),
	@LoadProfileCode AS NVARCHAR(250),
	@UtilityIdInt INT,
	@AnnualUsage INT
AS
BEGIN

	SELECT 
		IDR.[Id],
		IDR.[RateClassId] AS RateClassIdGuid,
		IDR.[LoadProfileId] AS LoadProfileIdGuid,
		IDR.[MinUsageMWh],
		IDR.[MaxUsageMWh],
		IDR.[IsOnEligibleCustomerList],
		IDR.[IsHistoricalArchiveAvailable],
		IDR.[Inactive],
		IDR.[CreatedBy],
		IDR.[CreatedDate],
		IDR.[LastModifiedBy],
		IDR.[LastModifiedDate],
		UC.Id AS UtilityCompanyId,
		UC.UtilityCode,
		UC.UtilityIdInt,
		LP.LoadProfileId,
		LP.LoadProfileCode,
		RC.RateClassCode,
		RC.RateClassId,
		RMI.Id AS RequestModeIdrId,
		RMI.RequestModeTypeId,
		RMI.RequestModeEnrollmentTypeId,
		RMI.AddressForPreEnrollment,
		RMI.EmailTemplate,
		RMI.Instructions,
		RMI.UtilitysSlaIdrResponseInDays,
		RMI.LibertyPowersSlaFollowUpIdrResponseInDays,
		RMI.IsLoaRequired,
		RMI.RequestCostAccount,
		RM.Name AS RequestModeTypeName
	FROM
		dbo.IdrRule (NOLOCK) IDR
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON IDR.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON IDR.RateClassId = RC.Id
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
			ON IDR.LoadProfileId = LP.Id
		INNER JOIN dbo.RequestModeIdr (NOLOCK) RMI
			ON UC.Id = RMI.UtilityCompanyId
				AND IDR.RequestModeTypeId = RMI.RequestModeTypeId
		LEFT OUTER JOIN dbo.RequestModeType (NOLOCK) RM
			ON IDR.RequestModeTypeId = RM.Id
	WHERE
		(@RateClassCode IS NULL OR RTRIM(LTRIM(@RateClassCode)) = '' OR RC.RateClassCode = @RateClassCode)
		AND (@LoadProfileCode IS NULL OR RTRIM(LTRIM(@LoadProfileCode)) = '' OR LP.LoadProfileCode = @LoadProfileCode)
		AND UC.UtilityIdInt = @UtilityIdInt
		AND (IDR.MinUsageMWh IS NULL OR @AnnualUsage IS NULL OR IDR.MinUsageMWh <= @AnnualUsage)
		AND (IDR.MaxUsageMWh IS NULL OR @AnnualUsage IS NULL OR IDR.MaxUsageMWh >= @AnnualUsage)
		
END
GO
PRINT N'Creating [dbo].[usp_LoadProfile_SELECT_By_UtilityCompanyId]...';


GO

CREATE PROC [dbo].[usp_LoadProfile_SELECT_By_UtilityCompanyId]
	@UtilityCompanyId NVARCHAR(50)
AS
BEGIN


	SELECT
		[RC].[Id],
		[RC].[LoadProfileCode] AS [Name]
	FROM
		dbo.LoadProfile (NOLOCK) RC
	WHERE
		CONVERT(NVARCHAR(50),RC.UtilityCompanyId) = @UtilityCompanyId


END
GO
PRINT N'Creating [dbo].[usp_MeterReadSchedule_GetNext]...';


GO

CREATE PROC usp_MeterReadSchedule_GetNext
	@UtilityIdInt INT,
	@TripNumber NVARCHAR(255),
	@ReferenceDate DATETIME,
	@ServiceAccountNumber NVARCHAR(255)
AS
BEGIN

	SELECT
		MRS.Id,
		MRS.ReadDate,
		UC.UtilityIdInt,
		Y.Year,
		M.Month,
		UT.TripNumber
	FROM
		dbo.[MeterReadSchedule] (NOLOCK) MRS
		INNER JOIN dbo.[UtilityCompany] (NOLOCK) UC
			ON MRS.UtilityCompanyId = UC.Id
		INNER JOIN dbo.[Year] (NOLOCK) Y
			ON MRS.YearId = Y.Id
		INNER JOIN dbo.[Month] (NOLOCK) M
			ON MRS.MonthId = M.Id
		INNER JOIN dbo.[UtilityTrip] (NOLOCK) UT
			ON MRS.UtilityTripId = UT.Id
	WHERE
		UC.UtilityIdInt = @UtilityIdInt
		AND UT.TripNumber = @TripNumber
		AND ReadDate = 
			(SELECT 
				MIN(ReadDate) 
			FROM 
				dbo.MeterReadSchedule (NOLOCK) M
				INNER JOIN dbo.UtilityCompany (NOLOCK) U
					ON M.UtilityCompanyId = U.Id
				INNER JOIN dbo.[UtilityTrip] (NOLOCK) T
					ON M.UtilityTripId = T.Id
			WHERE
				U.UtilityIdInt = @UtilityIdInt
				AND CONVERT(DATETIME, M.ReadDate, 101)  > @ReferenceDate
				AND T.TripNumber = @TripNumber)

END
GO
PRINT N'Creating [dbo].[usp_MeterType_GetCountOfUtilityCompanyIdAndMeterTypeCode]...';


GO
CREATE PROC usp_MeterType_GetCountOfUtilityCompanyIdAndMeterTypeCode
	@UtilityCompanyId AS NVARCHAR(50),
	@MeterTypeCode AS NVARCHAR(255)
AS
BEGIN

	SELECT 
		COUNT(Id)
	FROM
		dbo.MeterType (NOLOCK) 
	WHERE
		UtilityCompanyId = @UtilityCompanyId
		AND MeterTypeCode = RTRIM(LTRIM(@MeterTypeCode))

END
GO
PRINT N'Creating [dbo].[usp_MeterType_SELECT_By_UtilityCompanyId]...';


GO

CREATE PROC [dbo].[usp_MeterType_SELECT_By_UtilityCompanyId]
	@UtilityCompanyId NVARCHAR(50)
AS
BEGIN


	SELECT
		[RC].[Id],
		[RC].[MeterTypeCode] AS [Name]
	FROM
		dbo.MeterType (NOLOCK) RC
	WHERE
		CONVERT(NVARCHAR(50),RC.UtilityCompanyId) = @UtilityCompanyId


END
GO
PRINT N'Creating [dbo].[usp_PurchaseOfReceivables_SELECT_ByUtilityAndPorDriver]...';


GO
CREATE PROC [dbo].[usp_PurchaseOfReceivables_SELECT_ByUtilityAndPorDriver]
	@UtilityIdInt AS INT,
	@EffectiveDate AS DATETIME,
	@PorDriverId AS UNIQUEIDENTIFIER,
	@PorDriver AS NVARCHAR(50)
AS
BEGIN
	SELECT
		POR.[Id],
		POR.[UtilityCompanyId],
		UC.UtilityCode,
		POR.[PorDriverId],
		PD.Name AS PorDriverName,
		RC.RateClassCode,
		RC.RateClassId,
		LP.LoadProfileCode,
		LP.LoadProfileId,
		TC.TariffCodeCode,
		TC.TariffCodeId,
		POR.[IsPorOffered],
		POR.[IsPorParticipated],
		POR.[PorRecourseId],
		PR.[Name] AS PorRecourseName,
		POR.[IsPorAssurance],
		POR.[PorDiscountRate],
		POR.[PorFlatFee],
		POR.[PorDiscountEffectiveDate],
		POR.[PorDiscountExpirationDate],
		POR.[Inactive],
		POR.[CreatedBy],
		POR.[CreatedDate],
		POR.[LastModifiedBy],
		POR.[LastModifiedDate]
	FROM
		dbo.PurchaseOfReceivables (NOLOCK) POR
		INNER JOIN dbo.PorDriver (NOLOCK) PD
			ON POR.PorDriverId = PD.Id
		INNER JOIN dbo.porRecourse (NOLOCK) PR
			ON POR.PorRecourseId = PR.Id
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON POR.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON POR.RateClassId = RC.Id
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
			ON POR.LoadProfileId = LP.Id
		LEFT OUTER JOIN dbo.TariffCode (NOLOCK) TC
			ON POR.TariffCodeId = TC.Id
	WHERE
		POR.PorDiscountEffectiveDate IS NOT NULL 
		AND POR.PorDiscountEffectiveDate <= @EffectiveDate
		AND UC.UtilityIdInt = @UtilityIdInt
		AND
		(
			(
				RTRIM(LTRIM(PD.Name)) = 'Load Profile' 
				AND POR.LoadProfileId = @PorDriverId
				AND @PorDriver = 'Load Profile'
			)
			OR	
			(
				RTRIM(LTRIM(PD.Name)) = 'Tariff Code' 
				AND POR.TariffCodeId = @PorDriverId
				AND @PorDriver = 'Tariff Code' 
			)
			OR	
			(
				RTRIM(LTRIM(PD.Name)) = 'Rate Class' 
				AND POR.RateClassId = @PorDriverId
				AND @PorDriver = 'Rate Class' 
			)
		)
	
END
GO
PRINT N'Creating [dbo].[usp_PurchaseOfReceivables_SELECT_ByUtilityLoadProfileRateClassTariffCodeEffectiveDate]...';


GO
CREATE PROC [dbo].[usp_PurchaseOfReceivables_SELECT_ByUtilityLoadProfileRateClassTariffCodeEffectiveDate]
	@UtilityIdInt AS INT,
	@EffectiveDate AS DATETIME,
	@LoadProfile AS NVARCHAR(255),
	@RateClass AS NVARCHAR(255),
	@TariffCode AS NVARCHAR(255)
AS
BEGIN
	SELECT
		POR.[Id],
		POR.[UtilityCompanyId],
		UC.UtilityCode,
		POR.[PorDriverId],
		PD.Name AS PorDriverName,
		RC.RateClassCode,
		RC.RateClassId,
		LP.LoadProfileCode,
		LP.LoadProfileId,
		TC.TariffCodeCode,
		TC.TariffCodeId,
		POR.[IsPorOffered],
		POR.[IsPorParticipated],
		POR.[PorRecourseId],
		PR.[Name] AS PorRecourseName,
		POR.[IsPorAssurance],
		POR.[PorDiscountRate],
		POR.[PorFlatFee],
		POR.[PorDiscountEffectiveDate],
		POR.[PorDiscountExpirationDate],
		POR.[Inactive],
		POR.[CreatedBy],
		POR.[CreatedDate],
		POR.[LastModifiedBy],
		POR.[LastModifiedDate]
	FROM
		dbo.PurchaseOfReceivables (NOLOCK) POR
		INNER JOIN dbo.PorDriver (NOLOCK) PD
			ON POR.PorDriverId = PD.Id
		INNER JOIN dbo.porRecourse (NOLOCK) PR
			ON POR.PorRecourseId = PR.Id
		INNER JOIN dbo.UtilityCompany (NOLOCK) UC
			ON POR.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.RateClass (NOLOCK) RC
			ON POR.RateClassId = RC.Id
		LEFT OUTER JOIN dbo.LoadProfile (NOLOCK) LP
			ON POR.LoadProfileId = LP.Id
		LEFT OUTER JOIN dbo.TariffCode (NOLOCK) TC
			ON POR.TariffCodeId = TC.Id
	WHERE
		POR.PorDiscountEffectiveDate IS NOT NULL 
		AND POR.PorDiscountEffectiveDate <= @EffectiveDate
		AND (POR.PorDiscountExpirationDate IS NULL OR POR.PorDiscountExpirationDate > @EffectiveDate)
		AND UC.UtilityIdInt = @UtilityIdInt
		AND
		(
			(
				RTRIM(LTRIM(PD.EnumValue)) = 0
				AND LP.LoadProfileCode = @LoadProfile
				AND @LoadProfile IS NOT NULL
				AND LP.LoadProfileCode IS NOT NULL
			)
			OR	
			(
				RTRIM(LTRIM(PD.EnumValue)) = 1
				AND TC.TariffCodeCode = @TariffCode
				AND @TariffCode IS NOT NULL
				AND TC.TariffCodeCode IS NOT NULL
			)
			OR	
			(
				RTRIM(LTRIM(PD.EnumValue)) = 2
				AND RC.RateClassCode = @RateClass
				AND @RateClass IS NOT NULL
				AND RC.RateClassCode IS NOT NULL
			)
		)
	
END
GO
PRINT N'Creating [dbo].[usp_RateClass_SELECT_By_UtilityCompanyId]...';


GO
CREATE PROC [dbo].[usp_RateClass_SELECT_By_UtilityCompanyId]
	@UtilityCompanyId NVARCHAR(50)
AS
BEGIN


	SELECT
		[RC].[Id],
		[RC].[RateClassCode] AS [Name]
	FROM
		dbo.RateClass (NOLOCK) RC
	WHERE
		CONVERT(NVARCHAR(50),RC.UtilityCompanyId) = @UtilityCompanyId


END
GO
PRINT N'Creating [dbo].[usp_RequestModeEnrollmentType_SELECT_NameById]...';


GO

CREATE PROC [dbo].[usp_RequestModeEnrollmentType_SELECT_NameById]
@Id NVARCHAR(50)
AS
BEGIN
	SELECT
		[Name]
	FROM
		dbo.RequestModeEnrollmentType (NOLOCK) RMET
	WHERE
		CONVERT(NVARCHAR(50),RMET.Id) = @Id
END
GO
PRINT N'Creating [dbo].[usp_RequestModeHistoricalUsage_VALIDATE_RequestModeIcapRequestModeType]...';


GO

CREATE PROC [dbo].[usp_RequestModeHistoricalUsage_VALIDATE_RequestModeIcapRequestModeType]
	@UtilityCompanyId AS NVARCHAR(50),
	@RequestModeTypeId AS NVARCHAR(50)
AS
BEGIN

	SELECT
		COUNT(RMHU.ID) AS MatchCount
	FROM
		dbo.RequestModeHistoricalUsage (NOLOCK) RMHU
		INNER JOIN dbo.RequestModeEnrollmentType (NOLOCK) RMET
			ON RMHU.RequestModeEnrollmentTypeId = RMET.Id
		INNER JOIN  dbo.UtilityCompany (NOLOCK) UC
			ON RMHU.UtilityCompanyId = UC.Id
	WHERE
		RMET.Id = '390712C2-AAF9-4B96-96B8-CD12FA33EEF1'
		AND RMHU.RequestModeTypeId <> @RequestModeTypeId
		AND RMHU.UtilityCompanyId = @UtilityCompanyId

END
GO
PRINT N'Creating [dbo].[usp_RequestModeHistoricalUsage_VALIDATE_RequestModeIcapRequestModeType_EDIT]...';


GO


CREATE PROC [dbo].[usp_RequestModeHistoricalUsage_VALIDATE_RequestModeIcapRequestModeType_EDIT]
	@RequestModeIcapId AS NVARCHAR(50),
	@RequestModeTypeId AS NVARCHAR(50)
AS
BEGIN

	DECLARE @UtilityCompanyId NVARCHAR(50)
	SELECT
		@UtilityCompanyId = UtilityCompanyId
	FROM
		dbo.RequestModeIcap (NOLOCK) RMI
	WHERE
		RMI.Id = @RequestModeIcapId

	SELECT
		COUNT(RMHU.ID) AS MatchCount
	FROM
		dbo.RequestModeHistoricalUsage (NOLOCK) RMHU
		INNER JOIN dbo.RequestModeEnrollmentType (NOLOCK) RMET
			ON RMHU.RequestModeEnrollmentTypeId = RMET.Id
		INNER JOIN  dbo.UtilityCompany (NOLOCK) UC
			ON RMHU.UtilityCompanyId = UC.Id
	WHERE
		RMET.Id = '390712C2-AAF9-4B96-96B8-CD12FA33EEF1'
		AND RMHU.RequestModeTypeId <> @RequestModeTypeId
		AND RMHU.RequestModeTypeId IS NOT NULL
		AND RMHU.UtilityCompanyId = @UtilityCompanyId
END
GO
PRINT N'Creating [dbo].[usp_RequestModeIcap_VALIDATE_RequestModeHistoricalUsageRequestModeType]...';


GO


CREATE PROC [dbo].[usp_RequestModeIcap_VALIDATE_RequestModeHistoricalUsageRequestModeType]
	@UtilityCompanyId AS NVARCHAR(50),
	@RequestModeTypeId AS NVARCHAR(50)
AS
BEGIN

	SELECT
		COUNT(RMI.ID) AS MatchCount
	FROM
		dbo.RequestModeIcap (NOLOCK) RMI
		INNER JOIN dbo.RequestModeEnrollmentType (NOLOCK) RMET
			ON RMI.RequestModeEnrollmentTypeId = RMET.Id
		INNER JOIN  dbo.UtilityCompany (NOLOCK) UC
			ON RMI.UtilityCompanyId = UC.Id
	WHERE
		RMET.Id = '390712C2-AAF9-4B96-96B8-CD12FA33EEF1'
		AND RMI.RequestModeTypeId <> @RequestModeTypeId
		AND RMI.UtilityCompanyId = @UtilityCompanyId
END
GO
PRINT N'Creating [dbo].[usp_RequestModeIcap_VALIDATE_RequestModeHistoricalUsageRequestModeType_EDIT]...';


GO

CREATE PROC [dbo].[usp_RequestModeIcap_VALIDATE_RequestModeHistoricalUsageRequestModeType_EDIT]
	@RequestModeHistoricalUsageId AS NVARCHAR(50),
	@RequestModeTypeId AS NVARCHAR(50)
AS
BEGIN

	DECLARE @UtilityCompanyId NVARCHAR(50)
	
	SELECT
		@UtilityCompanyId = UtilityCompanyId
	FROM
		dbo.RequestModeHistoricalUsage (NOLOCK) RMHU
	WHERE
		RMHU.Id = @RequestModeHistoricalUsageId

	SELECT
		COUNT(RMI.ID) AS MatchCount
	FROM
		dbo.RequestModeIcap (NOLOCK) RMI
		INNER JOIN dbo.RequestModeEnrollmentType (NOLOCK) RMET
			ON RMI.RequestModeEnrollmentTypeId = RMET.Id
		INNER JOIN  dbo.UtilityCompany (NOLOCK) UC
			ON RMI.UtilityCompanyId = UC.Id
	WHERE
		RMET.Id = '390712C2-AAF9-4B96-96B8-CD12FA33EEF1'
		AND RMI.RequestModeTypeId <> @RequestModeTypeId
		AND RMI.UtilityCompanyId = @UtilityCompanyId

END
GO
PRINT N'Creating [dbo].[usp_RequestModeType_SELECT_DropDownValues_ByRequestModeEnrollmentTypeIdAndRequestModeTypeGenreName]...';


GO
CREATE PROC [dbo].[usp_RequestModeType_SELECT_DropDownValues_ByRequestModeEnrollmentTypeIdAndRequestModeTypeGenreName]
	@RequestModeEnrollmentTypeId NVARCHAR(50),
	@RequestModeTypeGenreName NVARCHAR(50)
AS
BEGIN
	SELECT 
		RMT.Id,
		RMT.Name--,
		--rmet.Id,
		--rmet.Name,
		--rmtg.id,
		--rmtg.name,
		--* 
	FROM 
		dbo.RequestModeType (NOLOCK) RMT
		INNER JOIN dbo.RequestModeTypeToRequestModeEnrollmentType (NOLOCK) RMT2RMET
			ON RMT.Id = RMT2RMET.RequestModeTypeId
		INNER JOIN RequestModeEnrollmentType (NOLOCK) RMET
			ON RMT2RMET.RequestModeEnrollmentTypeId = RMET.Id
		--INNER JOIN RequestModeTypeToRequestModeTypeGenre (NOLOCK) RMT2RMTG
		--	ON RMT.Id = RMT2RMTG.RequestModeTypeId
		INNER JOIN RequestModeTypeGenre (NOLOCK) RMTG
			ON RMT2RMET.RequestModeTypeGenreid = RMTG.Id
	WHERE
		RMET.Id = @RequestModeEnrollmentTypeId
		 and RMTG.Name = @RequestModeTypeGenreName--'historical usage'
END
GO
PRINT N'Creating [dbo].[usp_RequestModeType_SELECT_NameById]...';


GO

CREATE PROC [dbo].[usp_RequestModeType_SELECT_NameById]
@Id NVARCHAR(50)
AS
BEGIN
	SELECT
		[Name]
	FROM 
		dbo.RequestModeType (NOLOCK) RMT
	WHERE
		CONVERT(NVARCHAR(50),RMT.Id) = @Id
END
GO
PRINT N'Creating [dbo].[usp_RequestModeTypes_SELECT_By_RequestModeEnrollmentTypeId]...';


GO
CREATE PROC [dbo].[usp_RequestModeTypes_SELECT_By_RequestModeEnrollmentTypeId]
@RequestModeEnrollmentTypeId NVARCHAR(50)
AS
BEGIN
	SELECT
		[RMT].[Id],
		[RMT].[Name]
	FROM
		dbo.RequestModeType (NOLOCK) RMT
		INNER JOIN dbo.RequestModeTypeToRequestModeEnrollmentType (NOLOCK) RMT2RMET
			ON RMT.Id = RMT2RMET.RequestModeTypeId
		INNER JOIN dbo.RequestModeEnrollmentType (NOLOCK) RMET
			ON RMT2RMET.RequestModeEnrollmentTypeId = RMET.Id
	WHERE
		CONVERT(NVARCHAR(50),RMET.Id) = @RequestModeEnrollmentTypeId
END
GO
PRINT N'Creating [dbo].[usp_ServiceClass_SELECT_By_UtilityCompanyId]...';


GO

CREATE PROC [dbo].[usp_ServiceClass_SELECT_By_UtilityCompanyId]
	@UtilityCompanyId NVARCHAR(50)
AS
BEGIN


	SELECT
		[RC].[Id],
		[RC].[ServiceClassCode] AS [Name]
	FROM
		dbo.ServiceClass (NOLOCK) RC
	WHERE
		CONVERT(NVARCHAR(50),RC.UtilityCompanyId) = @UtilityCompanyId


END
GO
PRINT N'Creating [dbo].[usp_TariffCode_SELECT_By_UtilityCompanyId]...';


GO
CREATE PROC [dbo].[usp_TariffCode_SELECT_By_UtilityCompanyId]
	@UtilityCompanyId NVARCHAR(50)
AS
BEGIN


	SELECT
		[RC].[Id],
		[RC].[TariffCodeCode] AS [Name]
	FROM
		dbo.TariffCode (NOLOCK) RC
	WHERE
		CONVERT(NVARCHAR(50),RC.UtilityCompanyId) = @UtilityCompanyId
END
GO
PRINT N'Creating [dbo].[usp_TEST_SELECT_RequestModeHistoricalUsage_BY_EnrollmentTypeAndUtility]...';


GO
CREATE PROC usp_TEST_SELECT_RequestModeHistoricalUsage_BY_EnrollmentTypeAndUtility
	@RequestModeEnrollmentTypeId AS NVARCHAR(50),
	@UtilityCompanyId AS NVARCHAR(50),
	@UtilityLegacyId AS INT,
	@UtilityCode AS NVARCHAR(50)

AS
BEGIN
--SELECT * FROM RequestModeHistoricalUsage
--SET @RequestModeEnrollmentTypeId = '65325E2F-6FC4-4DB1-A1B7-28BBB1A606B9'
--SET @UtilityCompanyId = '3BA9F09B-972B-4C10-8435-1BAA0989C042'
--SET @UtilityLegacyId = 22
--DECLARE @UtilityCode AS NVARCHAR(50)

SELECT
	COUNT(RMHU.Id)
FROM
	dbo.RequestModeHistoricalUsage (NOLOCK) RMHU
	INNER JOIN dbo.UtilityCompanyToUtilityLegacy (NOLOCK) U2U
		ON RMHU.UtilityCompanyId = U2U.UtilityCompanyId
	LEFT OUTER JOIN dbo.UtilityLegacy (NOLOCK) UL
		ON U2U.UtilityLegacyId = UL.ID
	LEFT OUTER JOIN dbo.UtilityCompany (NOLOCK) UC
		ON U2U.UtilityCompanyId= UC.Id
WHERE
	RMHU.RequestModeEnrollmentTypeId = @RequestModeEnrollmentTypeId
	AND 
	(
		(UL.ID IS NOT NULL AND UL.ID <> 0 AND U2U.UtilityLegacyId = @UtilityLegacyId)
		OR U2U.UtilityCompanyId = @UtilityCompanyId
		OR (UC.UtilityCode IS NOT NULL AND UC.UtilityCode <> '' AND UC.UtilityCode = @UtilityCode)
	)
	
END
GO
PRINT N'Creating [dbo].[usp_TEST_SELECT_RequestModeIcap_BY_EnrollmentTypeAndUtility]...';


GO

CREATE PROC [dbo].[usp_TEST_SELECT_RequestModeIcap_BY_EnrollmentTypeAndUtility]
	@RequestModeEnrollmentTypeId AS NVARCHAR(50),
	@UtilityCompanyId AS NVARCHAR(50),
	@UtilityLegacyId AS INT,
	@UtilityCode AS NVARCHAR(50)

AS
BEGIN
--SELECT * FROM RequestModeIcap
--SET @RequestModeEnrollmentTypeId = '65325E2F-6FC4-4DB1-A1B7-28BBB1A606B9'
--SET @UtilityCompanyId = '3BA9F09B-972B-4C10-8435-1BAA0989C042'
--SET @UtilityLegacyId = 22
--DECLARE @UtilityCode AS NVARCHAR(50)

SELECT
	COUNT(RMHU.Id)
FROM
	dbo.RequestModeIcap (NOLOCK) RMHU
	INNER JOIN dbo.UtilityCompanyToUtilityLegacy (NOLOCK) U2U
		ON RMHU.UtilityCompanyId = U2U.UtilityCompanyId
	LEFT OUTER JOIN dbo.UtilityLegacy (NOLOCK) UL
		ON U2U.UtilityLegacyId = UL.ID
	LEFT OUTER JOIN dbo.UtilityCompany (NOLOCK) UC
		ON U2U.UtilityCompanyId= UC.Id
WHERE
	RMHU.RequestModeEnrollmentTypeId = @RequestModeEnrollmentTypeId
	AND 
	(
		(UL.ID IS NOT NULL AND UL.ID <> 0 AND U2U.UtilityLegacyId = @UtilityLegacyId)
		OR U2U.UtilityCompanyId = @UtilityCompanyId
		OR (UC.UtilityCode IS NOT NULL AND UC.UtilityCode <> '' AND UC.UtilityCode = @UtilityCode)
	)
	
END
GO
PRINT N'Creating [dbo].[usp_TEST_SELECT_RequestModeIdr_BY_EnrollmentTypeAndUtility]...';


GO


CREATE PROC [dbo].[usp_TEST_SELECT_RequestModeIdr_BY_EnrollmentTypeAndUtility]
	@RequestModeEnrollmentTypeId AS NVARCHAR(50),
	@UtilityCompanyId AS NVARCHAR(50),
	@UtilityLegacyId AS INT,
	@UtilityCode AS NVARCHAR(50)

AS
BEGIN
--SELECT * FROM RequestModeIdr
--SET @RequestModeEnrollmentTypeId = '65325E2F-6FC4-4DB1-A1B7-28BBB1A606B9'
--SET @UtilityCompanyId = '3BA9F09B-972B-4C10-8435-1BAA0989C042'
--SET @UtilityLegacyId = 22
--DECLARE @UtilityCode AS NVARCHAR(50)

SELECT
	COUNT(RMHU.Id)
FROM
	dbo.RequestModeIdr (NOLOCK) RMHU
	INNER JOIN dbo.UtilityCompanyToUtilityLegacy (NOLOCK) U2U
		ON RMHU.UtilityCompanyId = U2U.UtilityCompanyId
	LEFT OUTER JOIN dbo.UtilityLegacy (NOLOCK) UL
		ON U2U.UtilityLegacyId = UL.ID
	LEFT OUTER JOIN dbo.UtilityCompany (NOLOCK) UC
		ON U2U.UtilityCompanyId= UC.Id
WHERE
	RMHU.RequestModeEnrollmentTypeId = @RequestModeEnrollmentTypeId
	AND 
	(
		(UL.ID IS NOT NULL AND UL.ID <> 0 AND U2U.UtilityLegacyId = @UtilityLegacyId)
		OR U2U.UtilityCompanyId = @UtilityCompanyId
		OR (UC.UtilityCode IS NOT NULL AND UC.UtilityCode <> '' AND UC.UtilityCode = @UtilityCode)
	)
	
END
GO
PRINT N'Creating [dbo].[usp_UserInterfaceForm_GET_ControllingControlsAndVisibilityByForm]...';


GO
CREATE PROC usp_UserInterfaceForm_GET_ControllingControlsAndVisibilityByForm
	@FormName NVARCHAR(50)
AS
BEGIN

	SELECT 
		UIFCC.ControlName AS ControllingControlName,
		UICVGCV.ControlValueGoverningVisibiltiy AS ControllingControlValue,
		UIFC.ControlName AS VisibilityControlName
	FROM 
		dbo.UserInterfaceForm (NOLOCK) UIF
		INNER JOIN dbo.UserInterfaceFormControl (NOLOCK) UIFC
			ON UIF.Id = UIFC.UserInterfaceFormId
		INNER JOIN dbo.UserInterfaceFormControl (NOLOCK) UIFCC
			ON UIF.Id = UIFCC.UserInterfaceFormId
		INNER JOIN dbo.UserInterfaceControlAndValueGoverningControlVisibility (NOLOCK) UICVGCV
			ON UIF.Id = UICVGCV.UserInterfaceFormId
				AND UIFCC.Id = UICVGCV.UserInterfaceFormControlGoverningVisibilityId
		INNER JOIN dbo.UserInterfaceControlVisibility (NOLOCK) UICV
			ON UIF.Id = UICV.UserInterfaceFormId
				AND UIFC.Id = UICV.UserInterfaceFormControlId
				AND UICVGCV.Id = UICV.UserInterfaceControlAndValueGoverningControlVisibilityId
	WHERE
		UIF.UserInterfaceFormName = @FormName
	ORDER BY
		UIFCC.ControlName,
		UICVGCV.ControlValueGoverningVisibiltiy,
		UIFC.ControlName  

END
GO
PRINT N'Creating [dbo].[usp_UserInterfaceForm_SELECT_ControllingControlsAndVisibilityByForm]...';


GO
CREATE PROC usp_UserInterfaceForm_SELECT_ControllingControlsAndVisibilityByForm
	@FormName NVARCHAR(50)
AS
BEGIN

	SELECT 
		UIFCC.ControlName AS ControllingControlName,
		UICVGCV.ControlValueGoverningVisibiltiy AS ControllingControlValue,
		UIFC.ControlName AS VisibilityControlName,
		UIF.Id,
		UIF.UserInterfaceFormName,
		UIFC.Id,
		UIFC.ControlName,
		UIFCC.Id,
		UIFCC.ControlName,
		UICVGCV.Id,
		UICVGCV.ControlValueGoverningVisibiltiy,
		UICV.Id
	FROM 
		dbo.UserInterfaceForm (NOLOCK) UIF
		INNER JOIN dbo.UserInterfaceFormControl (NOLOCK) UIFC
			ON UIF.Id = UIFC.UserInterfaceFormId
		INNER JOIN dbo.UserInterfaceFormControl (NOLOCK) UIFCC
			ON UIF.Id = UIFCC.UserInterfaceFormId
		INNER JOIN dbo.UserInterfaceControlAndValueGoverningControlVisibility (NOLOCK) UICVGCV
			ON UIF.Id = UICVGCV.UserInterfaceFormId
				AND UIFCC.Id = UICVGCV.UserInterfaceFormControlGoverningVisibilityId
		INNER JOIN dbo.UserInterfaceControlVisibility (NOLOCK) UICV
			ON UIF.Id = UICV.UserInterfaceFormId
				AND UIFC.Id = UICV.UserInterfaceFormControlId
				AND UICVGCV.Id = UICV.UserInterfaceControlAndValueGoverningControlVisibilityId
	WHERE
		UIF.UserInterfaceFormName = @FormName
	ORDER BY
		UIFCC.ControlName,
		UICVGCV.ControlValueGoverningVisibiltiy,
		UIFC.ControlName  

END
GO
PRINT N'Creating [dbo].[usp_UserInterfaceFormControl_SELECT_By_UserInterfaceFormId]...';


GO
CREATE PROC usp_UserInterfaceFormControl_SELECT_By_UserInterfaceFormId
	@UserInterfaceFormId NVARCHAR(50) 
AS
BEGIN
	SELECT
		UIFC.Id, UIFC.ControlName
	FROM
		dbo.UserInterfaceFormControl (NOLOCK) UIFC
	WHERE
		UIFC.UserInterfaceFormId = @UserInterfaceFormId

END
GO
PRINT N'Creating [dbo].[usp_UserInterfaceFormControls_SELECT_By_UserInterfaceFormId]...';


GO
CREATE PROC usp_UserInterfaceFormControls_SELECT_By_UserInterfaceFormId
	@UserInterfaceFormId NVARCHAR(50) 
AS
BEGIN
	SELECT
		UIFC.Id, UIFC.ControlName
	FROM
		dbo.UserInterfaceFormControl (NOLOCK) UIFC
	WHERE
		UIFC.UserInterfaceFormId = @UserInterfaceFormId

END
GO
PRINT N'Creating [dbo].[usp_UserInterfaceFormControlValues_SELECT_By_UserInterfaceFormControlId]...';


GO
CREATE PROC usp_UserInterfaceFormControlValues_SELECT_By_UserInterfaceFormControlId
	@UserInterfaceFormControlId NVARCHAR(50) 
AS
BEGIN
	SELECT
		UICVGCV.Id, UICVGCV.ControlValueGoverningVisibiltiy
	FROM
		dbo.UserInterfaceControlAndValueGoverningControlVisibility UICVGCV
	WHERE
		UICVGCV.UserInterfaceFormId = @UserInterfaceFormControlId

END
GO
PRINT N'Creating [dbo].[usp_UtilityCompanies_SELECT_All]...';


GO
CREATE PROC usp_UtilityCompanies_SELECT_All
AS
BEGIN

	SELECT
		Id,
		UtilityCode,
		Inactive,
		CreatedBy,
		CreatedDate,
		LastModifiedBy,
		LastModifiedDate
	FROM
		dbo.UtilityCompany (NOLOCK) UC

END
GO
PRINT N'Creating [dbo].[usp_UtilityCompany_NotIn_AccountInfoFieldRequired]...';


GO

CREATE PROC [dbo].[usp_UtilityCompany_NotIn_AccountInfoFieldRequired]
AS
BEGIN

	SELECT 
		* 
	FROM 
		UtilityCompany (NOLOCK) UC 
	WHERE 
		ID NOT IN (SELECT DISTINCT UtilityCompanyId FROM AccountInfoFieldRequired (NOLOCK))
	ORDER 
		BY UC.UtilityCode

END
GO
PRINT N'Creating [dbo].[usp_UtilityCompany_NotInAccountInfoFieldRequired]...';


GO
CREATE PROC usp_UtilityCompany_NotInAccountInfoFieldRequired
AS
BEGIN

	SELECT 
		UC.Id,
		UC.UtilityCode
	FROM
		UtilityCompany (NOLOCK) UC
	WHERE
		UC.Id NOT IN (SELECT DISTINCT UtilityCompanyId FROM AccountInfoFieldRequired)
	ORDER BY 
		UC.UtilityCode

END
GO
PRINT N'Creating [dbo].[usp_zAuditAccountInfoFieldRequired_SELECT]...';


GO

CREATE PROC [dbo].[usp_zAuditAccountInfoFieldRequired_SELECT]
AS
BEGIN

	SELECT 
		AAIFR.Id,
		AAIFR.IdPrevious,
		UC.Id AS UtilityCompanyId,
		UCPrev.Id AS UtilityCompanyIdPrevious,
		UC.UtilityCode,
		UCPrev.UtilityCode UtilityCodePrevious,
		AIF.Id AccountInfoFieldId,
		AIFPrev.Id AccountInfoFieldIdPrevious,
		AIF.NameUserFriendly,
		AIFPrev.NameUserFriendly AS NameUserFriendlyPrevious,
		AIF.NameMachineUnfriendly,
		AIFPrev.NameMachineUnfriendly AS NameMachineUnfriendlyPrevious,
		AIF.[Description],
		AIFPrev.[Description] AS DescriptionPrevious,
		AAIFR.IsRequired,
		AAIFR.IsRequiredPrevious,
		AAIFR.Inactive,
		AAIFR.InactivePrevious,
		AAIFR.CreatedBy,
		AAIFR.CreatedByPrevious,
		AAIFR.CreatedDate,
		AAIFR.CreatedDatePrevious,
		AAIFR.LastModifiedBy,
		AAIFR.LastModifiedByPrevious,
		AAIFR.LastModifiedDate,
		AAIFR.LastModifiedDatePrevious,
		REPLACE(AAIFR.SYS_CHANGE_COLUMNS, ',', ', ') AS SYS_CHANGE_COLUMNS,
		AAIFR.SYS_CHANGE_CREATION_VERSION,
		AAIFR.SYS_CHANGE_OPERATION,
		AAIFR.SYS_CHANGE_VERSION
	FROM 
		dbo.zAuditAccountInfoFieldRequired (NOLOCK) AAIFR
		LEFT OUTER JOIN dbo.UtilityCompany (NOLOCK) UC 
			ON AAIFR.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.UtilityCompany (NOLOCK) UCPrev 
			ON AAIFR.UtilityCompanyIdPrevious = UCPrev.Id
		LEFT OUTER JOIN dbo.AccountInfoField (NOLOCK) AIF
			ON AAIFR.AccountInfoFieldId = AIF.Id
		LEFT OUTER JOIN dbo.AccountInfoField (NOLOCK) AIFPrev
			ON AAIFR.AccountInfoFieldIdPrevious = AIFPrev.Id
END
GO
PRINT N'Creating [dbo].[usp_zAuditLoadProfile_SELECT]...';


GO

CREATE PROC [dbo].[usp_zAuditLoadProfile_SELECT]
AS
BEGIN

	SELECT 
		ALP.Id,
		ALP.IdPrevious,
		UC.Id AS UtilityCompanyId,
		UCPrev.Id AS UtilityCompanyIdPrevious,
		UC.UtilityCode,
		UCPrev.UtilityCode UtilityCodePrevious,
		ALP.LoadProfileCode,
		ALP.LoadProfileCodePrevious,
		ALP.[Description],
		ALP.[DescriptionPrevious],
		ALP.AccountTypeId,
		ALP.AccountTypeIdPrevious,
		AT.Name AS AccountTypeName,
		ATPrev.Name AS AccountTypeNamePrevious,
		ALP.LpStandardLoadProfileId,
		ALP.LpStandardLoadProfileIdPrevious,
		LSLP.LpStandardLoadProfileCode,
		LSLPPrev.LpStandardLoadProfileCode AS LpStandardLoadProfileCodePrevious,
		ALP.Inactive,
		ALP.InactivePrevious,
		ALP.CreatedBy,
		ALP.CreatedByPrevious,
		ALP.CreatedDate,
		ALP.CreatedDatePrevious,
		ALP.LastModifiedBy,
		ALP.LastModifiedByPrevious,
		ALP.LastModifiedDate,
		ALP.LastModifiedDatePrevious,
		REPLACE(ALP.SYS_CHANGE_COLUMNS, ',', ', ') AS SYS_CHANGE_COLUMNS,
		ALP.SYS_CHANGE_CREATION_VERSION,
		ALP.SYS_CHANGE_OPERATION,
		ALP.SYS_CHANGE_VERSION
	FROM 
		dbo.zAuditLoadProfile (NOLOCK) ALP
		LEFT OUTER JOIN dbo.UtilityCompany (NOLOCK) UC 
			ON ALP.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.UtilityCompany (NOLOCK) UCPrev 
			ON ALP.UtilityCompanyIdPrevious = UCPrev.Id
		LEFT OUTER JOIN dbo.AccountType (NOLOCK) AT
			ON ALP.AccountTypeId = AT.Id
		LEFT OUTER JOIN dbo.AccountType (NOLOCK) ATPrev
			ON ALP.AccountTypeIdPrevious = ATPrev.Id
		LEFT OUTER JOIN dbo.LpStandardLoadProfile (NOLOCK) LSLP
			ON ALP.LpStandardLoadProfileId = LSLP.Id
		LEFT OUTER JOIN dbo.LpStandardLoadProfile (NOLOCK) LSLPPrev
			ON ALP.LpStandardLoadProfileIdPrevious = LSLPPrev.Id

END
GO
PRINT N'Creating [dbo].[usp_zAuditLoadProfiles_SELECT]...';


GO

CREATE PROC [dbo].[usp_zAuditLoadProfiles_SELECT]
AS
BEGIN

	SELECT 
		ALP.Id,
		ALP.IdPrevious,
		UC.Id AS UtilityCompanyId,
		UCPrev.Id AS UtilityCompanyIdPrevious,
		UC.UtilityCode,
		UCPrev.UtilityCode UtilityCodePrevious,
		ALP.LoadProfileCode,
		ALP.LoadProfileCodePrevious,
		ALP.[Description],
		ALP.[DescriptionPrevious],
		ALP.AccountTypeId,
		ALP.AccountTypeIdPrevious,
		AT.Name AS AccountTypeName,
		ATPrev.Name AS AccountTypeNamePrevious,
		ALP.LpStandardLoadProfileId,
		ALP.LpStandardLoadProfileIdPrevious,
		LSLP.LpStandardLoadProfileCode,
		LSLPPrev.LpStandardLoadProfileCode AS LpStandardLoadProfileCodePrevious,
		ALP.Inactive,
		ALP.InactivePrevious,
		ALP.CreatedBy,
		ALP.CreatedByPrevious,
		ALP.CreatedDate,
		ALP.CreatedDatePrevious,
		ALP.LastModifiedBy,
		ALP.LastModifiedByPrevious,
		ALP.LastModifiedDate,
		ALP.LastModifiedDatePrevious,
		REPLACE(ALP.SYS_CHANGE_COLUMNS, ',', ', ') AS SYS_CHANGE_COLUMNS,
		ALP.SYS_CHANGE_CREATION_VERSION,
		ALP.SYS_CHANGE_OPERATION,
		ALP.SYS_CHANGE_VERSION
	FROM 
		dbo.zAuditLoadProfile (NOLOCK) ALP
		LEFT OUTER JOIN dbo.UtilityCompany (NOLOCK) UC 
			ON ALP.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.UtilityCompany (NOLOCK) UCPrev 
			ON ALP.UtilityCompanyIdPrevious = UCPrev.Id
		LEFT OUTER JOIN dbo.AccountType (NOLOCK) AT
			ON ALP.AccountTypeId = AT.Id
		LEFT OUTER JOIN dbo.AccountType (NOLOCK) ATPrev
			ON ALP.AccountTypeIdPrevious = ATPrev.Id
		LEFT OUTER JOIN dbo.LpStandardLoadProfile (NOLOCK) LSLP
			ON ALP.LpStandardLoadProfileId = LSLP.Id
		LEFT OUTER JOIN dbo.LpStandardLoadProfile (NOLOCK) LSLPPrev
			ON ALP.LpStandardLoadProfileIdPrevious = LSLPPrev.Id

END
GO
PRINT N'Creating [dbo].[usp_zAuditMeterType_SELECT]...';


GO

CREATE PROC [dbo].[usp_zAuditMeterType_SELECT]
AS
BEGIN
	SELECT 
		AMT.Id,
		AMT.IdPrevious,
		UC.Id AS UtilityCompanyId,
		UCPrev.Id AS UtilityCompanyIdPrevious,
		UC.UtilityCode,
		UCPrev.UtilityCode UtilityCodePrevious,
		AMT.MeterTypeCode,
		AMT.MeterTypeCodePrevious,
		AMT.[Description],
		AMT.[DescriptionPrevious],
		AMT.AccountTypeId,
		AMT.AccountTypeIdPrevious,
		AT.Name AS AccountTypeName,
		ATPrev.Name AS AccountTypeNamePrevious,
		AMT.LpStandardMeterType,
		AMT.LpStandardMeterTypePrevious,
		AMT.Inactive,
		AMT.InactivePrevious,
		AMT.CreatedBy,
		AMT.CreatedByPrevious,
		AMT.CreatedDate,
		AMT.CreatedDatePrevious,
		AMT.LastModifiedBy,
		AMT.LastModifiedByPrevious,
		AMT.LastModifiedDate,
		AMT.LastModifiedDatePrevious,
		REPLACE(AMT.SYS_CHANGE_COLUMNS, ',', ', ') AS SYS_CHANGE_COLUMNS,
		AMT.SYS_CHANGE_CREATION_VERSION,
		AMT.SYS_CHANGE_OPERATION,
		AMT.SYS_CHANGE_VERSION
	FROM 
		dbo.zAuditMeterType (NOLOCK) AMT
		LEFT OUTER JOIN dbo.UtilityCompany (NOLOCK) UC 
			ON AMT.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.UtilityCompany (NOLOCK) UCPrev 
			ON AMT.UtilityCompanyIdPrevious = UCPrev.Id
		LEFT OUTER JOIN dbo.AccountType (NOLOCK) AT
			ON AMT.AccountTypeId = AT.Id
		LEFT OUTER JOIN dbo.AccountType (NOLOCK) ATPrev
			ON AMT.AccountTypeIdPrevious = ATPrev.Id
END
GO
PRINT N'Creating [dbo].[usp_zAuditRateClass_SELECT]...';


GO

CREATE PROC [dbo].[usp_zAuditRateClass_SELECT]
AS
BEGIN
	SELECT 
		AMT.Id,
		AMT.IdPrevious,
		UC.Id AS UtilityCompanyId,
		UCPrev.Id AS UtilityCompanyIdPrevious,
		UC.UtilityCode,
		UCPrev.UtilityCode UtilityCodePrevious,
		AMT.RateClassCode,
		AMT.RateClassCodePrevious,
		AMT.[Description],
		AMT.[DescriptionPrevious],
		AMT.AccountTypeId,
		AMT.AccountTypeIdPrevious,
		AT.Name AS AccountTypeName,
		ATPrev.Name AS AccountTypeNamePrevious,
		AMT.LpStandardRateClass,
		AMT.LpStandardRateClassPrevious,
		AMT.Inactive,
		AMT.InactivePrevious,
		AMT.CreatedBy,
		AMT.CreatedByPrevious,
		AMT.CreatedDate,
		AMT.CreatedDatePrevious,
		AMT.LastModifiedBy,
		AMT.LastModifiedByPrevious,
		AMT.LastModifiedDate,
		AMT.LastModifiedDatePrevious,
		REPLACE(AMT.SYS_CHANGE_COLUMNS, ',', ', ') AS SYS_CHANGE_COLUMNS,
		AMT.SYS_CHANGE_CREATION_VERSION,
		AMT.SYS_CHANGE_OPERATION,
		AMT.SYS_CHANGE_VERSION
	FROM 
		dbo.zAuditRateClass (NOLOCK) AMT
		LEFT OUTER JOIN dbo.UtilityCompany (NOLOCK) UC 
			ON AMT.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.UtilityCompany (NOLOCK) UCPrev 
			ON AMT.UtilityCompanyIdPrevious = UCPrev.Id
		LEFT OUTER JOIN dbo.AccountType (NOLOCK) AT
			ON AMT.AccountTypeId = AT.Id
		LEFT OUTER JOIN dbo.AccountType (NOLOCK) ATPrev
			ON AMT.AccountTypeIdPrevious = ATPrev.Id
END
GO
PRINT N'Creating [dbo].[usp_zAuditRateClasses_SELECT]...';


GO


CREATE PROC [dbo].[usp_zAuditRateClasses_SELECT]
AS
BEGIN
	SELECT 
		AMT.Id,
		AMT.IdPrevious,
		UC.Id AS UtilityCompanyId,
		UCPrev.Id AS UtilityCompanyIdPrevious,
		UC.UtilityCode,
		UCPrev.UtilityCode UtilityCodePrevious,
		AMT.RateClassCode,
		AMT.RateClassCodePrevious,
		AMT.[Description],
		AMT.[DescriptionPrevious],
		AMT.AccountTypeId,
		AMT.AccountTypeIdPrevious,
		AT.Name AS AccountTypeName,
		ATPrev.Name AS AccountTypeNamePrevious,
		AMT.LpStandardRateClassId,
		AMT.LpStandardRateClassIdPrevious,
		LSRC.LpStandardRateClassCode,
		LSRCPrev.LpStandardRateClassCode AS LpStandardRateClassCodePrevious,
		AMT.Inactive,
		AMT.InactivePrevious,
		AMT.CreatedBy,
		AMT.CreatedByPrevious,
		AMT.CreatedDate,
		AMT.CreatedDatePrevious,
		AMT.LastModifiedBy,
		AMT.LastModifiedByPrevious,
		AMT.LastModifiedDate,
		AMT.LastModifiedDatePrevious,
		REPLACE(AMT.SYS_CHANGE_COLUMNS, ',', ', ') AS SYS_CHANGE_COLUMNS,
		AMT.SYS_CHANGE_CREATION_VERSION,
		AMT.SYS_CHANGE_OPERATION,
		AMT.SYS_CHANGE_VERSION
	FROM 
		dbo.zAuditRateClass (NOLOCK) AMT
		LEFT OUTER JOIN dbo.UtilityCompany (NOLOCK) UC 
			ON AMT.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.UtilityCompany (NOLOCK) UCPrev 
			ON AMT.UtilityCompanyIdPrevious = UCPrev.Id
		LEFT OUTER JOIN dbo.AccountType (NOLOCK) AT
			ON AMT.AccountTypeId = AT.Id
		LEFT OUTER JOIN dbo.AccountType (NOLOCK) ATPrev
			ON AMT.AccountTypeIdPrevious = ATPrev.Id
		LEFT OUTER JOIN dbo.LpStandardRateClass (NOLOCK) LSRC
			ON AMT.LpStandardRateClassId = LSRC.ID
		LEFT OUTER JOIN dbo.LpStandardRateClass (NOLOCK) LSRCPrev
			ON AMT.LpStandardRateClassIdPrevious = LSRCPrev.Id
END
GO
PRINT N'Creating [dbo].[usp_zAuditRequestModeHistoricalUsage_SELECT]...';


GO

CREATE PROC [dbo].[usp_zAuditRequestModeHistoricalUsage_SELECT]
AS
BEGIN

	SELECT 
		ZARMHU.Id,
		ZARMHU.IdPrevious,
		UC.Id AS UtilityCompanyId,
		UCPrev.Id AS UtilityCompanyIdPrevious,
		UC.UtilityCode,
		UCPrev.UtilityCode UtilityCodePrevious,
		RMET.Id AS RequestModeEnrollmentTypeId,
		RMETPrev.Id AS RequestModeEnrollmentTypeIdPrevious,
		RMET.Name AS RequestModeEnrollmentType,
		RMETPrev.Name AS RequestModeEnrollmentTypePrevious,
		RMT.Id AS RequestModeTypeId,
		RMTPrev.Id AS RequestModeTypeIdPrevious,
		RMT.Name AS RequestModeType,
		RMTPrev.Name AS RequestModeTypePrevious,
		ZARMHU.AddressForPreEnrollment,
		ZARMHU.AddressForPreEnrollmentPrevious,
		ZARMHU.EmailTemplate,
		ZARMHU.EmailTemplatePrevious,
		ZARMHU.Instructions,
		ZARMHU.InstructionsPrevious,
		ZARMHU.UtilitysSlaHistoricalUsageResponseInDays,
		ZARMHU.UtilitysSlaHistoricalUsageResponseInDaysPrevious,
		ZARMHU.LibertyPowersSlaFollowUpHistoricalUsageResponseInDays,
		ZARMHU.LibertyPowersSlaFollowUpHistoricalUsageResponseInDaysPrevious,
		ZARMHU.IsLoaRequired,
		ZARMHU.IsLoaRequiredPrevious,
		ZARMHU.Inactive,
		ZARMHU.InactivePrevious,
		ZARMHU.CreatedBy,
		ZARMHU.CreatedByPrevious,
		ZARMHU.CreatedDate,
		ZARMHU.CreatedDatePrevious,
		ZARMHU.LastModifiedBy,
		ZARMHU.LastModifiedByPrevious,
		ZARMHU.LastModifiedDate,
		ZARMHU.LastModifiedDatePrevious,
		REPLACE(ZARMHU.SYS_CHANGE_COLUMNS, ',', ', ') AS SYS_CHANGE_COLUMNS,
		ZARMHU.SYS_CHANGE_CREATION_VERSION,
		ZARMHU.SYS_CHANGE_OPERATION,
		ZARMHU.SYS_CHANGE_VERSION
	FROM 
		dbo.zAuditRequestModeHistoricalUsage (NOLOCK) ZARMHU
		LEFT OUTER JOIN dbo.UtilityCompany (NOLOCK) UC 
			ON ZARMHU.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.UtilityCompany (NOLOCK) UCPrev 
			ON ZARMHU.UtilityCompanyIdPrevious = UCPrev.Id
		LEFT OUTER JOIN dbo.RequestModeEnrollmentType (NOLOCK) RMET
			ON ZARMHU.RequestModeEnrollmentTypeId = RMET.Id
		LEFT OUTER JOIN dbo.RequestModeEnrollmentType (NOLOCK) RMETPrev
			ON ZARMHU.RequestModeEnrollmentTypeIdPrevious = RMETPrev.Id
		LEFT OUTER JOIN dbo.RequestModeType (NOLOCK) RMT
			ON ZARMHU.RequestModeTypeId = RMT.Id
		LEFT OUTER JOIN dbo.RequestModeType (NOLOCK) RMTPrev
			ON ZARMHU.RequestModeTypeIdPrevious = RMTPrev.Id

END
GO
PRINT N'Creating [dbo].[usp_zAuditRequestModeIcap_SELECT]...';


GO
CREATE PROC [dbo].[usp_zAuditRequestModeIcap_SELECT]
AS
BEGIN

	SELECT 
		ZARMHU.Id,
		ZARMHU.IdPrevious,
		UC.Id AS UtilityCompanyId,
		UCPrev.Id AS UtilityCompanyIdPrevious,
		UC.UtilityCode,
		UCPrev.UtilityCode UtilityCodePrevious,
		RMET.Id AS RequestModeEnrollmentTypeId,
		RMETPrev.Id AS RequestModeEnrollmentTypeIdPrevious,
		RMET.Name AS RequestModeEnrollmentType,
		RMETPrev.Name AS RequestModeEnrollmentTypePrevious,
		RMT.Id AS RequestModeTypeId,
		RMTPrev.Id AS RequestModeTypeIdPrevious,
		RMT.Name AS RequestModeType,
		RMTPrev.Name AS RequestModeTypePrevious,
		ZARMHU.AddressForPreEnrollment,
		ZARMHU.AddressForPreEnrollmentPrevious,
		ZARMHU.EmailTemplate,
		ZARMHU.EmailTemplatePrevious,
		ZARMHU.Instructions,
		ZARMHU.InstructionsPrevious,
		ZARMHU.UtilitysSlaIcapResponseInDays,
		ZARMHU.UtilitysSlaIcapResponseInDaysPrevious,
		ZARMHU.LibertyPowersSlaFollowUpIcapResponseInDays,
		ZARMHU.LibertyPowersSlaFollowUpIcapResponseInDaysPrevious,
		ZARMHU.IsLoaRequired,
		ZARMHU.IsLoaRequiredPrevious,
		ZARMHU.Inactive,
		ZARMHU.InactivePrevious,
		ZARMHU.CreatedBy,
		ZARMHU.CreatedByPrevious,
		ZARMHU.CreatedDate,
		ZARMHU.CreatedDatePrevious,
		ZARMHU.LastModifiedBy,
		ZARMHU.LastModifiedByPrevious,
		ZARMHU.LastModifiedDate,
		ZARMHU.LastModifiedDatePrevious,
		REPLACE(ZARMHU.SYS_CHANGE_COLUMNS, ',', ', ') AS SYS_CHANGE_COLUMNS,
		ZARMHU.SYS_CHANGE_CREATION_VERSION,
		ZARMHU.SYS_CHANGE_OPERATION,
		ZARMHU.SYS_CHANGE_VERSION
	FROM 
		dbo.zAuditRequestModeIcap (NOLOCK) ZARMHU
		LEFT OUTER JOIN dbo.UtilityCompany (NOLOCK) UC 
			ON ZARMHU.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.UtilityCompany (NOLOCK) UCPrev 
			ON ZARMHU.UtilityCompanyIdPrevious = UCPrev.Id
		LEFT OUTER JOIN dbo.RequestModeEnrollmentType (NOLOCK) RMET
			ON ZARMHU.RequestModeEnrollmentTypeId = RMET.Id
		LEFT OUTER JOIN dbo.RequestModeEnrollmentType (NOLOCK) RMETPrev
			ON ZARMHU.RequestModeEnrollmentTypeIdPrevious = RMETPrev.Id
		LEFT OUTER JOIN dbo.RequestModeType (NOLOCK) RMT
			ON ZARMHU.RequestModeTypeId = RMT.Id
		LEFT OUTER JOIN dbo.RequestModeType (NOLOCK) RMTPrev
			ON ZARMHU.RequestModeTypeIdPrevious = RMTPrev.Id

END
GO
PRINT N'Creating [dbo].[usp_zAuditRequestModeIdr_SELECT]...';


GO

CREATE PROC [dbo].[usp_zAuditRequestModeIdr_SELECT]
AS
BEGIN

	SELECT 
		ZARMHU.Id,
		ZARMHU.IdPrevious,
		UC.Id AS UtilityCompanyId,
		UCPrev.Id AS UtilityCompanyIdPrevious,
		UC.UtilityCode,
		UCPrev.UtilityCode UtilityCodePrevious,
		RMET.Id AS RequestModeEnrollmentTypeId,
		RMETPrev.Id AS RequestModeEnrollmentTypeIdPrevious,
		RMET.Name AS RequestModeEnrollmentType,
		RMETPrev.Name AS RequestModeEnrollmentTypePrevious,
		RMT.Id AS RequestModeTypeId,
		RMTPrev.Id AS RequestModeTypeIdPrevious,
		RMT.Name AS RequestModeType,
		RMTPrev.Name AS RequestModeTypePrevious,
		ZARMHU.AddressForPreEnrollment,
		ZARMHU.AddressForPreEnrollmentPrevious,
		ZARMHU.EmailTemplate,
		ZARMHU.EmailTemplatePrevious,
		ZARMHU.Instructions,
		ZARMHU.InstructionsPrevious,
		ZARMHU.UtilitysSlaIdrResponseInDays,
		ZARMHU.UtilitysSlaIdrResponseInDaysPrevious,
		ZARMHU.LibertyPowersSlaFollowUpIdrResponseInDays,
		ZARMHU.LibertyPowersSlaFollowUpIdrResponseInDaysPrevious,
		ZARMHU.IsLoaRequired,
		ZARMHU.IsLoaRequiredPrevious,
		ZARMHU.Inactive,
		ZARMHU.InactivePrevious,
		ZARMHU.CreatedBy,
		ZARMHU.CreatedByPrevious,
		ZARMHU.CreatedDate,
		ZARMHU.CreatedDatePrevious,
		ZARMHU.LastModifiedBy,
		ZARMHU.LastModifiedByPrevious,
		ZARMHU.LastModifiedDate,
		ZARMHU.LastModifiedDatePrevious,
		REPLACE(ZARMHU.SYS_CHANGE_COLUMNS, ',', ', ') AS SYS_CHANGE_COLUMNS,
		ZARMHU.SYS_CHANGE_CREATION_VERSION,
		ZARMHU.SYS_CHANGE_OPERATION,
		ZARMHU.SYS_CHANGE_VERSION
	FROM 
		dbo.zAuditRequestModeIdr (NOLOCK) ZARMHU
		LEFT OUTER JOIN dbo.UtilityCompany (NOLOCK) UC 
			ON ZARMHU.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.UtilityCompany (NOLOCK) UCPrev 
			ON ZARMHU.UtilityCompanyIdPrevious = UCPrev.Id
		LEFT OUTER JOIN dbo.RequestModeEnrollmentType (NOLOCK) RMET
			ON ZARMHU.RequestModeEnrollmentTypeId = RMET.Id
		LEFT OUTER JOIN dbo.RequestModeEnrollmentType (NOLOCK) RMETPrev
			ON ZARMHU.RequestModeEnrollmentTypeIdPrevious = RMETPrev.Id
		LEFT OUTER JOIN dbo.RequestModeType (NOLOCK) RMT
			ON ZARMHU.RequestModeTypeId = RMT.Id
		LEFT OUTER JOIN dbo.RequestModeType (NOLOCK) RMTPrev
			ON ZARMHU.RequestModeTypeIdPrevious = RMTPrev.Id

END
GO
PRINT N'Creating [dbo].[usp_zAuditServiceClass_SELECT]...';


GO

CREATE PROC [dbo].[usp_zAuditServiceClass_SELECT]
AS
BEGIN
	SELECT 
		AMT.Id,
		AMT.IdPrevious,
		UC.Id AS UtilityCompanyId,
		UCPrev.Id AS UtilityCompanyIdPrevious,
		UC.UtilityCode,
		UCPrev.UtilityCode UtilityCodePrevious,
		AMT.ServiceClassCode,
		AMT.ServiceClassCodePrevious,
		AMT.[Description],
		AMT.[DescriptionPrevious],
		AMT.AccountTypeId,
		AMT.AccountTypeIdPrevious,
		AT.Name AS AccountTypeName,
		ATPrev.Name AS AccountTypeNamePrevious,
		AMT.LpStandardServiceClass,
		AMT.LpStandardServiceClassPrevious,
		AMT.Inactive,
		AMT.InactivePrevious,
		AMT.CreatedBy,
		AMT.CreatedByPrevious,
		AMT.CreatedDate,
		AMT.CreatedDatePrevious,
		AMT.LastModifiedBy,
		AMT.LastModifiedByPrevious,
		AMT.LastModifiedDate,
		AMT.LastModifiedDatePrevious,
		REPLACE(AMT.SYS_CHANGE_COLUMNS, ',', ', ') AS SYS_CHANGE_COLUMNS,
		AMT.SYS_CHANGE_CREATION_VERSION,
		AMT.SYS_CHANGE_OPERATION,
		AMT.SYS_CHANGE_VERSION
	FROM 
		dbo.zAuditServiceClass (NOLOCK) AMT
		LEFT OUTER JOIN dbo.UtilityCompany (NOLOCK) UC 
			ON AMT.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.UtilityCompany (NOLOCK) UCPrev 
			ON AMT.UtilityCompanyIdPrevious = UCPrev.Id
		LEFT OUTER JOIN dbo.AccountType (NOLOCK) AT
			ON AMT.AccountTypeId = AT.Id
		LEFT OUTER JOIN dbo.AccountType (NOLOCK) ATPrev
			ON AMT.AccountTypeIdPrevious = ATPrev.Id
END
GO
PRINT N'Creating [dbo].[usp_zAuditTariffCode_SELECT]...';


GO

CREATE PROC [dbo].[usp_zAuditTariffCode_SELECT]
AS
BEGIN
	SELECT 
		AMT.Id,
		AMT.IdPrevious,
		UC.Id AS UtilityCompanyId,
		UCPrev.Id AS UtilityCompanyIdPrevious,
		UC.UtilityCode,
		UCPrev.UtilityCode UtilityCodePrevious,
		AMT.TariffCode,
		AMT.TariffCodePrevious,
		AMT.[Description],
		AMT.[DescriptionPrevious],
		AMT.AccountTypeId,
		AMT.AccountTypeIdPrevious,
		AT.Name AS AccountTypeName,
		ATPrev.Name AS AccountTypeNamePrevious,
		AMT.LpStandardTariffCode,
		AMT.LpStandardTariffCodePrevious,
		AMT.Inactive,
		AMT.InactivePrevious,
		AMT.CreatedBy,
		AMT.CreatedByPrevious,
		AMT.CreatedDate,
		AMT.CreatedDatePrevious,
		AMT.LastModifiedBy,
		AMT.LastModifiedByPrevious,
		AMT.LastModifiedDate,
		AMT.LastModifiedDatePrevious,
		REPLACE(AMT.SYS_CHANGE_COLUMNS, ',', ', ') AS SYS_CHANGE_COLUMNS,
		AMT.SYS_CHANGE_CREATION_VERSION,
		AMT.SYS_CHANGE_OPERATION,
		AMT.SYS_CHANGE_VERSION
	FROM 
		dbo.zAuditTariffCode (NOLOCK) AMT
		LEFT OUTER JOIN dbo.UtilityCompany (NOLOCK) UC 
			ON AMT.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.UtilityCompany (NOLOCK) UCPrev 
			ON AMT.UtilityCompanyIdPrevious = UCPrev.Id
		LEFT OUTER JOIN dbo.AccountType (NOLOCK) AT
			ON AMT.AccountTypeId = AT.Id
		LEFT OUTER JOIN dbo.AccountType (NOLOCK) ATPrev
			ON AMT.AccountTypeIdPrevious = ATPrev.Id
END
GO
PRINT N'Creating [dbo].[usp_zAuditTariffCodes_SELECT]...';


GO


CREATE PROC [dbo].[usp_zAuditTariffCodes_SELECT]
AS
BEGIN
	SELECT 
		AMT.Id,
		AMT.IdPrevious,
		UC.Id AS UtilityCompanyId,
		UCPrev.Id AS UtilityCompanyIdPrevious,
		UC.UtilityCode,
		UCPrev.UtilityCode UtilityCodePrevious,
		AMT.TariffCodeCode,
		AMT.TariffCodeCodePrevious,
		AMT.[Description],
		AMT.[DescriptionPrevious],
		AMT.AccountTypeId,
		AMT.AccountTypeIdPrevious,
		AT.Name AS AccountTypeName,
		ATPrev.Name AS AccountTypeNamePrevious,
		LSTC.LpStandardTariffCodeCode,
		LSTCPrev.LpStandardTariffCodeCode AS LpStandardTariffCodeCodePrevious,
		AMT.Inactive,
		AMT.InactivePrevious,
		AMT.CreatedBy,
		AMT.CreatedByPrevious,
		AMT.CreatedDate,
		AMT.CreatedDatePrevious,
		AMT.LastModifiedBy,
		AMT.LastModifiedByPrevious,
		AMT.LastModifiedDate,
		AMT.LastModifiedDatePrevious,
		REPLACE(AMT.SYS_CHANGE_COLUMNS, ',', ', ') AS SYS_CHANGE_COLUMNS,
		AMT.SYS_CHANGE_CREATION_VERSION,
		AMT.SYS_CHANGE_OPERATION,
		AMT.SYS_CHANGE_VERSION
	FROM 
		dbo.zAuditTariffCode (NOLOCK) AMT
		LEFT OUTER JOIN dbo.UtilityCompany (NOLOCK) UC 
			ON AMT.UtilityCompanyId = UC.Id
		LEFT OUTER JOIN dbo.UtilityCompany (NOLOCK) UCPrev 
			ON AMT.UtilityCompanyIdPrevious = UCPrev.Id
		LEFT OUTER JOIN dbo.AccountType (NOLOCK) AT
			ON AMT.AccountTypeId = AT.Id
		LEFT OUTER JOIN dbo.AccountType (NOLOCK) ATPrev
			ON AMT.AccountTypeIdPrevious = ATPrev.Id
		LEFT OUTER JOIN dbo.LpStandardTariffCode (NOLOCK) LSTC
			ON AMT.LpStandardTariffCodeId = LSTC.ID
		LEFT OUTER JOIN dbo.LpStandardTariffCode (NOLOCK) LSTCPrev
			ON AMT.LpStandardTariffCodeIdPrevious = LSTCPrev.Id
END
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[AccountInfoFieldRequired] WITH CHECK CHECK CONSTRAINT [FK_AccountInfoFieldRequired_AccountInfoField];

ALTER TABLE [dbo].[AccountInfoFieldRequired] WITH CHECK CHECK CONSTRAINT [FK_AccountInfoFieldRequired_UtilityCompany];

ALTER TABLE [dbo].[BillingAccountPattern] WITH CHECK CHECK CONSTRAINT [FK_BillingAccountPattern_UtilityCompany];

ALTER TABLE [dbo].[IcapTcapRefreshDate] WITH CHECK CHECK CONSTRAINT [FK_IcapTcapRefreshDate_UtilityCompany];

ALTER TABLE [dbo].[IdrRequestCost] WITH CHECK CHECK CONSTRAINT [FK_IdrRequestCost_UtilityCompany];

ALTER TABLE [dbo].[IdrRule] WITH CHECK CHECK CONSTRAINT [FK_IdrRule_LoadProfile];

ALTER TABLE [dbo].[IdrRule] WITH CHECK CHECK CONSTRAINT [FK_IdrRule_RateClass];

ALTER TABLE [dbo].[IdrRule] WITH CHECK CHECK CONSTRAINT [FK_IdrRule_RequestModeType];

ALTER TABLE [dbo].[IdrRule] WITH CHECK CHECK CONSTRAINT [FK_IdrRule_UtilityCompany];

ALTER TABLE [dbo].[IdrRule] WITH CHECK CHECK CONSTRAINT [FK_IdrRules_LoadProfile];

ALTER TABLE [dbo].[LoadProfile] WITH CHECK CHECK CONSTRAINT [FK_LoadProfile_AccountType];

ALTER TABLE [dbo].[LoadProfile] WITH CHECK CHECK CONSTRAINT [FK_LoadProfile_LpStandardLoadProfile];

ALTER TABLE [dbo].[LoadProfile] WITH CHECK CHECK CONSTRAINT [FK_LoadProfile_UtilityCompany];

ALTER TABLE [dbo].[LoadProfileAlias] WITH CHECK CHECK CONSTRAINT [FK_LoadProfileAlias_LoadProfile];

ALTER TABLE [dbo].[LpApprovedBillingType] WITH CHECK CHECK CONSTRAINT [FK_LpApprovedBillingType_ApprovedBillingType];

ALTER TABLE [dbo].[LpApprovedBillingType] WITH CHECK CHECK CONSTRAINT [FK_LpApprovedBillingType_LpBillingType];

ALTER TABLE [dbo].[LpBillingType] WITH CHECK CHECK CONSTRAINT [FK_LpBillingType_BillingType];

ALTER TABLE [dbo].[LpBillingType] WITH CHECK CHECK CONSTRAINT [FK_LpBillingType_PorDriver];

ALTER TABLE [dbo].[LpBillingType] WITH CHECK CHECK CONSTRAINT [FK_LpBillingType_UtilityCompany];

ALTER TABLE [dbo].[LpStandardLoadProfile] WITH CHECK CHECK CONSTRAINT [FK_LpStandardLoadProfile_UtilityCompany];

ALTER TABLE [dbo].[LpStandardRateClass] WITH CHECK CHECK CONSTRAINT [FK_LpStandardRateClass_UtilityCompany];

ALTER TABLE [dbo].[LpStandardTariffCode] WITH CHECK CHECK CONSTRAINT [FK_LpStandardTariffCode_UtilityCompany];

ALTER TABLE [dbo].[LpUtilityOfferedBillingType] WITH CHECK CHECK CONSTRAINT [FK_LpUtilityOfferedBillingType_LpBillingType];

ALTER TABLE [dbo].[LpUtilityOfferedBillingType] WITH CHECK CHECK CONSTRAINT [FK_LpUtilityOfferedBillingType_UtilityOfferedBillingType];

ALTER TABLE [dbo].[MeterReadSchedule] WITH CHECK CHECK CONSTRAINT [FK_MeterReadSchedule_Month];

ALTER TABLE [dbo].[MeterReadSchedule] WITH CHECK CHECK CONSTRAINT [FK_MeterReadSchedule_UtilityCompany];

ALTER TABLE [dbo].[MeterReadSchedule] WITH CHECK CHECK CONSTRAINT [FK_MeterReadSchedule_UtilityTrip];

ALTER TABLE [dbo].[MeterReadSchedule] WITH CHECK CHECK CONSTRAINT [FK_MeterReadSchedule_Year];

ALTER TABLE [dbo].[MeterType] WITH CHECK CHECK CONSTRAINT [FK_MeterType_AccountType];

ALTER TABLE [dbo].[MeterType] WITH CHECK CHECK CONSTRAINT [FK_MeterType_UtilityCompany];

ALTER TABLE [dbo].[NameKeyPattern] WITH CHECK CHECK CONSTRAINT [FK_NameKeyPattern_UtilityCompany];

ALTER TABLE [dbo].[PurchaseOfReceivables] WITH CHECK CHECK CONSTRAINT [FK_PurchaseOfReceivables_PorDriver];

ALTER TABLE [dbo].[PurchaseOfReceivables] WITH CHECK CHECK CONSTRAINT [FK_PurchaseOfReceivables_PorRecourse];

ALTER TABLE [dbo].[PurchaseOfReceivables] WITH CHECK CHECK CONSTRAINT [FK_PurchaseOfReceivables_UtilityCompany];

ALTER TABLE [dbo].[RateClass] WITH CHECK CHECK CONSTRAINT [FK_RateClass_AccountType];

ALTER TABLE [dbo].[RateClass] WITH CHECK CHECK CONSTRAINT [FK_RateClass_LpStandardRateClass];

ALTER TABLE [dbo].[RateClass] WITH CHECK CHECK CONSTRAINT [FK_RateClass_UtilityCompany];

ALTER TABLE [dbo].[RateClassAlias] WITH CHECK CHECK CONSTRAINT [FK_RateClassAlias_RateClass];

ALTER TABLE [dbo].[RequestModeHistoricalUsage] WITH CHECK CHECK CONSTRAINT [FK_RequestModeHistoricalUsage_RequestModeEnrollmentType];

ALTER TABLE [dbo].[RequestModeHistoricalUsage] WITH CHECK CHECK CONSTRAINT [FK_RequestModeHistoricalUsage_RequestModeType];

ALTER TABLE [dbo].[RequestModeHistoricalUsage] WITH CHECK CHECK CONSTRAINT [FK_RequestModeHistoricalUsage_UtilityCompany];

ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH CHECK CHECK CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_HasCustomerNumberId];

ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH CHECK CHECK CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_HasMeterTypeId];

ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH CHECK CHECK CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_HasPodIdNumberId];

ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH CHECK CHECK CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_HasReferenceNumberId];

ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH CHECK CHECK CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_IsBillingAccountNumberRequiredId];

ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH CHECK CHECK CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_IsMdmaId];

ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH CHECK CHECK CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_IsMeterInstallerId];

ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH CHECK CHECK CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_IsMeterNumberRequiredId];

ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH CHECK CHECK CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_IsMeterOwnerId];

ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH CHECK CHECK CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_IsMeterReaderId];

ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH CHECK CHECK CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_IsNameKeyRequiredId];

ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH CHECK CHECK CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_IsSchedulingCoordinatorId];

ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH CHECK CHECK CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_IsServiceProviderId];

ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH CHECK CHECK CONSTRAINT [FK_RequestModeHistoricalUsageParameter_TriStateValue_IsZipCodeRequiredId];

ALTER TABLE [dbo].[RequestModeHistoricalUsageParameter] WITH CHECK CHECK CONSTRAINT [FK_RequestModeHistoricalUsageParameter_UtilityCompanyId];

ALTER TABLE [dbo].[RequestModeIcap] WITH CHECK CHECK CONSTRAINT [FK_RequestModeIcap_RequestModeEnrollmentType];

ALTER TABLE [dbo].[RequestModeIcap] WITH CHECK CHECK CONSTRAINT [FK_RequestModeIcap_RequestModeType];

ALTER TABLE [dbo].[RequestModeIcap] WITH CHECK CHECK CONSTRAINT [FK_RequestModeIcap_UtilityCompany];

ALTER TABLE [dbo].[RequestModeIdr] WITH CHECK CHECK CONSTRAINT [FK_RequestModeIdr_RequestModeEnrollmentType];

ALTER TABLE [dbo].[RequestModeIdr] WITH CHECK CHECK CONSTRAINT [FK_RequestModeIdr_RequestModeType];

ALTER TABLE [dbo].[RequestModeIdr] WITH CHECK CHECK CONSTRAINT [FK_RequestModeIdr_UtilityCompany];

ALTER TABLE [dbo].[RequestModeTypeToRequestModeEnrollmentType] WITH CHECK CHECK CONSTRAINT [FK_RequestModeTypeToRequestModeEnrollmentType_RequestModeEnrollmentType];

ALTER TABLE [dbo].[RequestModeTypeToRequestModeEnrollmentType] WITH CHECK CHECK CONSTRAINT [FK_RequestModeTypeToRequestModeEnrollmentType_RequestModeType];

ALTER TABLE [dbo].[RequestModeTypeToRequestModeEnrollmentType] WITH CHECK CHECK CONSTRAINT [FK_RequestModeTypeToRequestModeEnrollmentType_RequestModeTypeGenre];

ALTER TABLE [dbo].[RequestModeTypeToRequestModeTypeGenre] WITH CHECK CHECK CONSTRAINT [FK_RequestModeTypeToRequestModeTypeGenre_RequestModeType];

ALTER TABLE [dbo].[RequestModeTypeToRequestModeTypeGenre] WITH CHECK CHECK CONSTRAINT [FK_RequestModeTypeToRequestModeTypeGenre_RequestModeTypeGenre];

ALTER TABLE [dbo].[ServiceAccountPattern] WITH CHECK CHECK CONSTRAINT [FK_ServiceAccountPattern_UtilityCompany];

ALTER TABLE [dbo].[ServiceAddressZipPattern] WITH CHECK CHECK CONSTRAINT [FK_ServiceAddressZipPattern_UtilityCompany];

ALTER TABLE [dbo].[TariffCode] WITH CHECK CHECK CONSTRAINT [FK_TariffCode_AccountType];

ALTER TABLE [dbo].[TariffCode] WITH CHECK CHECK CONSTRAINT [FK_TariffCode_LpStandardTariffCode];

ALTER TABLE [dbo].[TariffCode] WITH CHECK CHECK CONSTRAINT [FK_TariffCode_UtilityCompany];

ALTER TABLE [dbo].[TariffCodeAlias] WITH CHECK CHECK CONSTRAINT [FK_TariffCodeAlias_TariffCode];

ALTER TABLE [dbo].[UserInterfaceControlAndValueGoverningControlVisibility] WITH CHECK CHECK CONSTRAINT [FK_UserInterfaceControlAndValueGoverningControlVisibility_UserInterfaceForm];

ALTER TABLE [dbo].[UserInterfaceControlAndValueGoverningControlVisibility] WITH CHECK CHECK CONSTRAINT [FK_UserInterfaceControlAndValueGoverningControlVisibility_UserInterfaceFormControl];

ALTER TABLE [dbo].[UserInterfaceControlVisibility] WITH CHECK CHECK CONSTRAINT [FK_UserInterfaceControlVisibility_UserInterfaceControlAndValueGoverningControlVisibility];

ALTER TABLE [dbo].[UserInterfaceControlVisibility] WITH CHECK CHECK CONSTRAINT [FK_UserInterfaceControlVisibility_UserInterfaceForm];

ALTER TABLE [dbo].[UserInterfaceControlVisibility] WITH CHECK CHECK CONSTRAINT [FK_UserInterfaceControlVisibility_UserInterfaceFormControl];

ALTER TABLE [dbo].[UserInterfaceFormControl] WITH CHECK CHECK CONSTRAINT [FK_UserInterfaceFormControl_UserInterfaceForm];

ALTER TABLE [dbo].[UtilityBillingType] WITH CHECK CHECK CONSTRAINT [FK_UtilityBillingType_BillingType];

ALTER TABLE [dbo].[UtilityBillingType] WITH CHECK CHECK CONSTRAINT [FK_UtilityBillingType_LoadProfile];

ALTER TABLE [dbo].[UtilityBillingType] WITH CHECK CHECK CONSTRAINT [FK_UtilityBillingType_RateClass];

ALTER TABLE [dbo].[UtilityBillingType] WITH CHECK CHECK CONSTRAINT [FK_UtilityBillingType_TariffCode];

ALTER TABLE [dbo].[UtilityBillingType] WITH CHECK CHECK CONSTRAINT [FK_UtilityBillingType_UtilityCompany];

ALTER TABLE [dbo].[UtilityCompany] WITH CHECK CHECK CONSTRAINT [FK_UtilityCompany_ISO];

ALTER TABLE [dbo].[UtilityCompany] WITH CHECK CHECK CONSTRAINT [FK_UtilityCompany_Market];

ALTER TABLE [dbo].[UtilityCompany] WITH CHECK CHECK CONSTRAINT [FK_UtilityCompany_UtilityStatus];

ALTER TABLE [dbo].[UtilityCompanyToUtilityLegacy] WITH CHECK CHECK CONSTRAINT [FK_UtilityCompanyToUtilityLegacy_UtilityCompany];

ALTER TABLE [dbo].[UtilityCompanyToUtilityLegacy] WITH CHECK CHECK CONSTRAINT [FK_UtilityCompanyToUtilityLegacy_UtilityLegacy];

ALTER TABLE [dbo].[UtilityTrip] WITH CHECK CHECK CONSTRAINT [FK_UtilityTrip_UtilityCompany];


GO
PRINT N'Update complete.';


GO
