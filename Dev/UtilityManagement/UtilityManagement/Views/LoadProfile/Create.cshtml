@model DataAccessLayerEntityFramework.LoadProfile
@{
    ViewBag.Title = "Create Load Profile";
    SelectList lpStandardLoadProfileIdSelectList = ViewBag.LpStandardLoadProfileId;
}
@using UserInterfaceValidationExtensions
<script>
    $("#UtilityCompanyId option").attr("disabled", "true");
</script>
@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)

       <div class="edit_section">
        <div class="edit_header">
            <div class="loadp_ico"></div>
            <div class="edit_header_desc"><h4>Load Profile</h4>
            <h3>New Record</h3>
            @*Enrollment Type*@
            </div>
            </div>
        <div class="form_fieldset">
            <fieldset>
                <legend>Load Profile</legend>

               <div class="textblock">
                   <div class="details-data-section">
                       <div id="Gen"  class="activable">
                       <img id="dirImg2" class="hidediv" src="~/Images/arrow_open.png" onclick="showDiv('hideContent',this.id)" />
                       <div class="edit_section_heading" onclick="showDiv('hideContent',this.id)">General</div>
                       <div id="hideContent" class="editdetails">
                           <div class="details-full-section">
                               @Html.HiddenFor(model => model.UtilityCompanyId, new { id = "UtilityCompanyId", name = "UtilityCompanyId" })

                               <div class="editor-label">
                                   @Html.LabelFor(model => model.UtilityCompanyId, "Utility Company")
                               </div>
                               <div class="editor-field">
                                   @Html.Label((string)ViewBag.UtilityCode)
                                   @Html.ValidationMessageFor(model => model.UtilityCompanyId, "The current Utility Company field value is invalid.")
                               </div>
                               <div class="clear"></div>
                                <div class="editor-label">
                                    @Html.LabelFor(model => model.LoadProfileId, "Load Profile ID")
                                </div>
                                <div class="editor-field-display">
                                    @Html.DisplayFor(model => model.LoadProfileId)
                                    @Html.ValidationMessageFor(model => model.LoadProfileId)
                                </div>

                               <div class="clear"></div>
                               <div class="editor-label">
                                   @Html.LabelFor(model => model.LoadProfileCode, "Load Profile Code")
                               </div>
                               <div class="editor-field">
                                   @Html.EditorFor(model => model.LoadProfileCode)
                                   @Html.ValidationMessageFor(model => model.LoadProfileCode, "The current Load Profile Code field value is invalid.")
                                   @{
    if (Session["IsPostBack"] == "true")
    {
        var validationMessage = Model.LoadProfileCodeValidationMessage();
        if (!string.IsNullOrWhiteSpace(validationMessage))
        { 
                                       <span class="field-validation-error" data-valmsg-for="LoadProfileCode" data-valmsg-replace="true">@validationMessage</span>
        }
    }
                                   }
                               </div>
                               <div class="clear"></div>

                               <div class="editor-label">
                                   @Html.LabelFor(model => model.Description)
                               </div>
                               <div class="editor-field">
                                   @Html.EditorFor(model => model.Description)
                                   @Html.ValidationMessageFor(model => model.Description)
                                   @{
    if (Session["IsPostBack"] == "true")
    {
        var validationMessage = Model.DescriptionValidationMessage();
        if (!string.IsNullOrWhiteSpace(validationMessage))
        { 
                                       <span class="field-validation-error" data-valmsg-for="Description" data-valmsg-replace="true">@validationMessage</span>
        }
    }
                                   }
                               </div>
                               <div class="clear"></div>
                               <div class="editor-label">
                                   @Html.LabelFor(model => model.AccountTypeId, "AccountType")
                               </div>
                               <div class="editor-field">
                                   @Html.DropDownList("AccountTypeId", String.Empty)
                                   @Html.ValidationMessageFor(model => model.AccountTypeId, "The current Account Type field value is invalid.")
                               </div>
                               <div class="clear"></div>
                               <div class="editor-label">
                                   @Html.Label("LP Standard Load Profile")
                               </div>
                               <div class="editor-field">
                                   @Html.DropDownList("LpStandardLoadProfileId", ((SelectList)ViewBag.LpStandardLoadProfileId), string.Empty)
                                   @Html.ValidationMessageFor(model => model.LpStandardLoadProfileId, "The current LP Standard Load Profile field value is invalid.")
                               </div>
                           </div>
                       </div>
                           </div>

                       <br />
                       <div id="info"  class="activable">
                       <img id="dirImg3" class="hidediv" src="~/Images/arrow_open.png" onclick="showDiv('hideContent2',this.id)" />
                       <div class="edit_section_heading" onclick="showDiv('hideContent2',this.id)">Audit Information</div>
                       <div id="hideContent2" class="editdetails" >
                           <div class="details-full-section">
                               <div class="editor-label">
                                   @Html.LabelFor(model => model.Inactive)
                               </div>
                               <div class="editor-field-display">
                                   @Html.EditorFor(model => model.Inactive)
                                   @Html.ValidationMessageFor(model => model.Inactive)
                               </div>
                               <div class="clear"></div>
                               <div class="editor-label">
                                   @Html.LabelFor(model => model.CreatedBy, "Created By")
                               </div>
                               <div class="editor-field-display">
                                   @Html.DisplayFor(model => model.CreatedBy)
                                   @Html.ValidationMessageFor(model => model.CreatedBy)
                               </div>
                               <div class="clear"></div>
                               <div class="editor-label">
                                   @Html.LabelFor(model => model.CreatedDate, "Created Date")
                               </div>
                               <div class="editor-field-display">
                                   @Html.DisplayFor(model => model.CreatedDate)
                                   @Html.ValidationMessageFor(model => model.CreatedDate)
                               </div>
                               <div class="clear"></div>
                               <div class="editor-label">
                                   @Html.LabelFor(model => model.LastModifiedBy, "Last Modified By")
                               </div>
                               <div class="editor-field-display">
                                   @Html.DisplayFor(model => model.LastModifiedBy)
                                   @Html.ValidationMessageFor(model => model.LastModifiedBy)
                               </div>
                               <div class="clear"></div>
                               <div class="editor-label">
                                   @Html.LabelFor(model => model.LastModifiedDate, "Last Modified Date")
                               </div>
                               <div class="editor-field-display">
                                   @Html.DisplayFor(model => model.LastModifiedDate)
                                   @Html.ValidationMessageFor(model => model.LastModifiedDate)
                               </div>
                           </div>
                       </div>
                   </div>
                   </div>
                   </div>
            </fieldset>
        </div>
    </div>
}
@*@if (Session["ErrorMessage"] != null)
{<h3>@Session["ErrorMessage"].ToString()</h3>}*@


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script>
    $(function () {
        $("#tabs").tabs();
    });