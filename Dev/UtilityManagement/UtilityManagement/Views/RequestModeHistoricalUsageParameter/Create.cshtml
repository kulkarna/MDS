@model DataAccessLayerEntityFramework.RequestModeHistoricalUsageParameter
@{
    ViewBag.Title = "Create Request Mode Historical Usage Parameter";
}
@using UserInterfaceValidationExtensions
@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
    <div class="edit_section">
        <div class="edit_header">
            <div class="huParam_ico"></div>
            <div class="edit_header_desc">
                <h4>Historical Usage Request Mode Parameter</h4>
                <h3>New Record</h3>
                @*Enrollment Type*@
            </div>
        </div>
        <div class="form_fieldset">
            <fieldset>
                <legend>RequestModeHistoricalUsageParameter</legend>
                <div class="textblock">
                    <div class="details-data-section">
                        <div id="Gen"  class="activable">
                           <img id="dirImg2"  class="hidediv" src="~/Images/arrow_open.png" onclick="showDiv('hideContent',this.id)" /> 
                            <div class="edit_section_heading"  onclick="showDiv('hideContent',this.id)" >General</div>
                            <div id="hideContent" class="editdetails">
                                <div class="details-full-section">
                                    <div class="details-left-section">
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.UtilityCompanyId, "Utility Code")
                                        </div>
                                        <div class="editor-field">
                                            @Html.DropDownList("UtilityCompanyId", String.Empty)
                                            @Html.ValidationMessageFor(model => model.UtilityCompanyId, "The current Utility Company field value is invalid.")
                                        </div>
                                         <div class="clear"></div>
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.IsNameKeyRequiredId, "Is Billing Account # Required")
                                        </div>
                                        <div class="editor-field">
                                            @Html.DropDownList("IsBillingAccountNumberRequiredId", String.Empty)
                                            @Html.ValidationMessageFor(model => model.IsBillingAccountNumberRequiredId, "The current Is Billing Account Number Required field value is invalid.")
                                        </div>
                                         <div class="clear"></div>
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.IsZipCodeRequiredId, "Is Zip Code Required")
                                        </div>
                                        <div class="editor-field">
                                            @Html.DropDownList("IsZipCodeRequiredId", String.Empty)
                                            @Html.ValidationMessageFor(model => model.IsZipCodeRequiredId, "The current Is Zip Code Required field value is invalid.")
                                        </div>
                                         <div class="clear"></div>
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.IsNameKeyRequiredId, "Is Name Key Required")
                                        </div>
                                        <div class="editor-field">
                                            @Html.DropDownList("IsNameKeyRequiredId", String.Empty)
                                            @Html.ValidationMessageFor(model => model.IsNameKeyRequiredId, "The current Is Name Key Required field value is invalid.")
                                        </div>
                                         <div class="clear"></div>
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.IsMdmaId, "Is MDMA")
                                        </div>
                                        <div class="editor-field">
                                            @Html.DropDownList("IsMdmaId", String.Empty)
                                            @Html.ValidationMessageFor(model => model.IsMdmaId, "The current Is MDMA field value is invalid.")
                                        </div>
                                         <div class="clear"></div>
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.IsServiceProviderId, "Is Service Provider")
                                        </div>
                                        <div class="editor-field">
                                            @Html.DropDownList("IsServiceProviderId", String.Empty)
                                            @Html.ValidationMessageFor(model => model.IsServiceProviderId, "The current Is Service Provider field value is invalid.")
                                        </div>
                                         <div class="clear"></div>
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.IsMeterInstallerId, "Is Meter Installer")
                                        </div>
                                        <div class="editor-field">
                                            @Html.DropDownList("IsMeterInstallerId", String.Empty)
                                            @Html.ValidationMessageFor(model => model.IsMeterInstallerId, "The current Is Meter Installer field value is invalid.")
                                        </div>
                                         <div class="clear"></div>
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.IsMeterReaderId, "Is Meter Reader")
                                        </div>
                                        <div class="editor-field">
                                            @Html.DropDownList("IsMeterReaderId", String.Empty)
                                            @Html.ValidationMessageFor(model => model.IsMeterReaderId, "The current Is Meter Reader field value is invalid.")
                                        </div>
                                        <div class="clear"></div>
                                    </div>
                                    <div class="details-right-section">
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.IsMeterOwnerId, "Is Meter Owner")
                                        </div>
                                        <div class="editor-field">
                                            @Html.DropDownList("IsMeterOwnerId", String.Empty)
                                            @Html.ValidationMessageFor(model => model.IsMeterOwnerId, "The current Is Meter Owner field value is invalid.")
                                        </div>
                                            <div class="clear"></div>
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.IsSchedulingCoordinatorId, "Is Scheduling Coordinator")
                                        </div>
                                        <div class="editor-field">
                                            @Html.DropDownList("IsSchedulingCoordinatorId", String.Empty)
                                            @Html.ValidationMessageFor(model => model.IsSchedulingCoordinatorId, "The current Is Scheduling Coordinator field value is invalid.")
                                        </div>
                                            <div class="clear"></div>
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.HasReferenceNumberId, "Has Reference Number")
                                        </div>
                                        <div class="editor-field">
                                            @Html.DropDownList("HasReferenceNumberId", String.Empty)
                                            @Html.ValidationMessageFor(model => model.HasReferenceNumberId, "The current Has Reference Number field value is invalid.")
                                        </div>
                                            <div class="clear"></div>

                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.HasCustomerNumberId, "Has Customer Number")
                                        </div>
                                        <div class="editor-field">
                                            @Html.DropDownList("HasCustomerNumberId", String.Empty)
                                            @Html.ValidationMessageFor(model => model.HasCustomerNumberId, "The current Has Customer Number field value is invalid.")
                                        </div>
                                            <div class="clear"></div>

                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.HasPodIdNumberId, "Has Pod Id Number")
                                        </div>
                                        <div class="editor-field">
                                            @Html.DropDownList("HasPodIdNumberId", String.Empty)
                                            @Html.ValidationMessageFor(model => model.HasPodIdNumberId, "The current Has Pod Id Number field value is invalid.")
                                        </div>
                                            <div class="clear"></div>

                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.HasMeterTypeId, "Has Meter Type")
                                        </div>
                                        <div class="editor-field">
                                            @Html.DropDownList("HasMeterTypeId", String.Empty)
                                            @Html.ValidationMessageFor(model => model.HasMeterTypeId, "The current Has Meter Type field value is invalid.")
                                        </div>
                                            <div class="clear"></div>
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.IsMeterNumberRequiredId, "Is Meter Number Required")
                                        </div>
                                        <div class="editor-field">
                                            @Html.DropDownList("IsMeterNumberRequiredId", String.Empty)
                                            @Html.ValidationMessageFor(model => model.IsMeterNumberRequiredId, "The current Is Meter Number Required field value is invalid.")
                                        </div>
                                        <div class="clear"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="info"  class="activable">
                            <img id="dirImg3" class="hidediv" src="~/Images/arrow_open.png" onclick="showDiv('hideContent2',this.id)" /> 
                            <div class="edit_section_heading" onclick="showDiv('hideContent2',this.id)">Audit Information</div>
                            <div id="hideContent2" class="editdetails" >
                                <div class="details-full-section">
                                    <div class="details-left-section">
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.Inactive)
                                        </div>
                                        <div class="editor-field-display">
                                            @Html.EditorFor(model => model.Inactive)
                                            @Html.ValidationMessageFor(model => model.Inactive)
                                        </div>
                                         <div class="clear"></div>
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.CreatedBy, "Created By")
                                        </div>
                                        <div class="editor-field-display">
                                            @Html.DisplayFor(model => model.CreatedBy)
                                            @Html.ValidationMessageFor(model => model.CreatedBy)
                                        </div>
                                         <div class="clear"></div>
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.CreatedDate, "Created Date")
                                        </div>
                                        <div class="editor-field-display">
                                            @Html.DisplayFor(model => model.CreatedDate)
                                            @Html.ValidationMessageFor(model => model.CreatedDate)
                                        </div>
                                         <div class="clear"></div>
                                    </div>
                                    <div class="details-right-section">
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.LastModifiedBy, "Last Modified By")
                                        </div>
                                        <div class="editor-field-display">
                                            @Html.DisplayFor(model => model.LastModifiedBy)
                                            @Html.ValidationMessageFor(model => model.LastModifiedBy)
                                        </div>
                                         <div class="clear"></div>
                                        <div class="editor-label">
                                            @Html.LabelFor(model => model.LastModifiedDate, "Last Modified Date")
                                        </div>
                                        <div class="editor-field-display">
                                            @Html.DisplayFor(model => model.LastModifiedDate)
                                            @Html.ValidationMessageFor(model => model.LastModifiedDate)
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </fieldset>
        </div>
    </div>
}
<script type="text/javascript">
    $(
        function ()
        {
            $("#btnSave").click(function (evt) {
                if ($("select#UtilityCompanyId").val() != "-1" && $("select#RequestModeTypeId").val() != "-1")
                {
                    $.ajax(
                    {
                        type: 'POST',
                        url: "/RequestModeHistoricalUsage/ValidateIcapAndHistoricalUsageRequestModeTypesForCreate",
                        datatype: 'json',
                        async: false,
                        data: { utilityCompanyId: $("select#UtilityCompanyId").val(), requestModeTypeId: $("select#RequestModeTypeId").val() },
                        success: function (data)
                        {
                            if (data > 0)
                            {
                                alert("WARNING! The Preferred HU Request Mode in Pre-Enrollment is different from the I-Cap Request Mode.  Please verify that they are correctly configured.");
                            }
                            $("select#vmfAddress").val = "Hooray!";
                        }
                    });
                }
            });
        }
    );

    $(
        function ()
        {
            if ($("select#RequestModeTypeId").val() != "-1")
            {
                $.ajax(
                {
                    url: "/RequestModeHistoricalUsage/GetVisibilityData",
                    type: 'POST',
                    data: { formName: "Historical Usage Request Mode" },
                    success: function (data)
                    {
                        $("#divAddressLabel").hide();
                        $("#divAddressField").hide();
                        $("#divEmailTemplateLabel").hide();
                        $("#divEmailTemplateText").hide();

                        $.each(data, function (i, val)
                        {
                            var control = "#" + val.ControllingControlName + " option:selected";
                            if ($(control).text().toLowerCase() == val.ControllingControlValue.toLowerCase())
                            {
                                var controlToShow = "#" + val.VisibilityControlName;
                                $(controlToShow).show();
                            }
                        });
                    },
                    error: function (xhr) { alert("Something seems Wrong"); }
                });
            }
        });

    $(function () {
        $("select#RequestModeTypeId").change(function (evt) {
            if ($("select#RequestModeTypeId").val() != "-1") {
                $.ajax({
                    url: "/RequestModeHistoricalUsage/GetVisibilityData",
                    type: 'POST',
                    data: { formName: "Historical Usage Request Mode" },
                    success: function (data) {
                        $("#divAddressLabel").hide();
                        $("#divAddressField").hide();
                        $("#divEmailTemplateLabel").hide();
                        $("#divEmailTemplateText").hide();

                        $.each(data, function (i, val) {
                            var control = "#" + val.ControllingControlName + " option:selected";
                            if ($(control).text().toLowerCase() == val.ControllingControlValue.toLowerCase()) {
                                var controlToShow = "#" + val.VisibilityControlName;
                                $(controlToShow).show();
                            }
                        });
                    },
                    error: function (xhr) { alert("Something seems Wrong"); }
                });
            }
        });
    });

    $(function () {
        $("select#RequestModeEnrollmentTypeId").change(function (evt) {
            if ($("select#RequestModeEnrollmentTypeId").val() != "-1") {
                $.ajax({
                    url: "/RequestModeHistoricalUsage/PopulateRequestModeTypeList",
                    type: 'POST',
                    data: { RequestModeEnrollmentTypeId: $("select#RequestModeEnrollmentTypeId").val() },
                    success: function (data) {
                        var items = "";
                        items += "<option value='11111'>  </option>";
                        $.each(data, function (i, val) {
                            items += "<option value='" + val.Id + "'>" + val.Name + "</option>";
                        });

                        $("select#RequestModeTypeId").empty().html(items);
                    },
                    error: function (xhr) { alert("Something seems Wrong"); }
                });
            }
        });
    });
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

}
@{
    var errorMessage = Model.GetRequestModeHistoricalUsageParameterValidationString(true);
    if (errorMessage != null)
    {
    <h3>@errorMessage</h3>
    }    
}
<script>
    $(function () {
        $("#tabs").tabs();
    });
