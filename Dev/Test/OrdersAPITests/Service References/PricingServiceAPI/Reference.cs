//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OrdersAPITests.PricingServiceAPI {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WSResult", Namespace="http://schemas.datacontract.org/2004/07/CRMWebServices")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(OrdersAPITests.PricingServiceAPI.WSProductRateResult))]
    public partial class WSResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<string> ErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> Errors {
            get {
                return this.ErrorsField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorsField, value) != true)) {
                    this.ErrorsField = value;
                    this.RaisePropertyChanged("Errors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasErrors {
            get {
                return this.HasErrorsField;
            }
            set {
                if ((this.HasErrorsField.Equals(value) != true)) {
                    this.HasErrorsField = value;
                    this.RaisePropertyChanged("HasErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WSProductRateResult", Namespace="http://schemas.datacontract.org/2004/07/CRMWebServices")]
    [System.SerializableAttribute()]
    public partial class WSProductRateResult : OrdersAPITests.PricingServiceAPI.WSResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<OrdersAPITests.PricingServiceAPI.WSProductRate> ProducRatesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<OrdersAPITests.PricingServiceAPI.WSProductRate> ProducRates {
            get {
                return this.ProducRatesField;
            }
            set {
                if ((object.ReferenceEquals(this.ProducRatesField, value) != true)) {
                    this.ProducRatesField = value;
                    this.RaisePropertyChanged("ProducRates");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WSProductRate", Namespace="http://schemas.datacontract.org/2004/07/CRMWebServices")]
    [System.SerializableAttribute()]
    public partial class WSProductRate : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChannelGroupIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChannelTypeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CostRateEffectiveDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CostRateExpirationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal GrossMarginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MarketIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriceDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long PriceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PriceTierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProductBrandIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ProductCrossPriceIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProductCrossPriceSetIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal RateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SegmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceClassCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ServiceClassIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TermField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TierDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UtilityIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZoneCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ZoneIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChannelGroupID {
            get {
                return this.ChannelGroupIDField;
            }
            set {
                if ((this.ChannelGroupIDField.Equals(value) != true)) {
                    this.ChannelGroupIDField = value;
                    this.RaisePropertyChanged("ChannelGroupID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChannelTypeID {
            get {
                return this.ChannelTypeIDField;
            }
            set {
                if ((this.ChannelTypeIDField.Equals(value) != true)) {
                    this.ChannelTypeIDField = value;
                    this.RaisePropertyChanged("ChannelTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CostRateEffectiveDate {
            get {
                return this.CostRateEffectiveDateField;
            }
            set {
                if ((this.CostRateEffectiveDateField.Equals(value) != true)) {
                    this.CostRateEffectiveDateField = value;
                    this.RaisePropertyChanged("CostRateEffectiveDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CostRateExpirationDate {
            get {
                return this.CostRateExpirationDateField;
            }
            set {
                if ((this.CostRateExpirationDateField.Equals(value) != true)) {
                    this.CostRateExpirationDateField = value;
                    this.RaisePropertyChanged("CostRateExpirationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal GrossMargin {
            get {
                return this.GrossMarginField;
            }
            set {
                if ((this.GrossMarginField.Equals(value) != true)) {
                    this.GrossMarginField = value;
                    this.RaisePropertyChanged("GrossMargin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MarketID {
            get {
                return this.MarketIDField;
            }
            set {
                if ((this.MarketIDField.Equals(value) != true)) {
                    this.MarketIDField = value;
                    this.RaisePropertyChanged("MarketID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PriceDescription {
            get {
                return this.PriceDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.PriceDescriptionField, value) != true)) {
                    this.PriceDescriptionField = value;
                    this.RaisePropertyChanged("PriceDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long PriceId {
            get {
                return this.PriceIdField;
            }
            set {
                if ((this.PriceIdField.Equals(value) != true)) {
                    this.PriceIdField = value;
                    this.RaisePropertyChanged("PriceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PriceTier {
            get {
                return this.PriceTierField;
            }
            set {
                if ((this.PriceTierField.Equals(value) != true)) {
                    this.PriceTierField = value;
                    this.RaisePropertyChanged("PriceTier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProductBrandId {
            get {
                return this.ProductBrandIdField;
            }
            set {
                if ((this.ProductBrandIdField.Equals(value) != true)) {
                    this.ProductBrandIdField = value;
                    this.RaisePropertyChanged("ProductBrandId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ProductCrossPriceID {
            get {
                return this.ProductCrossPriceIDField;
            }
            set {
                if ((this.ProductCrossPriceIDField.Equals(value) != true)) {
                    this.ProductCrossPriceIDField = value;
                    this.RaisePropertyChanged("ProductCrossPriceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProductCrossPriceSetID {
            get {
                return this.ProductCrossPriceSetIDField;
            }
            set {
                if ((this.ProductCrossPriceSetIDField.Equals(value) != true)) {
                    this.ProductCrossPriceSetIDField = value;
                    this.RaisePropertyChanged("ProductCrossPriceSetID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Rate {
            get {
                return this.RateField;
            }
            set {
                if ((this.RateField.Equals(value) != true)) {
                    this.RateField = value;
                    this.RaisePropertyChanged("Rate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SegmentId {
            get {
                return this.SegmentIdField;
            }
            set {
                if ((this.SegmentIdField.Equals(value) != true)) {
                    this.SegmentIdField = value;
                    this.RaisePropertyChanged("SegmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceClassCode {
            get {
                return this.ServiceClassCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceClassCodeField, value) != true)) {
                    this.ServiceClassCodeField = value;
                    this.RaisePropertyChanged("ServiceClassCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ServiceClassId {
            get {
                return this.ServiceClassIdField;
            }
            set {
                if ((this.ServiceClassIdField.Equals(value) != true)) {
                    this.ServiceClassIdField = value;
                    this.RaisePropertyChanged("ServiceClassId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Term {
            get {
                return this.TermField;
            }
            set {
                if ((this.TermField.Equals(value) != true)) {
                    this.TermField = value;
                    this.RaisePropertyChanged("Term");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TierDescription {
            get {
                return this.TierDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.TierDescriptionField, value) != true)) {
                    this.TierDescriptionField = value;
                    this.RaisePropertyChanged("TierDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UtilityID {
            get {
                return this.UtilityIDField;
            }
            set {
                if ((this.UtilityIDField.Equals(value) != true)) {
                    this.UtilityIDField = value;
                    this.RaisePropertyChanged("UtilityID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZoneCode {
            get {
                return this.ZoneCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ZoneCodeField, value) != true)) {
                    this.ZoneCodeField = value;
                    this.RaisePropertyChanged("ZoneCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ZoneId {
            get {
                return this.ZoneIdField;
            }
            set {
                if ((this.ZoneIdField.Equals(value) != true)) {
                    this.ZoneIdField = value;
                    this.RaisePropertyChanged("ZoneId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductBrand", Namespace="http://schemas.datacontract.org/2004/07/LibertyPower.Business.CustomerAcquisition" +
        ".ProductManagement")]
    [System.SerializableAttribute()]
    public partial class ProductBrand : OrdersAPITests.PricingServiceAPI.Product {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateCreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProductIdentityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProductTypeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateCreated {
            get {
                return this.DateCreatedField;
            }
            set {
                if ((this.DateCreatedField.Equals(value) != true)) {
                    this.DateCreatedField = value;
                    this.RaisePropertyChanged("DateCreated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProductIdentity {
            get {
                return this.ProductIdentityField;
            }
            set {
                if ((this.ProductIdentityField.Equals(value) != true)) {
                    this.ProductIdentityField = value;
                    this.RaisePropertyChanged("ProductIdentity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProductTypeID {
            get {
                return this.ProductTypeIDField;
            }
            set {
                if ((this.ProductTypeIDField.Equals(value) != true)) {
                    this.ProductTypeIDField = value;
                    this.RaisePropertyChanged("ProductTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Product", Namespace="http://schemas.datacontract.org/2004/07/LibertyPower.Business.CustomerAcquisition" +
        ".ProductManagement")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(OrdersAPITests.PricingServiceAPI.ProductBrand))]
    public partial class Product : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OrdersAPITests.PricingServiceAPI.ProductCategory CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EffectiveDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsMultiTermField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProductBrandIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OrdersAPITests.PricingServiceAPI.ProductCategory Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((this.CategoryField.Equals(value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EffectiveDate {
            get {
                return this.EffectiveDateField;
            }
            set {
                if ((this.EffectiveDateField.Equals(value) != true)) {
                    this.EffectiveDateField = value;
                    this.RaisePropertyChanged("EffectiveDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMultiTerm {
            get {
                return this.IsMultiTermField;
            }
            set {
                if ((this.IsMultiTermField.Equals(value) != true)) {
                    this.IsMultiTermField = value;
                    this.RaisePropertyChanged("IsMultiTerm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProductBrandID {
            get {
                return this.ProductBrandIDField;
            }
            set {
                if ((this.ProductBrandIDField.Equals(value) != true)) {
                    this.ProductBrandIDField = value;
                    this.RaisePropertyChanged("ProductBrandID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductId {
            get {
                return this.ProductIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductIdField, value) != true)) {
                    this.ProductIdField = value;
                    this.RaisePropertyChanged("ProductId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductCategory", Namespace="http://schemas.datacontract.org/2004/07/LibertyPower.Business.CustomerAcquisition" +
        ".ProductManagement")]
    public enum ProductCategory : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Fixed = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Variable = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PriceTier", Namespace="http://schemas.datacontract.org/2004/07/LibertyPower.Business.CustomerAcquisition" +
        ".DailyPricing")]
    [System.SerializableAttribute()]
    public partial class PriceTier : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxMwhField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinMwhField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PriceTierIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProductConfigurationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SortOrderField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullDescription {
            get {
                return this.FullDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.FullDescriptionField, value) != true)) {
                    this.FullDescriptionField = value;
                    this.RaisePropertyChanged("FullDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxMwh {
            get {
                return this.MaxMwhField;
            }
            set {
                if ((this.MaxMwhField.Equals(value) != true)) {
                    this.MaxMwhField = value;
                    this.RaisePropertyChanged("MaxMwh");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinMwh {
            get {
                return this.MinMwhField;
            }
            set {
                if ((this.MinMwhField.Equals(value) != true)) {
                    this.MinMwhField = value;
                    this.RaisePropertyChanged("MinMwh");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PriceTierID {
            get {
                return this.PriceTierIDField;
            }
            set {
                if ((this.PriceTierIDField.Equals(value) != true)) {
                    this.PriceTierIDField = value;
                    this.RaisePropertyChanged("PriceTierID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProductConfigurationID {
            get {
                return this.ProductConfigurationIDField;
            }
            set {
                if ((this.ProductConfigurationIDField.Equals(value) != true)) {
                    this.ProductConfigurationIDField = value;
                    this.RaisePropertyChanged("ProductConfigurationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SortOrder {
            get {
                return this.SortOrderField;
            }
            set {
                if ((this.SortOrderField.Equals(value) != true)) {
                    this.SortOrderField = value;
                    this.RaisePropertyChanged("SortOrder");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WSAccountType", Namespace="http://schemas.datacontract.org/2004/07/CRMWebServices")]
    [System.SerializableAttribute()]
    public partial class WSAccountType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccountTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AccountTypeIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccountType {
            get {
                return this.AccountTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountTypeField, value) != true)) {
                    this.AccountTypeField = value;
                    this.RaisePropertyChanged("AccountType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccountTypeId {
            get {
                return this.AccountTypeIdField;
            }
            set {
                if ((this.AccountTypeIdField.Equals(value) != true)) {
                    this.AccountTypeIdField = value;
                    this.RaisePropertyChanged("AccountTypeId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WSCrossProductPriceSet", Namespace="http://schemas.datacontract.org/2004/07/CRMWebServices")]
    [System.SerializableAttribute()]
    public partial class WSCrossProductPriceSet : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EffectiveDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ExpirationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdentityField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EffectiveDate {
            get {
                return this.EffectiveDateField;
            }
            set {
                if ((this.EffectiveDateField.Equals(value) != true)) {
                    this.EffectiveDateField = value;
                    this.RaisePropertyChanged("EffectiveDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ExpirationDate {
            get {
                return this.ExpirationDateField;
            }
            set {
                if ((this.ExpirationDateField.Equals(value) != true)) {
                    this.ExpirationDateField = value;
                    this.RaisePropertyChanged("ExpirationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Identity {
            get {
                return this.IdentityField;
            }
            set {
                if ((this.IdentityField.Equals(value) != true)) {
                    this.IdentityField = value;
                    this.RaisePropertyChanged("Identity");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WSActionResultOfWSProductRate", Namespace="http://schemas.datacontract.org/2004/07/CRMWebServices")]
    [System.SerializableAttribute()]
    public partial class WSActionResultOfWSProductRate : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<string> ErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<OrdersAPITests.PricingServiceAPI.WSProductRate> ServiceResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> Errors {
            get {
                return this.ErrorsField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorsField, value) != true)) {
                    this.ErrorsField = value;
                    this.RaisePropertyChanged("Errors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasErrors {
            get {
                return this.HasErrorsField;
            }
            set {
                if ((this.HasErrorsField.Equals(value) != true)) {
                    this.HasErrorsField = value;
                    this.RaisePropertyChanged("HasErrors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<OrdersAPITests.PricingServiceAPI.WSProductRate> ServiceResult {
            get {
                return this.ServiceResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceResultField, value) != true)) {
                    this.ServiceResultField = value;
                    this.RaisePropertyChanged("ServiceResult");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WSLocationDetails", Namespace="http://schemas.datacontract.org/2004/07/CRMWebServices")]
    [System.SerializableAttribute()]
    public partial class WSLocationDetails : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarketCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MarketIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarketNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UtilityCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UtilityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UtilityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ZoneIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZoneNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketCode {
            get {
                return this.MarketCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketCodeField, value) != true)) {
                    this.MarketCodeField = value;
                    this.RaisePropertyChanged("MarketCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MarketId {
            get {
                return this.MarketIdField;
            }
            set {
                if ((this.MarketIdField.Equals(value) != true)) {
                    this.MarketIdField = value;
                    this.RaisePropertyChanged("MarketId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketName {
            get {
                return this.MarketNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MarketNameField, value) != true)) {
                    this.MarketNameField = value;
                    this.RaisePropertyChanged("MarketName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UtilityCode {
            get {
                return this.UtilityCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.UtilityCodeField, value) != true)) {
                    this.UtilityCodeField = value;
                    this.RaisePropertyChanged("UtilityCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UtilityId {
            get {
                return this.UtilityIdField;
            }
            set {
                if ((this.UtilityIdField.Equals(value) != true)) {
                    this.UtilityIdField = value;
                    this.RaisePropertyChanged("UtilityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UtilityName {
            get {
                return this.UtilityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UtilityNameField, value) != true)) {
                    this.UtilityNameField = value;
                    this.RaisePropertyChanged("UtilityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ZoneId {
            get {
                return this.ZoneIdField;
            }
            set {
                if ((this.ZoneIdField.Equals(value) != true)) {
                    this.ZoneIdField = value;
                    this.RaisePropertyChanged("ZoneId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZoneName {
            get {
                return this.ZoneNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ZoneNameField, value) != true)) {
                    this.ZoneNameField = value;
                    this.RaisePropertyChanged("ZoneName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PricingServiceAPI.IPricingService")]
    public interface IPricingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/Echo", ReplyAction="http://tempuri.org/IPricingService/EchoResponse")]
        string Echo(string input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/Echo", ReplyAction="http://tempuri.org/IPricingService/EchoResponse")]
        System.Threading.Tasks.Task<string> EchoAsync(string input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetSalesChannelPrices", ReplyAction="http://tempuri.org/IPricingService/GetSalesChannelPricesResponse")]
        OrdersAPITests.PricingServiceAPI.WSProductRateResult GetSalesChannelPrices(int salesChannelId, int channelTypeId, System.DateTime startDate, System.DateTime priceDate, int marketId, int utilityID, int accountTypeID, int productBrandId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetSalesChannelPrices", ReplyAction="http://tempuri.org/IPricingService/GetSalesChannelPricesResponse")]
        System.Threading.Tasks.Task<OrdersAPITests.PricingServiceAPI.WSProductRateResult> GetSalesChannelPricesAsync(int salesChannelId, int channelTypeId, System.DateTime startDate, System.DateTime priceDate, int marketId, int utilityID, int accountTypeID, int productBrandId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetSalesChannelPricesByTerm", ReplyAction="http://tempuri.org/IPricingService/GetSalesChannelPricesByTermResponse")]
        OrdersAPITests.PricingServiceAPI.WSProductRateResult GetSalesChannelPricesByTerm(int salesChannelId, int channelTypeId, System.DateTime startDate, System.DateTime priceDate, int marketId, int utilityID, int accountTypeID, int productBrandId, int term);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetSalesChannelPricesByTerm", ReplyAction="http://tempuri.org/IPricingService/GetSalesChannelPricesByTermResponse")]
        System.Threading.Tasks.Task<OrdersAPITests.PricingServiceAPI.WSProductRateResult> GetSalesChannelPricesByTermAsync(int salesChannelId, int channelTypeId, System.DateTime startDate, System.DateTime priceDate, int marketId, int utilityID, int accountTypeID, int productBrandId, int term);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetSalesChannelPricesByTermZone", ReplyAction="http://tempuri.org/IPricingService/GetSalesChannelPricesByTermZoneResponse")]
        OrdersAPITests.PricingServiceAPI.WSProductRateResult GetSalesChannelPricesByTermZone(int salesChannelId, int channelTypeId, System.DateTime startDate, System.DateTime priceDate, int marketId, int utilityID, int accountTypeID, int productBrandId, int term, int zoneId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetSalesChannelPricesByTermZone", ReplyAction="http://tempuri.org/IPricingService/GetSalesChannelPricesByTermZoneResponse")]
        System.Threading.Tasks.Task<OrdersAPITests.PricingServiceAPI.WSProductRateResult> GetSalesChannelPricesByTermZoneAsync(int salesChannelId, int channelTypeId, System.DateTime startDate, System.DateTime priceDate, int marketId, int utilityID, int accountTypeID, int productBrandId, int term, int zoneId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetSalesChannelPricesByTermZoneServiceClass", ReplyAction="http://tempuri.org/IPricingService/GetSalesChannelPricesByTermZoneServiceClassRes" +
            "ponse")]
        OrdersAPITests.PricingServiceAPI.WSProductRateResult GetSalesChannelPricesByTermZoneServiceClass(int salesChannelId, int channelTypeId, System.DateTime startDate, System.DateTime priceDate, int marketId, int utilityID, int accountTypeID, int productBrandId, int term, int zoneId, int serviceClassId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetSalesChannelPricesByTermZoneServiceClass", ReplyAction="http://tempuri.org/IPricingService/GetSalesChannelPricesByTermZoneServiceClassRes" +
            "ponse")]
        System.Threading.Tasks.Task<OrdersAPITests.PricingServiceAPI.WSProductRateResult> GetSalesChannelPricesByTermZoneServiceClassAsync(int salesChannelId, int channelTypeId, System.DateTime startDate, System.DateTime priceDate, int marketId, int utilityID, int accountTypeID, int productBrandId, int term, int zoneId, int serviceClassId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetSalesChannelPricesByPriceDateAndMarket", ReplyAction="http://tempuri.org/IPricingService/GetSalesChannelPricesByPriceDateAndMarketRespo" +
            "nse")]
        OrdersAPITests.PricingServiceAPI.WSProductRateResult GetSalesChannelPricesByPriceDateAndMarket(int salesChannelID, System.DateTime priceDate, string marketCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetSalesChannelPricesByPriceDateAndMarket", ReplyAction="http://tempuri.org/IPricingService/GetSalesChannelPricesByPriceDateAndMarketRespo" +
            "nse")]
        System.Threading.Tasks.Task<OrdersAPITests.PricingServiceAPI.WSProductRateResult> GetSalesChannelPricesByPriceDateAndMarketAsync(int salesChannelID, System.DateTime priceDate, string marketCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetSalesChannelPricesByPriceDateAndMarketID", ReplyAction="http://tempuri.org/IPricingService/GetSalesChannelPricesByPriceDateAndMarketIDRes" +
            "ponse")]
        OrdersAPITests.PricingServiceAPI.WSProductRateResult GetSalesChannelPricesByPriceDateAndMarketID(int salesChannelID, System.DateTime priceDate, int marketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetSalesChannelPricesByPriceDateAndMarketID", ReplyAction="http://tempuri.org/IPricingService/GetSalesChannelPricesByPriceDateAndMarketIDRes" +
            "ponse")]
        System.Threading.Tasks.Task<OrdersAPITests.PricingServiceAPI.WSProductRateResult> GetSalesChannelPricesByPriceDateAndMarketIDAsync(int salesChannelID, System.DateTime priceDate, int marketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetProductBySalesChannelUserName", ReplyAction="http://tempuri.org/IPricingService/GetProductBySalesChannelUserNameResponse")]
        System.Collections.Generic.List<string> GetProductBySalesChannelUserName(string salesChannelUserName, string utilityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetProductBySalesChannelUserName", ReplyAction="http://tempuri.org/IPricingService/GetProductBySalesChannelUserNameResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetProductBySalesChannelUserNameAsync(string salesChannelUserName, string utilityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetProductsBySalesChannel", ReplyAction="http://tempuri.org/IPricingService/GetProductsBySalesChannelResponse")]
        System.Collections.Generic.List<string> GetProductsBySalesChannel(string salesChannelCode, string utilityCode, int accountTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetProductsBySalesChannel", ReplyAction="http://tempuri.org/IPricingService/GetProductsBySalesChannelResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetProductsBySalesChannelAsync(string salesChannelCode, string utilityCode, int accountTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetProductBrandsForDailyPricing", ReplyAction="http://tempuri.org/IPricingService/GetProductBrandsForDailyPricingResponse")]
        System.Collections.Generic.List<OrdersAPITests.PricingServiceAPI.ProductBrand> GetProductBrandsForDailyPricing();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetProductBrandsForDailyPricing", ReplyAction="http://tempuri.org/IPricingService/GetProductBrandsForDailyPricingResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<OrdersAPITests.PricingServiceAPI.ProductBrand>> GetProductBrandsForDailyPricingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetPriceTiers", ReplyAction="http://tempuri.org/IPricingService/GetPriceTiersResponse")]
        System.Collections.Generic.List<OrdersAPITests.PricingServiceAPI.PriceTier> GetPriceTiers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetPriceTiers", ReplyAction="http://tempuri.org/IPricingService/GetPriceTiersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<OrdersAPITests.PricingServiceAPI.PriceTier>> GetPriceTiersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetPricingAccountTypes", ReplyAction="http://tempuri.org/IPricingService/GetPricingAccountTypesResponse")]
        System.Collections.Generic.List<OrdersAPITests.PricingServiceAPI.WSAccountType> GetPricingAccountTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetPricingAccountTypes", ReplyAction="http://tempuri.org/IPricingService/GetPricingAccountTypesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<OrdersAPITests.PricingServiceAPI.WSAccountType>> GetPricingAccountTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetCurrentCrossProductPriceSet", ReplyAction="http://tempuri.org/IPricingService/GetCurrentCrossProductPriceSetResponse")]
        OrdersAPITests.PricingServiceAPI.WSCrossProductPriceSet GetCurrentCrossProductPriceSet();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetCurrentCrossProductPriceSet", ReplyAction="http://tempuri.org/IPricingService/GetCurrentCrossProductPriceSetResponse")]
        System.Threading.Tasks.Task<OrdersAPITests.PricingServiceAPI.WSCrossProductPriceSet> GetCurrentCrossProductPriceSetAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetTodaysPricesByChannelMarketProduct", ReplyAction="http://tempuri.org/IPricingService/GetTodaysPricesByChannelMarketProductResponse")]
        OrdersAPITests.PricingServiceAPI.WSActionResultOfWSProductRate GetTodaysPricesByChannelMarketProduct(int channelId, int marketId, int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetTodaysPricesByChannelMarketProduct", ReplyAction="http://tempuri.org/IPricingService/GetTodaysPricesByChannelMarketProductResponse")]
        System.Threading.Tasks.Task<OrdersAPITests.PricingServiceAPI.WSActionResultOfWSProductRate> GetTodaysPricesByChannelMarketProductAsync(int channelId, int marketId, int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetTodaysPricesByChannelMarketProductCompresse" +
            "d", ReplyAction="http://tempuri.org/IPricingService/GetTodaysPricesByChannelMarketProductCompresse" +
            "dResponse")]
        string GetTodaysPricesByChannelMarketProductCompressed(int channelId, int marketId, int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetTodaysPricesByChannelMarketProductCompresse" +
            "d", ReplyAction="http://tempuri.org/IPricingService/GetTodaysPricesByChannelMarketProductCompresse" +
            "dResponse")]
        System.Threading.Tasks.Task<string> GetTodaysPricesByChannelMarketProductCompressedAsync(int channelId, int marketId, int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetDailyPrices", ReplyAction="http://tempuri.org/IPricingService/GetDailyPricesResponse")]
        OrdersAPITests.PricingServiceAPI.WSActionResultOfWSProductRate GetDailyPrices(int channelId, int marketId, int utilityId, int acctTypeId, System.DateTime signDate, int zoneID, System.DateTime flowStartDate, int productID, int term, int servClassID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetDailyPrices", ReplyAction="http://tempuri.org/IPricingService/GetDailyPricesResponse")]
        System.Threading.Tasks.Task<OrdersAPITests.PricingServiceAPI.WSActionResultOfWSProductRate> GetDailyPricesAsync(int channelId, int marketId, int utilityId, int acctTypeId, System.DateTime signDate, int zoneID, System.DateTime flowStartDate, int productID, int term, int servClassID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetBestDailyPrice", ReplyAction="http://tempuri.org/IPricingService/GetBestDailyPriceResponse")]
        OrdersAPITests.PricingServiceAPI.WSActionResultOfWSProductRate GetBestDailyPrice(int channelId, int marketId, int utilityId, int acctTypeId, System.DateTime signDate, int zoneID, System.DateTime flowStartDate, int productID, int term, int servClassID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetBestDailyPrice", ReplyAction="http://tempuri.org/IPricingService/GetBestDailyPriceResponse")]
        System.Threading.Tasks.Task<OrdersAPITests.PricingServiceAPI.WSActionResultOfWSProductRate> GetBestDailyPriceAsync(int channelId, int marketId, int utilityId, int acctTypeId, System.DateTime signDate, int zoneID, System.DateTime flowStartDate, int productID, int term, int servClassID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetLocationDetailsByZipCode", ReplyAction="http://tempuri.org/IPricingService/GetLocationDetailsByZipCodeResponse")]
        System.Collections.Generic.List<OrdersAPITests.PricingServiceAPI.WSLocationDetails> GetLocationDetailsByZipCode(string zipCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPricingService/GetLocationDetailsByZipCode", ReplyAction="http://tempuri.org/IPricingService/GetLocationDetailsByZipCodeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<OrdersAPITests.PricingServiceAPI.WSLocationDetails>> GetLocationDetailsByZipCodeAsync(string zipCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPricingServiceChannel : OrdersAPITests.PricingServiceAPI.IPricingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PricingServiceClient : System.ServiceModel.ClientBase<OrdersAPITests.PricingServiceAPI.IPricingService>, OrdersAPITests.PricingServiceAPI.IPricingService {
        
        public PricingServiceClient() {
        }
        
        public PricingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PricingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PricingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PricingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Echo(string input) {
            return base.Channel.Echo(input);
        }
        
        public System.Threading.Tasks.Task<string> EchoAsync(string input) {
            return base.Channel.EchoAsync(input);
        }
        
        public OrdersAPITests.PricingServiceAPI.WSProductRateResult GetSalesChannelPrices(int salesChannelId, int channelTypeId, System.DateTime startDate, System.DateTime priceDate, int marketId, int utilityID, int accountTypeID, int productBrandId) {
            return base.Channel.GetSalesChannelPrices(salesChannelId, channelTypeId, startDate, priceDate, marketId, utilityID, accountTypeID, productBrandId);
        }
        
        public System.Threading.Tasks.Task<OrdersAPITests.PricingServiceAPI.WSProductRateResult> GetSalesChannelPricesAsync(int salesChannelId, int channelTypeId, System.DateTime startDate, System.DateTime priceDate, int marketId, int utilityID, int accountTypeID, int productBrandId) {
            return base.Channel.GetSalesChannelPricesAsync(salesChannelId, channelTypeId, startDate, priceDate, marketId, utilityID, accountTypeID, productBrandId);
        }
        
        public OrdersAPITests.PricingServiceAPI.WSProductRateResult GetSalesChannelPricesByTerm(int salesChannelId, int channelTypeId, System.DateTime startDate, System.DateTime priceDate, int marketId, int utilityID, int accountTypeID, int productBrandId, int term) {
            return base.Channel.GetSalesChannelPricesByTerm(salesChannelId, channelTypeId, startDate, priceDate, marketId, utilityID, accountTypeID, productBrandId, term);
        }
        
        public System.Threading.Tasks.Task<OrdersAPITests.PricingServiceAPI.WSProductRateResult> GetSalesChannelPricesByTermAsync(int salesChannelId, int channelTypeId, System.DateTime startDate, System.DateTime priceDate, int marketId, int utilityID, int accountTypeID, int productBrandId, int term) {
            return base.Channel.GetSalesChannelPricesByTermAsync(salesChannelId, channelTypeId, startDate, priceDate, marketId, utilityID, accountTypeID, productBrandId, term);
        }
        
        public OrdersAPITests.PricingServiceAPI.WSProductRateResult GetSalesChannelPricesByTermZone(int salesChannelId, int channelTypeId, System.DateTime startDate, System.DateTime priceDate, int marketId, int utilityID, int accountTypeID, int productBrandId, int term, int zoneId) {
            return base.Channel.GetSalesChannelPricesByTermZone(salesChannelId, channelTypeId, startDate, priceDate, marketId, utilityID, accountTypeID, productBrandId, term, zoneId);
        }
        
        public System.Threading.Tasks.Task<OrdersAPITests.PricingServiceAPI.WSProductRateResult> GetSalesChannelPricesByTermZoneAsync(int salesChannelId, int channelTypeId, System.DateTime startDate, System.DateTime priceDate, int marketId, int utilityID, int accountTypeID, int productBrandId, int term, int zoneId) {
            return base.Channel.GetSalesChannelPricesByTermZoneAsync(salesChannelId, channelTypeId, startDate, priceDate, marketId, utilityID, accountTypeID, productBrandId, term, zoneId);
        }
        
        public OrdersAPITests.PricingServiceAPI.WSProductRateResult GetSalesChannelPricesByTermZoneServiceClass(int salesChannelId, int channelTypeId, System.DateTime startDate, System.DateTime priceDate, int marketId, int utilityID, int accountTypeID, int productBrandId, int term, int zoneId, int serviceClassId) {
            return base.Channel.GetSalesChannelPricesByTermZoneServiceClass(salesChannelId, channelTypeId, startDate, priceDate, marketId, utilityID, accountTypeID, productBrandId, term, zoneId, serviceClassId);
        }
        
        public System.Threading.Tasks.Task<OrdersAPITests.PricingServiceAPI.WSProductRateResult> GetSalesChannelPricesByTermZoneServiceClassAsync(int salesChannelId, int channelTypeId, System.DateTime startDate, System.DateTime priceDate, int marketId, int utilityID, int accountTypeID, int productBrandId, int term, int zoneId, int serviceClassId) {
            return base.Channel.GetSalesChannelPricesByTermZoneServiceClassAsync(salesChannelId, channelTypeId, startDate, priceDate, marketId, utilityID, accountTypeID, productBrandId, term, zoneId, serviceClassId);
        }
        
        public OrdersAPITests.PricingServiceAPI.WSProductRateResult GetSalesChannelPricesByPriceDateAndMarket(int salesChannelID, System.DateTime priceDate, string marketCode) {
            return base.Channel.GetSalesChannelPricesByPriceDateAndMarket(salesChannelID, priceDate, marketCode);
        }
        
        public System.Threading.Tasks.Task<OrdersAPITests.PricingServiceAPI.WSProductRateResult> GetSalesChannelPricesByPriceDateAndMarketAsync(int salesChannelID, System.DateTime priceDate, string marketCode) {
            return base.Channel.GetSalesChannelPricesByPriceDateAndMarketAsync(salesChannelID, priceDate, marketCode);
        }
        
        public OrdersAPITests.PricingServiceAPI.WSProductRateResult GetSalesChannelPricesByPriceDateAndMarketID(int salesChannelID, System.DateTime priceDate, int marketID) {
            return base.Channel.GetSalesChannelPricesByPriceDateAndMarketID(salesChannelID, priceDate, marketID);
        }
        
        public System.Threading.Tasks.Task<OrdersAPITests.PricingServiceAPI.WSProductRateResult> GetSalesChannelPricesByPriceDateAndMarketIDAsync(int salesChannelID, System.DateTime priceDate, int marketID) {
            return base.Channel.GetSalesChannelPricesByPriceDateAndMarketIDAsync(salesChannelID, priceDate, marketID);
        }
        
        public System.Collections.Generic.List<string> GetProductBySalesChannelUserName(string salesChannelUserName, string utilityCode) {
            return base.Channel.GetProductBySalesChannelUserName(salesChannelUserName, utilityCode);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetProductBySalesChannelUserNameAsync(string salesChannelUserName, string utilityCode) {
            return base.Channel.GetProductBySalesChannelUserNameAsync(salesChannelUserName, utilityCode);
        }
        
        public System.Collections.Generic.List<string> GetProductsBySalesChannel(string salesChannelCode, string utilityCode, int accountTypeId) {
            return base.Channel.GetProductsBySalesChannel(salesChannelCode, utilityCode, accountTypeId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetProductsBySalesChannelAsync(string salesChannelCode, string utilityCode, int accountTypeId) {
            return base.Channel.GetProductsBySalesChannelAsync(salesChannelCode, utilityCode, accountTypeId);
        }
        
        public System.Collections.Generic.List<OrdersAPITests.PricingServiceAPI.ProductBrand> GetProductBrandsForDailyPricing() {
            return base.Channel.GetProductBrandsForDailyPricing();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<OrdersAPITests.PricingServiceAPI.ProductBrand>> GetProductBrandsForDailyPricingAsync() {
            return base.Channel.GetProductBrandsForDailyPricingAsync();
        }
        
        public System.Collections.Generic.List<OrdersAPITests.PricingServiceAPI.PriceTier> GetPriceTiers() {
            return base.Channel.GetPriceTiers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<OrdersAPITests.PricingServiceAPI.PriceTier>> GetPriceTiersAsync() {
            return base.Channel.GetPriceTiersAsync();
        }
        
        public System.Collections.Generic.List<OrdersAPITests.PricingServiceAPI.WSAccountType> GetPricingAccountTypes() {
            return base.Channel.GetPricingAccountTypes();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<OrdersAPITests.PricingServiceAPI.WSAccountType>> GetPricingAccountTypesAsync() {
            return base.Channel.GetPricingAccountTypesAsync();
        }
        
        public OrdersAPITests.PricingServiceAPI.WSCrossProductPriceSet GetCurrentCrossProductPriceSet() {
            return base.Channel.GetCurrentCrossProductPriceSet();
        }
        
        public System.Threading.Tasks.Task<OrdersAPITests.PricingServiceAPI.WSCrossProductPriceSet> GetCurrentCrossProductPriceSetAsync() {
            return base.Channel.GetCurrentCrossProductPriceSetAsync();
        }
        
        public OrdersAPITests.PricingServiceAPI.WSActionResultOfWSProductRate GetTodaysPricesByChannelMarketProduct(int channelId, int marketId, int productId) {
            return base.Channel.GetTodaysPricesByChannelMarketProduct(channelId, marketId, productId);
        }
        
        public System.Threading.Tasks.Task<OrdersAPITests.PricingServiceAPI.WSActionResultOfWSProductRate> GetTodaysPricesByChannelMarketProductAsync(int channelId, int marketId, int productId) {
            return base.Channel.GetTodaysPricesByChannelMarketProductAsync(channelId, marketId, productId);
        }
        
        public string GetTodaysPricesByChannelMarketProductCompressed(int channelId, int marketId, int productId) {
            return base.Channel.GetTodaysPricesByChannelMarketProductCompressed(channelId, marketId, productId);
        }
        
        public System.Threading.Tasks.Task<string> GetTodaysPricesByChannelMarketProductCompressedAsync(int channelId, int marketId, int productId) {
            return base.Channel.GetTodaysPricesByChannelMarketProductCompressedAsync(channelId, marketId, productId);
        }
        
        public OrdersAPITests.PricingServiceAPI.WSActionResultOfWSProductRate GetDailyPrices(int channelId, int marketId, int utilityId, int acctTypeId, System.DateTime signDate, int zoneID, System.DateTime flowStartDate, int productID, int term, int servClassID) {
            return base.Channel.GetDailyPrices(channelId, marketId, utilityId, acctTypeId, signDate, zoneID, flowStartDate, productID, term, servClassID);
        }
        
        public System.Threading.Tasks.Task<OrdersAPITests.PricingServiceAPI.WSActionResultOfWSProductRate> GetDailyPricesAsync(int channelId, int marketId, int utilityId, int acctTypeId, System.DateTime signDate, int zoneID, System.DateTime flowStartDate, int productID, int term, int servClassID) {
            return base.Channel.GetDailyPricesAsync(channelId, marketId, utilityId, acctTypeId, signDate, zoneID, flowStartDate, productID, term, servClassID);
        }
        
        public OrdersAPITests.PricingServiceAPI.WSActionResultOfWSProductRate GetBestDailyPrice(int channelId, int marketId, int utilityId, int acctTypeId, System.DateTime signDate, int zoneID, System.DateTime flowStartDate, int productID, int term, int servClassID) {
            return base.Channel.GetBestDailyPrice(channelId, marketId, utilityId, acctTypeId, signDate, zoneID, flowStartDate, productID, term, servClassID);
        }
        
        public System.Threading.Tasks.Task<OrdersAPITests.PricingServiceAPI.WSActionResultOfWSProductRate> GetBestDailyPriceAsync(int channelId, int marketId, int utilityId, int acctTypeId, System.DateTime signDate, int zoneID, System.DateTime flowStartDate, int productID, int term, int servClassID) {
            return base.Channel.GetBestDailyPriceAsync(channelId, marketId, utilityId, acctTypeId, signDate, zoneID, flowStartDate, productID, term, servClassID);
        }
        
        public System.Collections.Generic.List<OrdersAPITests.PricingServiceAPI.WSLocationDetails> GetLocationDetailsByZipCode(string zipCode) {
            return base.Channel.GetLocationDetailsByZipCode(zipCode);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<OrdersAPITests.PricingServiceAPI.WSLocationDetails>> GetLocationDetailsByZipCodeAsync(string zipCode) {
            return base.Channel.GetLocationDetailsByZipCodeAsync(zipCode);
        }
    }
}
