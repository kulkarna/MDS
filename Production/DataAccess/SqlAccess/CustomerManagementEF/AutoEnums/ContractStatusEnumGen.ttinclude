<#@ template debug="false" hostSpecific="true" #>
<#@ output extension=".generated.cs" #>
<#@ Assembly Name="EnvDTE" #>
<#@ Assembly Name="System.Data" #>
<#@ Assembly Name="System.Configuration" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#
    string tableName = Path.GetFileNameWithoutExtension(Host.TemplateFile);
    string path = Path.GetDirectoryName(Host.TemplateFile);
    string columnId = tableName + "ID";
    string columnName = "Descp";
    string columnDescription = "Descp";
//    string connectionString = "data source=LPCD7X64-013\\MSSQL2008;initial catalog=LibertyPower;integrated security=True";
	string connectionString = System.Configuration.ConfigurationManager.ConnectionStrings["LibertyPowerConnectionString"].ToString();
 
    // Get containing project
    IServiceProvider serviceProvider = (IServiceProvider)Host;
    DTE dte = (DTE)serviceProvider.GetService(typeof(DTE));
    Project project = dte.Solution.FindProjectItem(Host.TemplateFile).ContainingProject;
#>
//------------------------------------------------------------------------------
// <auto-generated>
//    This file was generated by EnumGenerator.ttinclude
//    Manual changes to this file will be overwritten when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;


namespace <#= project.Properties.Item("DefaultNamespace").Value #><#= Path.GetDirectoryName(Host.TemplateFile).Remove(0, Path.GetDirectoryName(project.FileName).Length).Replace("\\", ".") #>
{
	/// <summary>
	/// Auto generated enumeration for <#= tableName #> lookup table
	/// </summary>
	[GeneratedCode("TextTemplatingFileGenerator", "10")]
	public enum <#= tableName #>Enum
	{
<#
		SqlConnection conn = new SqlConnection(connectionString);
		string command = string.Format("select {0}, {1}, {2} from {3} order by {0}", columnId, columnName, columnDescription, tableName);
		SqlCommand comm = new SqlCommand(command, conn);
 
		conn.Open();
 
		SqlDataReader reader = comm.ExecuteReader();
		bool loop = reader.Read();
 
    while(loop)
    {
		string enumDescription = reader[columnDescription].ToString();
#>		<#= reader[columnName] #> = <#= reader[columnId] #><# loop = reader.Read(); #><#= loop ? ",		//" : "		//" #><#= enumDescription #>
<#	}
#>
	}
}
<#+
    private string Pascalize(object value)
    {
        Regex rx = new Regex(@"(?:[^a-zA-Z0-9]*)(?<first>[a-zA-Z0-9])(?<reminder>[a-zA-Z0-9]*)(?:[^a-zA-Z0-9]*)");
        return rx.Replace(value.ToString(), m => m.Groups["first"].ToString().ToUpper() + m.Groups["reminder"].ToString().ToLower());
    }
#>
