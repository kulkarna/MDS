//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4206
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.4206.
// 
#pragma warning disable 1591

namespace LibertyPower.DataAccess.WebServiceAccess.IstaWebService.IstaBillingService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="RateSoap", Namespace="https://services.ista-billing.com/api")]
    public partial class Rate : Microsoft.Web.Services2.WebServicesClientProtocol
    {
        
        private System.Threading.SendOrPostCallback IsAliveOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListRatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListRates1OperationCompleted;
        
        private System.Threading.SendOrPostCallback ListRateDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListRateDetails1OperationCompleted;
        
        private System.Threading.SendOrPostCallback ListRateDetails2OperationCompleted;
        
        private System.Threading.SendOrPostCallback ListRateDetails3OperationCompleted;
        
        private System.Threading.SendOrPostCallback ListRateReadyCustomersOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListUnbilledConsumptionCustomersOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateRateAmountOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateRateAmount1OperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListRateIndexTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListRateIndexRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateNewRateIndexRangeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateNewRateForcastEntryOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateContractVolumeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Rate() {
            this.Url = global::LibertyPower.DataAccess.WebServiceAccess.IstaWebService.Properties.Settings.Default.IstaWebService_IstaBillingService_Rate;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event IsAliveCompletedEventHandler IsAliveCompleted;
        
        /// <remarks/>
        public event ListRatesCompletedEventHandler ListRatesCompleted;
        
        /// <remarks/>
        public event ListRates1CompletedEventHandler ListRates1Completed;
        
        /// <remarks/>
        public event ListRateDetailsCompletedEventHandler ListRateDetailsCompleted;
        
        /// <remarks/>
        public event ListRateDetails1CompletedEventHandler ListRateDetails1Completed;
        
        /// <remarks/>
        public event ListRateDetails2CompletedEventHandler ListRateDetails2Completed;
        
        /// <remarks/>
        public event ListRateDetails3CompletedEventHandler ListRateDetails3Completed;
        
        /// <remarks/>
        public event ListRateReadyCustomersCompletedEventHandler ListRateReadyCustomersCompleted;
        
        /// <remarks/>
        public event ListUnbilledConsumptionCustomersCompletedEventHandler ListUnbilledConsumptionCustomersCompleted;
        
        /// <remarks/>
        public event UpdateRateAmountCompletedEventHandler UpdateRateAmountCompleted;
        
        /// <remarks/>
        public event UpdateRateAmount1CompletedEventHandler UpdateRateAmount1Completed;
        
        /// <remarks/>
        public event LoadCompletedEventHandler LoadCompleted;
        
        /// <remarks/>
        public event ListRateIndexTypeCompletedEventHandler ListRateIndexTypeCompleted;
        
        /// <remarks/>
        public event ListRateIndexRangeCompletedEventHandler ListRateIndexRangeCompleted;
        
        /// <remarks/>
        public event CreateNewRateIndexRangeCompletedEventHandler CreateNewRateIndexRangeCompleted;
        
        /// <remarks/>
        public event CreateNewRateForcastEntryCompletedEventHandler CreateNewRateForcastEntryCompleted;
        
        /// <remarks/>
        public event CreateContractVolumeCompletedEventHandler CreateContractVolumeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.ista-billing.com/api/IsAlive", RequestNamespace="https://services.ista-billing.com/api", ResponseNamespace="https://services.ista-billing.com/api", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsAlive() {
            object[] results = this.Invoke("IsAlive", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsAliveAsync() {
            this.IsAliveAsync(null);
        }
        
        /// <remarks/>
        public void IsAliveAsync(object userState) {
            if ((this.IsAliveOperationCompleted == null)) {
                this.IsAliveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsAliveOperationCompleted);
            }
            this.InvokeAsync("IsAlive", new object[0], this.IsAliveOperationCompleted, userState);
        }
        
        private void OnIsAliveOperationCompleted(object arg) {
            if ((this.IsAliveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsAliveCompleted(this, new IsAliveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.ista-billing.com/api/ListRates", RequestNamespace="https://services.ista-billing.com/api", ResponseNamespace="https://services.ista-billing.com/api", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RateDS ListRates() {
            object[] results = this.Invoke("ListRates", new object[0]);
            return ((RateDS)(results[0]));
        }
        
        /// <remarks/>
        public void ListRatesAsync() {
            this.ListRatesAsync(null);
        }
        
        /// <remarks/>
        public void ListRatesAsync(object userState) {
            if ((this.ListRatesOperationCompleted == null)) {
                this.ListRatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListRatesOperationCompleted);
            }
            this.InvokeAsync("ListRates", new object[0], this.ListRatesOperationCompleted, userState);
        }
        
        private void OnListRatesOperationCompleted(object arg) {
            if ((this.ListRatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListRatesCompleted(this, new ListRatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ListRates1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.ista-billing.com/api/ListRates2", RequestElementName="ListRates2", RequestNamespace="https://services.ista-billing.com/api", ResponseElementName="ListRates2Response", ResponseNamespace="https://services.ista-billing.com/api", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ListRates2Result")]
        public RateDS ListRates(int cspId) {
            object[] results = this.Invoke("ListRates1", new object[] {
                        cspId});
            return ((RateDS)(results[0]));
        }
        
        /// <remarks/>
        public void ListRates1Async(int cspId) {
            this.ListRates1Async(cspId, null);
        }
        
        /// <remarks/>
        public void ListRates1Async(int cspId, object userState) {
            if ((this.ListRates1OperationCompleted == null)) {
                this.ListRates1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnListRates1OperationCompleted);
            }
            this.InvokeAsync("ListRates1", new object[] {
                        cspId}, this.ListRates1OperationCompleted, userState);
        }
        
        private void OnListRates1OperationCompleted(object arg) {
            if ((this.ListRates1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListRates1Completed(this, new ListRates1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.ista-billing.com/api/ListRateDetails", RequestNamespace="https://services.ista-billing.com/api", ResponseNamespace="https://services.ista-billing.com/api", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RateDS ListRateDetails() {
            object[] results = this.Invoke("ListRateDetails", new object[0]);
            return ((RateDS)(results[0]));
        }
        
        /// <remarks/>
        public void ListRateDetailsAsync() {
            this.ListRateDetailsAsync(null);
        }
        
        /// <remarks/>
        public void ListRateDetailsAsync(object userState) {
            if ((this.ListRateDetailsOperationCompleted == null)) {
                this.ListRateDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListRateDetailsOperationCompleted);
            }
            this.InvokeAsync("ListRateDetails", new object[0], this.ListRateDetailsOperationCompleted, userState);
        }
        
        private void OnListRateDetailsOperationCompleted(object arg) {
            if ((this.ListRateDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListRateDetailsCompleted(this, new ListRateDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ListRateDetails1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.ista-billing.com/api/ListRateDetails2", RequestElementName="ListRateDetails2", RequestNamespace="https://services.ista-billing.com/api", ResponseElementName="ListRateDetails2Response", ResponseNamespace="https://services.ista-billing.com/api", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ListRateDetails2Result")]
        public RateDS ListRateDetails(int rateId) {
            object[] results = this.Invoke("ListRateDetails1", new object[] {
                        rateId});
            return ((RateDS)(results[0]));
        }
        
        /// <remarks/>
        public void ListRateDetails1Async(int rateId) {
            this.ListRateDetails1Async(rateId, null);
        }
        
        /// <remarks/>
        public void ListRateDetails1Async(int rateId, object userState) {
            if ((this.ListRateDetails1OperationCompleted == null)) {
                this.ListRateDetails1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnListRateDetails1OperationCompleted);
            }
            this.InvokeAsync("ListRateDetails1", new object[] {
                        rateId}, this.ListRateDetails1OperationCompleted, userState);
        }
        
        private void OnListRateDetails1OperationCompleted(object arg) {
            if ((this.ListRateDetails1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListRateDetails1Completed(this, new ListRateDetails1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ListRateDetails2")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.ista-billing.com/api/ListRateDetails3", RequestElementName="ListRateDetails3", RequestNamespace="https://services.ista-billing.com/api", ResponseElementName="ListRateDetails3Response", ResponseNamespace="https://services.ista-billing.com/api", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ListRateDetails3Result")]
        public RateDS ListRateDetails(System.DateTime dateFrom, System.DateTime dateTo, int custId) {
            object[] results = this.Invoke("ListRateDetails2", new object[] {
                        dateFrom,
                        dateTo,
                        custId});
            return ((RateDS)(results[0]));
        }
        
        /// <remarks/>
        public void ListRateDetails2Async(System.DateTime dateFrom, System.DateTime dateTo, int custId) {
            this.ListRateDetails2Async(dateFrom, dateTo, custId, null);
        }
        
        /// <remarks/>
        public void ListRateDetails2Async(System.DateTime dateFrom, System.DateTime dateTo, int custId, object userState) {
            if ((this.ListRateDetails2OperationCompleted == null)) {
                this.ListRateDetails2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnListRateDetails2OperationCompleted);
            }
            this.InvokeAsync("ListRateDetails2", new object[] {
                        dateFrom,
                        dateTo,
                        custId}, this.ListRateDetails2OperationCompleted, userState);
        }
        
        private void OnListRateDetails2OperationCompleted(object arg) {
            if ((this.ListRateDetails2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListRateDetails2Completed(this, new ListRateDetails2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ListRateDetails3")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.ista-billing.com/api/ListRateDetails4", RequestElementName="ListRateDetails4", RequestNamespace="https://services.ista-billing.com/api", ResponseElementName="ListRateDetails4Response", ResponseNamespace="https://services.ista-billing.com/api", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ListRateDetails4Result")]
        public RateDS ListRateDetails(int rateId, System.DateTime dateFrom, System.DateTime dateTo) {
            object[] results = this.Invoke("ListRateDetails3", new object[] {
                        rateId,
                        dateFrom,
                        dateTo});
            return ((RateDS)(results[0]));
        }
        
        /// <remarks/>
        public void ListRateDetails3Async(int rateId, System.DateTime dateFrom, System.DateTime dateTo) {
            this.ListRateDetails3Async(rateId, dateFrom, dateTo, null);
        }
        
        /// <remarks/>
        public void ListRateDetails3Async(int rateId, System.DateTime dateFrom, System.DateTime dateTo, object userState) {
            if ((this.ListRateDetails3OperationCompleted == null)) {
                this.ListRateDetails3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnListRateDetails3OperationCompleted);
            }
            this.InvokeAsync("ListRateDetails3", new object[] {
                        rateId,
                        dateFrom,
                        dateTo}, this.ListRateDetails3OperationCompleted, userState);
        }
        
        private void OnListRateDetails3OperationCompleted(object arg) {
            if ((this.ListRateDetails3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListRateDetails3Completed(this, new ListRateDetails3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.ista-billing.com/api/ListRateReadyCustomers", RequestNamespace="https://services.ista-billing.com/api", ResponseNamespace="https://services.ista-billing.com/api", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ListRateReadyCustomers(System.DateTime meterReadDate) {
            object[] results = this.Invoke("ListRateReadyCustomers", new object[] {
                        meterReadDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ListRateReadyCustomersAsync(System.DateTime meterReadDate) {
            this.ListRateReadyCustomersAsync(meterReadDate, null);
        }
        
        /// <remarks/>
        public void ListRateReadyCustomersAsync(System.DateTime meterReadDate, object userState) {
            if ((this.ListRateReadyCustomersOperationCompleted == null)) {
                this.ListRateReadyCustomersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListRateReadyCustomersOperationCompleted);
            }
            this.InvokeAsync("ListRateReadyCustomers", new object[] {
                        meterReadDate}, this.ListRateReadyCustomersOperationCompleted, userState);
        }
        
        private void OnListRateReadyCustomersOperationCompleted(object arg) {
            if ((this.ListRateReadyCustomersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListRateReadyCustomersCompleted(this, new ListRateReadyCustomersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.ista-billing.com/api/ListUnbilledConsumptionCustomers", RequestNamespace="https://services.ista-billing.com/api", ResponseNamespace="https://services.ista-billing.com/api", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ListUnbilledConsumptionCustomers() {
            object[] results = this.Invoke("ListUnbilledConsumptionCustomers", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ListUnbilledConsumptionCustomersAsync() {
            this.ListUnbilledConsumptionCustomersAsync(null);
        }
        
        /// <remarks/>
        public void ListUnbilledConsumptionCustomersAsync(object userState) {
            if ((this.ListUnbilledConsumptionCustomersOperationCompleted == null)) {
                this.ListUnbilledConsumptionCustomersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListUnbilledConsumptionCustomersOperationCompleted);
            }
            this.InvokeAsync("ListUnbilledConsumptionCustomers", new object[0], this.ListUnbilledConsumptionCustomersOperationCompleted, userState);
        }
        
        private void OnListUnbilledConsumptionCustomersOperationCompleted(object arg) {
            if ((this.ListUnbilledConsumptionCustomersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListUnbilledConsumptionCustomersCompleted(this, new ListUnbilledConsumptionCustomersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.ista-billing.com/api/UpdateRateAmount", RequestNamespace="https://services.ista-billing.com/api", ResponseNamespace="https://services.ista-billing.com/api", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateRateAmount(int custID, decimal rateAmount, System.DateTime effectiveDate) {
            this.Invoke("UpdateRateAmount", new object[] {
                        custID,
                        rateAmount,
                        effectiveDate});
        }
        
        /// <remarks/>
        public void UpdateRateAmountAsync(int custID, decimal rateAmount, System.DateTime effectiveDate) {
            this.UpdateRateAmountAsync(custID, rateAmount, effectiveDate, null);
        }
        
        /// <remarks/>
        public void UpdateRateAmountAsync(int custID, decimal rateAmount, System.DateTime effectiveDate, object userState) {
            if ((this.UpdateRateAmountOperationCompleted == null)) {
                this.UpdateRateAmountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateRateAmountOperationCompleted);
            }
            this.InvokeAsync("UpdateRateAmount", new object[] {
                        custID,
                        rateAmount,
                        effectiveDate}, this.UpdateRateAmountOperationCompleted, userState);
        }
        
        private void OnUpdateRateAmountOperationCompleted(object arg) {
            if ((this.UpdateRateAmountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateRateAmountCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="UpdateRateAmount1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.ista-billing.com/api/UpdateRateAmount2", RequestElementName="UpdateRateAmount2", RequestNamespace="https://services.ista-billing.com/api", ResponseElementName="UpdateRateAmount2Response", ResponseNamespace="https://services.ista-billing.com/api", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateRateAmount(int custID, decimal rateAmount, System.DateTime effectiveDate, System.DateTime expirationDate) {
            this.Invoke("UpdateRateAmount1", new object[] {
                        custID,
                        rateAmount,
                        effectiveDate,
                        expirationDate});
        }
        
        /// <remarks/>
        public void UpdateRateAmount1Async(int custID, decimal rateAmount, System.DateTime effectiveDate, System.DateTime expirationDate) {
            this.UpdateRateAmount1Async(custID, rateAmount, effectiveDate, expirationDate, null);
        }
        
        /// <remarks/>
        public void UpdateRateAmount1Async(int custID, decimal rateAmount, System.DateTime effectiveDate, System.DateTime expirationDate, object userState) {
            if ((this.UpdateRateAmount1OperationCompleted == null)) {
                this.UpdateRateAmount1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateRateAmount1OperationCompleted);
            }
            this.InvokeAsync("UpdateRateAmount1", new object[] {
                        custID,
                        rateAmount,
                        effectiveDate,
                        expirationDate}, this.UpdateRateAmount1OperationCompleted, userState);
        }
        
        private void OnUpdateRateAmount1OperationCompleted(object arg) {
            if ((this.UpdateRateAmount1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateRateAmount1Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.ista-billing.com/api/Load", RequestNamespace="https://services.ista-billing.com/api", ResponseNamespace="https://services.ista-billing.com/api", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Load(string accountNo) {
            object[] results = this.Invoke("Load", new object[] {
                        accountNo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LoadAsync(string accountNo) {
            this.LoadAsync(accountNo, null);
        }
        
        /// <remarks/>
        public void LoadAsync(string accountNo, object userState) {
            if ((this.LoadOperationCompleted == null)) {
                this.LoadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadOperationCompleted);
            }
            this.InvokeAsync("Load", new object[] {
                        accountNo}, this.LoadOperationCompleted, userState);
        }
        
        private void OnLoadOperationCompleted(object arg) {
            if ((this.LoadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadCompleted(this, new LoadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.ista-billing.com/api/ListRateIndexType", RequestNamespace="https://services.ista-billing.com/api", ResponseNamespace="https://services.ista-billing.com/api", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public WSRateIndexType[] ListRateIndexType(bool activeOnly) {
            object[] results = this.Invoke("ListRateIndexType", new object[] {
                        activeOnly});
            return ((WSRateIndexType[])(results[0]));
        }
        
        /// <remarks/>
        public void ListRateIndexTypeAsync(bool activeOnly) {
            this.ListRateIndexTypeAsync(activeOnly, null);
        }
        
        /// <remarks/>
        public void ListRateIndexTypeAsync(bool activeOnly, object userState) {
            if ((this.ListRateIndexTypeOperationCompleted == null)) {
                this.ListRateIndexTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListRateIndexTypeOperationCompleted);
            }
            this.InvokeAsync("ListRateIndexType", new object[] {
                        activeOnly}, this.ListRateIndexTypeOperationCompleted, userState);
        }
        
        private void OnListRateIndexTypeOperationCompleted(object arg) {
            if ((this.ListRateIndexTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListRateIndexTypeCompleted(this, new ListRateIndexTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.ista-billing.com/api/ListRateIndexRange", RequestNamespace="https://services.ista-billing.com/api", ResponseNamespace="https://services.ista-billing.com/api", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public WSRateIndexRange[] ListRateIndexRange(int rateIndexRangeId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> dateFrom, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> dateTo) {
            object[] results = this.Invoke("ListRateIndexRange", new object[] {
                        rateIndexRangeId,
                        dateFrom,
                        dateTo});
            return ((WSRateIndexRange[])(results[0]));
        }
        
        /// <remarks/>
        public void ListRateIndexRangeAsync(int rateIndexRangeId, System.Nullable<System.DateTime> dateFrom, System.Nullable<System.DateTime> dateTo) {
            this.ListRateIndexRangeAsync(rateIndexRangeId, dateFrom, dateTo, null);
        }
        
        /// <remarks/>
        public void ListRateIndexRangeAsync(int rateIndexRangeId, System.Nullable<System.DateTime> dateFrom, System.Nullable<System.DateTime> dateTo, object userState) {
            if ((this.ListRateIndexRangeOperationCompleted == null)) {
                this.ListRateIndexRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListRateIndexRangeOperationCompleted);
            }
            this.InvokeAsync("ListRateIndexRange", new object[] {
                        rateIndexRangeId,
                        dateFrom,
                        dateTo}, this.ListRateIndexRangeOperationCompleted, userState);
        }
        
        private void OnListRateIndexRangeOperationCompleted(object arg) {
            if ((this.ListRateIndexRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListRateIndexRangeCompleted(this, new ListRateIndexRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.ista-billing.com/api/CreateNewRateIndexRange", RequestNamespace="https://services.ista-billing.com/api", ResponseNamespace="https://services.ista-billing.com/api", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateNewRateIndexRange(WSRateIndexRange rateIndexRange) {
            object[] results = this.Invoke("CreateNewRateIndexRange", new object[] {
                        rateIndexRange});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateNewRateIndexRangeAsync(WSRateIndexRange rateIndexRange) {
            this.CreateNewRateIndexRangeAsync(rateIndexRange, null);
        }
        
        /// <remarks/>
        public void CreateNewRateIndexRangeAsync(WSRateIndexRange rateIndexRange, object userState) {
            if ((this.CreateNewRateIndexRangeOperationCompleted == null)) {
                this.CreateNewRateIndexRangeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewRateIndexRangeOperationCompleted);
            }
            this.InvokeAsync("CreateNewRateIndexRange", new object[] {
                        rateIndexRange}, this.CreateNewRateIndexRangeOperationCompleted, userState);
        }
        
        private void OnCreateNewRateIndexRangeOperationCompleted(object arg) {
            if ((this.CreateNewRateIndexRangeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewRateIndexRangeCompleted(this, new CreateNewRateIndexRangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.ista-billing.com/api/CreateNewRateForcastEntry", RequestNamespace="https://services.ista-billing.com/api", ResponseNamespace="https://services.ista-billing.com/api", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateNewRateForcastEntry(WSRateForecast rateForecast) {
            this.Invoke("CreateNewRateForcastEntry", new object[] {
                        rateForecast});
        }
        
        /// <remarks/>
        public void CreateNewRateForcastEntryAsync(WSRateForecast rateForecast) {
            this.CreateNewRateForcastEntryAsync(rateForecast, null);
        }
        
        /// <remarks/>
        public void CreateNewRateForcastEntryAsync(WSRateForecast rateForecast, object userState) {
            if ((this.CreateNewRateForcastEntryOperationCompleted == null)) {
                this.CreateNewRateForcastEntryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewRateForcastEntryOperationCompleted);
            }
            this.InvokeAsync("CreateNewRateForcastEntry", new object[] {
                        rateForecast}, this.CreateNewRateForcastEntryOperationCompleted, userState);
        }
        
        private void OnCreateNewRateForcastEntryOperationCompleted(object arg) {
            if ((this.CreateNewRateForcastEntryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewRateForcastEntryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.ista-billing.com/api/CreateContractVolume", RequestNamespace="https://services.ista-billing.com/api", ResponseNamespace="https://services.ista-billing.com/api", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateContractVolume(WSContractVolume contractVolume) {
            this.Invoke("CreateContractVolume", new object[] {
                        contractVolume});
        }
        
        /// <remarks/>
        public void CreateContractVolumeAsync(WSContractVolume contractVolume) {
            this.CreateContractVolumeAsync(contractVolume, null);
        }
        
        /// <remarks/>
        public void CreateContractVolumeAsync(WSContractVolume contractVolume, object userState) {
            if ((this.CreateContractVolumeOperationCompleted == null)) {
                this.CreateContractVolumeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateContractVolumeOperationCompleted);
            }
            this.InvokeAsync("CreateContractVolume", new object[] {
                        contractVolume}, this.CreateContractVolumeOperationCompleted, userState);
        }
        
        private void OnCreateContractVolumeOperationCompleted(object arg) {
            if ((this.CreateContractVolumeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateContractVolumeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    // This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("RateDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class RateDS : global::System.Data.DataSet {
        
        private RateDetailDSDataTable tableRateDetailDS;
        
        private RateDetailsDataTable tableRateDetails;
        
        private RatesDataTable tableRates;
        
        private PropertyRatesDataTable tablePropertyRates;
        
        private global::System.Data.DataRelation relationRateDetailDS_RateDetail;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RateDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected RateDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["RateDetailDS"] != null)) {
                    base.Tables.Add(new RateDetailDSDataTable(ds.Tables["RateDetailDS"]));
                }
                if ((ds.Tables["RateDetail"] != null)) {
                    base.Tables.Add(new RateDetailsDataTable(ds.Tables["RateDetail"]));
                }
                if ((ds.Tables["Rate"] != null)) {
                    base.Tables.Add(new RatesDataTable(ds.Tables["Rate"]));
                }
                if ((ds.Tables["PropertyRate"] != null)) {
                    base.Tables.Add(new PropertyRatesDataTable(ds.Tables["PropertyRate"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RateDetailDSDataTable RateDetailDS {
            get {
                return this.tableRateDetailDS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RateDetailsDataTable RateDetails {
            get {
                return this.tableRateDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RatesDataTable Rates {
            get {
                return this.tableRates;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PropertyRatesDataTable PropertyRates {
            get {
                return this.tablePropertyRates;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            RateDS cln = ((RateDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["RateDetailDS"] != null)) {
                    base.Tables.Add(new RateDetailDSDataTable(ds.Tables["RateDetailDS"]));
                }
                if ((ds.Tables["RateDetail"] != null)) {
                    base.Tables.Add(new RateDetailsDataTable(ds.Tables["RateDetail"]));
                }
                if ((ds.Tables["Rate"] != null)) {
                    base.Tables.Add(new RatesDataTable(ds.Tables["Rate"]));
                }
                if ((ds.Tables["PropertyRate"] != null)) {
                    base.Tables.Add(new PropertyRatesDataTable(ds.Tables["PropertyRate"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableRateDetailDS = ((RateDetailDSDataTable)(base.Tables["RateDetailDS"]));
            if ((initTable == true)) {
                if ((this.tableRateDetailDS != null)) {
                    this.tableRateDetailDS.InitVars();
                }
            }
            this.tableRateDetails = ((RateDetailsDataTable)(base.Tables["RateDetail"]));
            if ((initTable == true)) {
                if ((this.tableRateDetails != null)) {
                    this.tableRateDetails.InitVars();
                }
            }
            this.tableRates = ((RatesDataTable)(base.Tables["Rate"]));
            if ((initTable == true)) {
                if ((this.tableRates != null)) {
                    this.tableRates.InitVars();
                }
            }
            this.tablePropertyRates = ((PropertyRatesDataTable)(base.Tables["PropertyRate"]));
            if ((initTable == true)) {
                if ((this.tablePropertyRates != null)) {
                    this.tablePropertyRates.InitVars();
                }
            }
            this.relationRateDetailDS_RateDetail = this.Relations["RateDetailDS_RateDetail"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "RateDS";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableRateDetailDS = new RateDetailDSDataTable();
            base.Tables.Add(this.tableRateDetailDS);
            this.tableRateDetails = new RateDetailsDataTable();
            base.Tables.Add(this.tableRateDetails);
            this.tableRates = new RatesDataTable();
            base.Tables.Add(this.tableRates);
            this.tablePropertyRates = new PropertyRatesDataTable();
            base.Tables.Add(this.tablePropertyRates);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("RateDetailDS_RateDetail", new global::System.Data.DataColumn[] {
                        this.tableRateDetailDS.RateDetailDS_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRateDetails.RateDetailDS_IdColumn});
            this.tableRateDetails.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationRateDetailDS_RateDetail = new global::System.Data.DataRelation("RateDetailDS_RateDetail", new global::System.Data.DataColumn[] {
                        this.tableRateDetailDS.RateDetailDS_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRateDetails.RateDetailDS_IdColumn}, false);
            this.relationRateDetailDS_RateDetail.Nested = true;
            this.Relations.Add(this.relationRateDetailDS_RateDetail);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRateDetailDS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRateDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRates() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePropertyRates() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            RateDS ds = new RateDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void RateDetailDSRowChangeEventHandler(object sender, RateDetailDSRowChangeEvent e);
        
        public delegate void RateDetailChangeEventHandler(object sender, RateDetailChangeEvent e);
        
        public delegate void RateChangeEventHandler(object sender, RateChangeEvent e);
        
        public delegate void PropertyRateChangeEventHandler(object sender, PropertyRateChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RateDetailDSDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRateDetailDS_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateDetailDSDataTable() {
                this.TableName = "RateDetailDS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RateDetailDSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RateDetailDSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateDetailDS_IdColumn {
                get {
                    return this.columnRateDetailDS_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateDetailDSRow this[int index] {
                get {
                    return ((RateDetailDSRow)(this.Rows[index]));
                }
            }
            
            public event RateDetailDSRowChangeEventHandler RateDetailDSRowChanging;
            
            public event RateDetailDSRowChangeEventHandler RateDetailDSRowChanged;
            
            public event RateDetailDSRowChangeEventHandler RateDetailDSRowDeleting;
            
            public event RateDetailDSRowChangeEventHandler RateDetailDSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRateDetailDSRow(RateDetailDSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateDetailDSRow AddRateDetailDSRow() {
                RateDetailDSRow rowRateDetailDSRow = ((RateDetailDSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null};
                rowRateDetailDSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRateDetailDSRow);
                return rowRateDetailDSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RateDetailDSDataTable cln = ((RateDetailDSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RateDetailDSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRateDetailDS_Id = base.Columns["RateDetailDS_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRateDetailDS_Id = new global::System.Data.DataColumn("RateDetailDS_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRateDetailDS_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRateDetailDS_Id}, true));
                this.columnRateDetailDS_Id.AutoIncrement = true;
                this.columnRateDetailDS_Id.AllowDBNull = false;
                this.columnRateDetailDS_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateDetailDSRow NewRateDetailDSRow() {
                return ((RateDetailDSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RateDetailDSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RateDetailDSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RateDetailDSRowChanged != null)) {
                    this.RateDetailDSRowChanged(this, new RateDetailDSRowChangeEvent(((RateDetailDSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RateDetailDSRowChanging != null)) {
                    this.RateDetailDSRowChanging(this, new RateDetailDSRowChangeEvent(((RateDetailDSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RateDetailDSRowDeleted != null)) {
                    this.RateDetailDSRowDeleted(this, new RateDetailDSRowChangeEvent(((RateDetailDSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RateDetailDSRowDeleting != null)) {
                    this.RateDetailDSRowDeleting(this, new RateDetailDSRowChangeEvent(((RateDetailDSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRateDetailDSRow(RateDetailDSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RateDS ds = new RateDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RateDetailDSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RateDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRateDetailID;
            
            private global::System.Data.DataColumn columnRateID;
            
            private global::System.Data.DataColumn columnPremiseID;
            
            private global::System.Data.DataColumn columnCategoryID;
            
            private global::System.Data.DataColumn columnTaxCategoryID;
            
            private global::System.Data.DataColumn columnRateTypeID;
            
            private global::System.Data.DataColumn columnRateDescriptionID;
            
            private global::System.Data.DataColumn columnServiceTypeID;
            
            private global::System.Data.DataColumn columnConsUnitID;
            
            private global::System.Data.DataColumn columnUtilityID;
            
            private global::System.Data.DataColumn columnUtilityInvoiceTemplateDetailID;
            
            private global::System.Data.DataColumn columnEffectiveDate;
            
            private global::System.Data.DataColumn columnExpirationDate;
            
            private global::System.Data.DataColumn columnRateAmount;
            
            private global::System.Data.DataColumn columnMinAmount;
            
            private global::System.Data.DataColumn columnMaxAmount;
            
            private global::System.Data.DataColumn columnGLAcct;
            
            private global::System.Data.DataColumn columnRangeLower;
            
            private global::System.Data.DataColumn columnRangeUpper;
            
            private global::System.Data.DataColumn columnCustType;
            
            private global::System.Data.DataColumn columnGraduated;
            
            private global::System.Data.DataColumn columnProgressive;
            
            private global::System.Data.DataColumn columnAmountCap;
            
            private global::System.Data.DataColumn columnMaxRateAmount;
            
            private global::System.Data.DataColumn columnMinRateAmount;
            
            private global::System.Data.DataColumn columnCategoryRollup;
            
            private global::System.Data.DataColumn columnTaxable;
            
            private global::System.Data.DataColumn columnChargeType;
            
            private global::System.Data.DataColumn columnMiscData1;
            
            private global::System.Data.DataColumn columnBuilding;
            
            private global::System.Data.DataColumn columnRateAmount2;
            
            private global::System.Data.DataColumn columnRateAmount3;
            
            private global::System.Data.DataColumn columnFixedAdder;
            
            private global::System.Data.DataColumn columnFixedCapRate;
            
            private global::System.Data.DataColumn columnScaleFactor1;
            
            private global::System.Data.DataColumn columnScaleFactor2;
            
            private global::System.Data.DataColumn columnCategoryDescription;
            
            private global::System.Data.DataColumn columnPrintOrder;
            
            private global::System.Data.DataColumn columnRollupFlag;
            
            private global::System.Data.DataColumn columnRateDescriptionType;
            
            private global::System.Data.DataColumn columnRateDescription;
            
            private global::System.Data.DataColumn columnGroupCode;
            
            private global::System.Data.DataColumn columnItemCode;
            
            private global::System.Data.DataColumn columnRateTypeCategoryID;
            
            private global::System.Data.DataColumn columnRateTypeDescription;
            
            private global::System.Data.DataColumn columnRateTypeProgID;
            
            private global::System.Data.DataColumn columnRateTypeCategoryDescription;
            
            private global::System.Data.DataColumn columnServiceTypeCode;
            
            private global::System.Data.DataColumn columnServiceTypeDescription;
            
            private global::System.Data.DataColumn columnConsumptionUnit;
            
            private global::System.Data.DataColumn columnConsumptionUnitMultiplier;
            
            private global::System.Data.DataColumn columnConsumptionStandardUnit;
            
            private global::System.Data.DataColumn columnConsumptionUnitDescription;
            
            private global::System.Data.DataColumn columnConsumptionUnitType;
            
            private global::System.Data.DataColumn columnAssemblyName;
            
            private global::System.Data.DataColumn columnClassName;
            
            private global::System.Data.DataColumn columnIsCustomerRate;
            
            private global::System.Data.DataColumn columnIsGraduated;
            
            private global::System.Data.DataColumn columnIsMajority;
            
            private global::System.Data.DataColumn columnMargin;
            
            private global::System.Data.DataColumn columnUsageClassId;
            
            private global::System.Data.DataColumn columnActive;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnRateVariableTypeId;
            
            private global::System.Data.DataColumn columnMinDays;
            
            private global::System.Data.DataColumn columnMaxDays;
            
            private global::System.Data.DataColumn columnBlockPriceIndicator;
            
            private global::System.Data.DataColumn columnMeterMultiplierFlag;
            
            private global::System.Data.DataColumn columnBlendRatio;
            
            private global::System.Data.DataColumn columnRateDetailDS_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateDetailsDataTable() {
                this.TableName = "RateDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RateDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RateDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateDetailIDColumn {
                get {
                    return this.columnRateDetailID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateIDColumn {
                get {
                    return this.columnRateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PremiseIDColumn {
                get {
                    return this.columnPremiseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryIDColumn {
                get {
                    return this.columnCategoryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxCategoryIDColumn {
                get {
                    return this.columnTaxCategoryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateTypeIDColumn {
                get {
                    return this.columnRateTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateDescriptionIDColumn {
                get {
                    return this.columnRateDescriptionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceTypeIDColumn {
                get {
                    return this.columnServiceTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsUnitIDColumn {
                get {
                    return this.columnConsUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UtilityIDColumn {
                get {
                    return this.columnUtilityID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UtilityInvoiceTemplateDetailIDColumn {
                get {
                    return this.columnUtilityInvoiceTemplateDetailID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EffectiveDateColumn {
                get {
                    return this.columnEffectiveDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpirationDateColumn {
                get {
                    return this.columnExpirationDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateAmountColumn {
                get {
                    return this.columnRateAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinAmountColumn {
                get {
                    return this.columnMinAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxAmountColumn {
                get {
                    return this.columnMaxAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GLAcctColumn {
                get {
                    return this.columnGLAcct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RangeLowerColumn {
                get {
                    return this.columnRangeLower;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RangeUpperColumn {
                get {
                    return this.columnRangeUpper;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustTypeColumn {
                get {
                    return this.columnCustType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GraduatedColumn {
                get {
                    return this.columnGraduated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgressiveColumn {
                get {
                    return this.columnProgressive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountCapColumn {
                get {
                    return this.columnAmountCap;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxRateAmountColumn {
                get {
                    return this.columnMaxRateAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinRateAmountColumn {
                get {
                    return this.columnMinRateAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryRollupColumn {
                get {
                    return this.columnCategoryRollup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxableColumn {
                get {
                    return this.columnTaxable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChargeTypeColumn {
                get {
                    return this.columnChargeType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MiscData1Column {
                get {
                    return this.columnMiscData1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuildingColumn {
                get {
                    return this.columnBuilding;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateAmount2Column {
                get {
                    return this.columnRateAmount2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateAmount3Column {
                get {
                    return this.columnRateAmount3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FixedAdderColumn {
                get {
                    return this.columnFixedAdder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FixedCapRateColumn {
                get {
                    return this.columnFixedCapRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScaleFactor1Column {
                get {
                    return this.columnScaleFactor1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScaleFactor2Column {
                get {
                    return this.columnScaleFactor2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryDescriptionColumn {
                get {
                    return this.columnCategoryDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrintOrderColumn {
                get {
                    return this.columnPrintOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollupFlagColumn {
                get {
                    return this.columnRollupFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateDescriptionTypeColumn {
                get {
                    return this.columnRateDescriptionType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateDescriptionColumn {
                get {
                    return this.columnRateDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroupCodeColumn {
                get {
                    return this.columnGroupCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemCodeColumn {
                get {
                    return this.columnItemCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateTypeCategoryIDColumn {
                get {
                    return this.columnRateTypeCategoryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateTypeDescriptionColumn {
                get {
                    return this.columnRateTypeDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateTypeProgIDColumn {
                get {
                    return this.columnRateTypeProgID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateTypeCategoryDescriptionColumn {
                get {
                    return this.columnRateTypeCategoryDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceTypeCodeColumn {
                get {
                    return this.columnServiceTypeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceTypeDescriptionColumn {
                get {
                    return this.columnServiceTypeDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsumptionUnitColumn {
                get {
                    return this.columnConsumptionUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsumptionUnitMultiplierColumn {
                get {
                    return this.columnConsumptionUnitMultiplier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsumptionStandardUnitColumn {
                get {
                    return this.columnConsumptionStandardUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsumptionUnitDescriptionColumn {
                get {
                    return this.columnConsumptionUnitDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsumptionUnitTypeColumn {
                get {
                    return this.columnConsumptionUnitType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssemblyNameColumn {
                get {
                    return this.columnAssemblyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClassNameColumn {
                get {
                    return this.columnClassName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCustomerRateColumn {
                get {
                    return this.columnIsCustomerRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsGraduatedColumn {
                get {
                    return this.columnIsGraduated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsMajorityColumn {
                get {
                    return this.columnIsMajority;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MarginColumn {
                get {
                    return this.columnMargin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UsageClassIdColumn {
                get {
                    return this.columnUsageClassId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateVariableTypeIdColumn {
                get {
                    return this.columnRateVariableTypeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinDaysColumn {
                get {
                    return this.columnMinDays;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxDaysColumn {
                get {
                    return this.columnMaxDays;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BlockPriceIndicatorColumn {
                get {
                    return this.columnBlockPriceIndicator;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MeterMultiplierFlagColumn {
                get {
                    return this.columnMeterMultiplierFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BlendRatioColumn {
                get {
                    return this.columnBlendRatio;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateDetailDS_IdColumn {
                get {
                    return this.columnRateDetailDS_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateDetail this[int index] {
                get {
                    return ((RateDetail)(this.Rows[index]));
                }
            }
            
            public event RateDetailChangeEventHandler RateDetailChanging;
            
            public event RateDetailChangeEventHandler RateDetailChanged;
            
            public event RateDetailChangeEventHandler RateDetailDeleting;
            
            public event RateDetailChangeEventHandler RateDetailDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRateDetail(RateDetail row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateDetail AddRateDetail(
                        int RateID, 
                        int PremiseID, 
                        int CategoryID, 
                        int TaxCategoryID, 
                        int RateTypeID, 
                        int RateDescriptionID, 
                        int ServiceTypeID, 
                        int ConsUnitID, 
                        int UtilityID, 
                        int UtilityInvoiceTemplateDetailID, 
                        System.DateTime EffectiveDate, 
                        System.DateTime ExpirationDate, 
                        decimal RateAmount, 
                        decimal MinAmount, 
                        decimal MaxAmount, 
                        string GLAcct, 
                        decimal RangeLower, 
                        decimal RangeUpper, 
                        string CustType, 
                        string Graduated, 
                        string Progressive, 
                        string AmountCap, 
                        string MaxRateAmount, 
                        string MinRateAmount, 
                        string CategoryRollup, 
                        string Taxable, 
                        string ChargeType, 
                        string MiscData1, 
                        string Building, 
                        decimal RateAmount2, 
                        decimal RateAmount3, 
                        decimal FixedAdder, 
                        decimal FixedCapRate, 
                        decimal ScaleFactor1, 
                        decimal ScaleFactor2, 
                        string CategoryDescription, 
                        int PrintOrder, 
                        bool RollupFlag, 
                        string RateDescriptionType, 
                        string RateDescription, 
                        string GroupCode, 
                        string ItemCode, 
                        int RateTypeCategoryID, 
                        string RateTypeDescription, 
                        string RateTypeProgID, 
                        string RateTypeCategoryDescription, 
                        string ServiceTypeCode, 
                        string ServiceTypeDescription, 
                        string ConsumptionUnit, 
                        decimal ConsumptionUnitMultiplier, 
                        string ConsumptionStandardUnit, 
                        string ConsumptionUnitDescription, 
                        string ConsumptionUnitType, 
                        string AssemblyName, 
                        string ClassName, 
                        bool IsCustomerRate, 
                        bool IsGraduated, 
                        bool IsMajority, 
                        decimal Margin, 
                        int UsageClassId, 
                        bool Active, 
                        int Status, 
                        int RateVariableTypeId, 
                        int MinDays, 
                        int MaxDays, 
                        int BlockPriceIndicator, 
                        bool MeterMultiplierFlag, 
                        decimal BlendRatio, 
                        RateDetailDSRow parentRateDetailDSRowByRateDetailDS_RateDetail) {
                RateDetail rowRateDetail = ((RateDetail)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        RateID,
                        PremiseID,
                        CategoryID,
                        TaxCategoryID,
                        RateTypeID,
                        RateDescriptionID,
                        ServiceTypeID,
                        ConsUnitID,
                        UtilityID,
                        UtilityInvoiceTemplateDetailID,
                        EffectiveDate,
                        ExpirationDate,
                        RateAmount,
                        MinAmount,
                        MaxAmount,
                        GLAcct,
                        RangeLower,
                        RangeUpper,
                        CustType,
                        Graduated,
                        Progressive,
                        AmountCap,
                        MaxRateAmount,
                        MinRateAmount,
                        CategoryRollup,
                        Taxable,
                        ChargeType,
                        MiscData1,
                        Building,
                        RateAmount2,
                        RateAmount3,
                        FixedAdder,
                        FixedCapRate,
                        ScaleFactor1,
                        ScaleFactor2,
                        CategoryDescription,
                        PrintOrder,
                        RollupFlag,
                        RateDescriptionType,
                        RateDescription,
                        GroupCode,
                        ItemCode,
                        RateTypeCategoryID,
                        RateTypeDescription,
                        RateTypeProgID,
                        RateTypeCategoryDescription,
                        ServiceTypeCode,
                        ServiceTypeDescription,
                        ConsumptionUnit,
                        ConsumptionUnitMultiplier,
                        ConsumptionStandardUnit,
                        ConsumptionUnitDescription,
                        ConsumptionUnitType,
                        AssemblyName,
                        ClassName,
                        IsCustomerRate,
                        IsGraduated,
                        IsMajority,
                        Margin,
                        UsageClassId,
                        Active,
                        Status,
                        RateVariableTypeId,
                        MinDays,
                        MaxDays,
                        BlockPriceIndicator,
                        MeterMultiplierFlag,
                        BlendRatio,
                        null};
                if ((parentRateDetailDSRowByRateDetailDS_RateDetail != null)) {
                    columnValuesArray[69] = parentRateDetailDSRowByRateDetailDS_RateDetail[0];
                }
                rowRateDetail.ItemArray = columnValuesArray;
                this.Rows.Add(rowRateDetail);
                return rowRateDetail;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RateDetailsDataTable cln = ((RateDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RateDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRateDetailID = base.Columns["RateDetID"];
                this.columnRateID = base.Columns["RateID"];
                this.columnPremiseID = base.Columns["PremiseID"];
                this.columnCategoryID = base.Columns["CategoryID"];
                this.columnTaxCategoryID = base.Columns["TaxCategoryID"];
                this.columnRateTypeID = base.Columns["RateTypeID"];
                this.columnRateDescriptionID = base.Columns["RateDescID"];
                this.columnServiceTypeID = base.Columns["ServiceTypeID"];
                this.columnConsUnitID = base.Columns["ConsUnitID"];
                this.columnUtilityID = base.Columns["UtilityID"];
                this.columnUtilityInvoiceTemplateDetailID = base.Columns["UtilityInvoiceTemplateDetailID"];
                this.columnEffectiveDate = base.Columns["EffectiveDate"];
                this.columnExpirationDate = base.Columns["ExpirationDate"];
                this.columnRateAmount = base.Columns["RateAmt"];
                this.columnMinAmount = base.Columns["MinDetAmt"];
                this.columnMaxAmount = base.Columns["MaxDetAmt"];
                this.columnGLAcct = base.Columns["GLAcct"];
                this.columnRangeLower = base.Columns["RangeLower"];
                this.columnRangeUpper = base.Columns["RangeUpper"];
                this.columnCustType = base.Columns["CustType"];
                this.columnGraduated = base.Columns["Graduated"];
                this.columnProgressive = base.Columns["Progressive"];
                this.columnAmountCap = base.Columns["AmountCap"];
                this.columnMaxRateAmount = base.Columns["MaxRateAmt"];
                this.columnMinRateAmount = base.Columns["MinRateAmt"];
                this.columnCategoryRollup = base.Columns["CategoryRollup"];
                this.columnTaxable = base.Columns["Taxable"];
                this.columnChargeType = base.Columns["ChargeType"];
                this.columnMiscData1 = base.Columns["MiscData1"];
                this.columnBuilding = base.Columns["Building"];
                this.columnRateAmount2 = base.Columns["RateAmt2"];
                this.columnRateAmount3 = base.Columns["RateAmt3"];
                this.columnFixedAdder = base.Columns["FixedAdder"];
                this.columnFixedCapRate = base.Columns["FixedCapRate"];
                this.columnScaleFactor1 = base.Columns["ScaleFactor1"];
                this.columnScaleFactor2 = base.Columns["ScaleFactor2"];
                this.columnCategoryDescription = base.Columns["CatDesc"];
                this.columnPrintOrder = base.Columns["PrintOrder"];
                this.columnRollupFlag = base.Columns["RollupFlag"];
                this.columnRateDescriptionType = base.Columns["RateDescType"];
                this.columnRateDescription = base.Columns["RateDescription"];
                this.columnGroupCode = base.Columns["GroupCode"];
                this.columnItemCode = base.Columns["ItemCode"];
                this.columnRateTypeCategoryID = base.Columns["RateTypeCategoryID"];
                this.columnRateTypeDescription = base.Columns["RateTypeDesc"];
                this.columnRateTypeProgID = base.Columns["RateTypeProgID"];
                this.columnRateTypeCategoryDescription = base.Columns["RateTypeCategoryDescription"];
                this.columnServiceTypeCode = base.Columns["ServiceTypeCode"];
                this.columnServiceTypeDescription = base.Columns["ServiceTypeDescription"];
                this.columnConsumptionUnit = base.Columns["Unit"];
                this.columnConsumptionUnitMultiplier = base.Columns["UnitMultiplier"];
                this.columnConsumptionStandardUnit = base.Columns["StandardUnit"];
                this.columnConsumptionUnitDescription = base.Columns["UnitDesc"];
                this.columnConsumptionUnitType = base.Columns["Type"];
                this.columnAssemblyName = base.Columns["AssemblyName"];
                this.columnClassName = base.Columns["ClassName"];
                this.columnIsCustomerRate = base.Columns["IsCustomerRate"];
                this.columnIsGraduated = base.Columns["IsGraduated"];
                this.columnIsMajority = base.Columns["IsMajority"];
                this.columnMargin = base.Columns["Margin"];
                this.columnUsageClassId = base.Columns["UsageClassId"];
                this.columnActive = base.Columns["Active"];
                this.columnStatus = base.Columns["Status"];
                this.columnRateVariableTypeId = base.Columns["RateVariableTypeId"];
                this.columnMinDays = base.Columns["MinDays"];
                this.columnMaxDays = base.Columns["MaxDays"];
                this.columnBlockPriceIndicator = base.Columns["BlockPriceIndicator"];
                this.columnMeterMultiplierFlag = base.Columns["MeterMultiplierFlag"];
                this.columnBlendRatio = base.Columns["BlendRatio"];
                this.columnRateDetailDS_Id = base.Columns["RateDetailDS_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRateDetailID = new global::System.Data.DataColumn("RateDetID", typeof(int), null, global::System.Data.MappingType.Element);
                this.columnRateDetailID.ExtendedProperties.Add("typedName", "RateDetailID");
                base.Columns.Add(this.columnRateDetailID);
                this.columnRateID = new global::System.Data.DataColumn("RateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRateID);
                this.columnPremiseID = new global::System.Data.DataColumn("PremiseID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPremiseID);
                this.columnCategoryID = new global::System.Data.DataColumn("CategoryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryID);
                this.columnTaxCategoryID = new global::System.Data.DataColumn("TaxCategoryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxCategoryID);
                this.columnRateTypeID = new global::System.Data.DataColumn("RateTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRateTypeID);
                this.columnRateDescriptionID = new global::System.Data.DataColumn("RateDescID", typeof(int), null, global::System.Data.MappingType.Element);
                this.columnRateDescriptionID.ExtendedProperties.Add("typedName", "RateDescriptionID");
                base.Columns.Add(this.columnRateDescriptionID);
                this.columnServiceTypeID = new global::System.Data.DataColumn("ServiceTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceTypeID);
                this.columnConsUnitID = new global::System.Data.DataColumn("ConsUnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsUnitID);
                this.columnUtilityID = new global::System.Data.DataColumn("UtilityID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUtilityID);
                this.columnUtilityInvoiceTemplateDetailID = new global::System.Data.DataColumn("UtilityInvoiceTemplateDetailID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUtilityInvoiceTemplateDetailID);
                this.columnEffectiveDate = new global::System.Data.DataColumn("EffectiveDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEffectiveDate);
                this.columnExpirationDate = new global::System.Data.DataColumn("ExpirationDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpirationDate);
                this.columnRateAmount = new global::System.Data.DataColumn("RateAmt", typeof(decimal), null, global::System.Data.MappingType.Element);
                this.columnRateAmount.ExtendedProperties.Add("typedName", "RateAmount");
                base.Columns.Add(this.columnRateAmount);
                this.columnMinAmount = new global::System.Data.DataColumn("MinDetAmt", typeof(decimal), null, global::System.Data.MappingType.Element);
                this.columnMinAmount.ExtendedProperties.Add("typedName", "MinAmount");
                base.Columns.Add(this.columnMinAmount);
                this.columnMaxAmount = new global::System.Data.DataColumn("MaxDetAmt", typeof(decimal), null, global::System.Data.MappingType.Element);
                this.columnMaxAmount.ExtendedProperties.Add("typedName", "MaxAmount");
                base.Columns.Add(this.columnMaxAmount);
                this.columnGLAcct = new global::System.Data.DataColumn("GLAcct", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGLAcct);
                this.columnRangeLower = new global::System.Data.DataColumn("RangeLower", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRangeLower);
                this.columnRangeUpper = new global::System.Data.DataColumn("RangeUpper", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRangeUpper);
                this.columnCustType = new global::System.Data.DataColumn("CustType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustType);
                this.columnGraduated = new global::System.Data.DataColumn("Graduated", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGraduated);
                this.columnProgressive = new global::System.Data.DataColumn("Progressive", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgressive);
                this.columnAmountCap = new global::System.Data.DataColumn("AmountCap", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmountCap);
                this.columnMaxRateAmount = new global::System.Data.DataColumn("MaxRateAmt", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnMaxRateAmount.ExtendedProperties.Add("typedName", "MaxRateAmount");
                base.Columns.Add(this.columnMaxRateAmount);
                this.columnMinRateAmount = new global::System.Data.DataColumn("MinRateAmt", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnMinRateAmount.ExtendedProperties.Add("typedName", "MinRateAmount");
                base.Columns.Add(this.columnMinRateAmount);
                this.columnCategoryRollup = new global::System.Data.DataColumn("CategoryRollup", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryRollup);
                this.columnTaxable = new global::System.Data.DataColumn("Taxable", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxable);
                this.columnChargeType = new global::System.Data.DataColumn("ChargeType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChargeType);
                this.columnMiscData1 = new global::System.Data.DataColumn("MiscData1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMiscData1);
                this.columnBuilding = new global::System.Data.DataColumn("Building", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuilding);
                this.columnRateAmount2 = new global::System.Data.DataColumn("RateAmt2", typeof(decimal), null, global::System.Data.MappingType.Element);
                this.columnRateAmount2.ExtendedProperties.Add("typedName", "RateAmount2");
                base.Columns.Add(this.columnRateAmount2);
                this.columnRateAmount3 = new global::System.Data.DataColumn("RateAmt3", typeof(decimal), null, global::System.Data.MappingType.Element);
                this.columnRateAmount3.ExtendedProperties.Add("typedName", "RateAmount3");
                base.Columns.Add(this.columnRateAmount3);
                this.columnFixedAdder = new global::System.Data.DataColumn("FixedAdder", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFixedAdder);
                this.columnFixedCapRate = new global::System.Data.DataColumn("FixedCapRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFixedCapRate);
                this.columnScaleFactor1 = new global::System.Data.DataColumn("ScaleFactor1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScaleFactor1);
                this.columnScaleFactor2 = new global::System.Data.DataColumn("ScaleFactor2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScaleFactor2);
                this.columnCategoryDescription = new global::System.Data.DataColumn("CatDesc", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnCategoryDescription.ExtendedProperties.Add("typedName", "CategoryDescription");
                base.Columns.Add(this.columnCategoryDescription);
                this.columnPrintOrder = new global::System.Data.DataColumn("PrintOrder", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrintOrder);
                this.columnRollupFlag = new global::System.Data.DataColumn("RollupFlag", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollupFlag);
                this.columnRateDescriptionType = new global::System.Data.DataColumn("RateDescType", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnRateDescriptionType.ExtendedProperties.Add("typedName", "RateDescriptionType");
                base.Columns.Add(this.columnRateDescriptionType);
                this.columnRateDescription = new global::System.Data.DataColumn("RateDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRateDescription);
                this.columnGroupCode = new global::System.Data.DataColumn("GroupCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupCode);
                this.columnItemCode = new global::System.Data.DataColumn("ItemCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemCode);
                this.columnRateTypeCategoryID = new global::System.Data.DataColumn("RateTypeCategoryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRateTypeCategoryID);
                this.columnRateTypeDescription = new global::System.Data.DataColumn("RateTypeDesc", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnRateTypeDescription.ExtendedProperties.Add("typedName", "RateTypeDescription");
                base.Columns.Add(this.columnRateTypeDescription);
                this.columnRateTypeProgID = new global::System.Data.DataColumn("RateTypeProgID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRateTypeProgID);
                this.columnRateTypeCategoryDescription = new global::System.Data.DataColumn("RateTypeCategoryDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRateTypeCategoryDescription);
                this.columnServiceTypeCode = new global::System.Data.DataColumn("ServiceTypeCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceTypeCode);
                this.columnServiceTypeDescription = new global::System.Data.DataColumn("ServiceTypeDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceTypeDescription);
                this.columnConsumptionUnit = new global::System.Data.DataColumn("Unit", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnConsumptionUnit.ExtendedProperties.Add("typedName", "ConsumptionUnit");
                base.Columns.Add(this.columnConsumptionUnit);
                this.columnConsumptionUnitMultiplier = new global::System.Data.DataColumn("UnitMultiplier", typeof(decimal), null, global::System.Data.MappingType.Element);
                this.columnConsumptionUnitMultiplier.ExtendedProperties.Add("typedName", "ConsumptionUnitMultiplier");
                base.Columns.Add(this.columnConsumptionUnitMultiplier);
                this.columnConsumptionStandardUnit = new global::System.Data.DataColumn("StandardUnit", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnConsumptionStandardUnit.ExtendedProperties.Add("typedName", "ConsumptionStandardUnit");
                base.Columns.Add(this.columnConsumptionStandardUnit);
                this.columnConsumptionUnitDescription = new global::System.Data.DataColumn("UnitDesc", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnConsumptionUnitDescription.ExtendedProperties.Add("typedName", "ConsumptionUnitDescription");
                base.Columns.Add(this.columnConsumptionUnitDescription);
                this.columnConsumptionUnitType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnConsumptionUnitType.ExtendedProperties.Add("typedName", "ConsumptionUnitType");
                base.Columns.Add(this.columnConsumptionUnitType);
                this.columnAssemblyName = new global::System.Data.DataColumn("AssemblyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssemblyName);
                this.columnClassName = new global::System.Data.DataColumn("ClassName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClassName);
                this.columnIsCustomerRate = new global::System.Data.DataColumn("IsCustomerRate", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCustomerRate);
                this.columnIsGraduated = new global::System.Data.DataColumn("IsGraduated", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsGraduated);
                this.columnIsMajority = new global::System.Data.DataColumn("IsMajority", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsMajority);
                this.columnMargin = new global::System.Data.DataColumn("Margin", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMargin);
                this.columnUsageClassId = new global::System.Data.DataColumn("UsageClassId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUsageClassId);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnRateVariableTypeId = new global::System.Data.DataColumn("RateVariableTypeId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRateVariableTypeId);
                this.columnMinDays = new global::System.Data.DataColumn("MinDays", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinDays);
                this.columnMaxDays = new global::System.Data.DataColumn("MaxDays", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxDays);
                this.columnBlockPriceIndicator = new global::System.Data.DataColumn("BlockPriceIndicator", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBlockPriceIndicator);
                this.columnMeterMultiplierFlag = new global::System.Data.DataColumn("MeterMultiplierFlag", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeterMultiplierFlag);
                this.columnBlendRatio = new global::System.Data.DataColumn("BlendRatio", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBlendRatio);
                this.columnRateDetailDS_Id = new global::System.Data.DataColumn("RateDetailDS_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRateDetailDS_Id);
                this.columnRateDetailID.AutoIncrement = true;
                this.columnRateDetailID.AutoIncrementSeed = -1;
                this.columnRateDetailID.AutoIncrementStep = -1;
                this.columnRateDetailID.AllowDBNull = false;
                this.columnRateDetailID.ReadOnly = true;
                this.columnRateID.AllowDBNull = false;
                this.columnRateAmount.AllowDBNull = false;
                this.columnCategoryDescription.ReadOnly = true;
                this.columnPrintOrder.ReadOnly = true;
                this.columnRollupFlag.ReadOnly = true;
                this.columnRateDescriptionType.ReadOnly = true;
                this.columnRateDescription.ReadOnly = true;
                this.columnGroupCode.ReadOnly = true;
                this.columnItemCode.ReadOnly = true;
                this.columnRateTypeCategoryID.ReadOnly = true;
                this.columnRateTypeDescription.ReadOnly = true;
                this.columnRateTypeProgID.ReadOnly = true;
                this.columnRateTypeCategoryDescription.ReadOnly = true;
                this.columnServiceTypeCode.ReadOnly = true;
                this.columnServiceTypeDescription.ReadOnly = true;
                this.columnConsumptionUnit.ReadOnly = true;
                this.columnConsumptionUnitMultiplier.ReadOnly = true;
                this.columnConsumptionStandardUnit.ReadOnly = true;
                this.columnConsumptionUnitDescription.ReadOnly = true;
                this.columnConsumptionUnitType.ReadOnly = true;
                this.columnBlockPriceIndicator.DefaultValue = ((int)(0));
                this.ExtendedProperties.Add("typedName", "RateDetail");
                this.ExtendedProperties.Add("typedPlural", "RateDetails");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateDetail NewRateDetail() {
                return ((RateDetail)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RateDetail(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RateDetail);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RateDetailChanged != null)) {
                    this.RateDetailChanged(this, new RateDetailChangeEvent(((RateDetail)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RateDetailChanging != null)) {
                    this.RateDetailChanging(this, new RateDetailChangeEvent(((RateDetail)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RateDetailDeleted != null)) {
                    this.RateDetailDeleted(this, new RateDetailChangeEvent(((RateDetail)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RateDetailDeleting != null)) {
                    this.RateDetailDeleting(this, new RateDetailChangeEvent(((RateDetail)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRateDetail(RateDetail row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RateDS ds = new RateDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RateDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RatesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRateID;
            
            private global::System.Data.DataColumn columnCSPID;
            
            private global::System.Data.DataColumn columnRateCode;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnEffectiveDate;
            
            private global::System.Data.DataColumn columnExpirationDate;
            
            private global::System.Data.DataColumn columnRateType;
            
            private global::System.Data.DataColumn columnPlanType;
            
            private global::System.Data.DataColumn columnIsMajority;
            
            private global::System.Data.DataColumn columnTemplateFlag;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RatesDataTable() {
                this.TableName = "Rate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RatesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RatesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateIDColumn {
                get {
                    return this.columnRateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CSPIDColumn {
                get {
                    return this.columnCSPID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateCodeColumn {
                get {
                    return this.columnRateCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EffectiveDateColumn {
                get {
                    return this.columnEffectiveDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpirationDateColumn {
                get {
                    return this.columnExpirationDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateTypeColumn {
                get {
                    return this.columnRateType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PlanTypeColumn {
                get {
                    return this.columnPlanType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsMajorityColumn {
                get {
                    return this.columnIsMajority;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TemplateFlagColumn {
                get {
                    return this.columnTemplateFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rate this[int index] {
                get {
                    return ((Rate)(this.Rows[index]));
                }
            }
            
            public event RateChangeEventHandler RateChanging;
            
            public event RateChangeEventHandler RateChanged;
            
            public event RateChangeEventHandler RateDeleting;
            
            public event RateChangeEventHandler RateDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRate(Rate row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rate AddRate(int CSPID, string RateCode, string Description, System.DateTime EffectiveDate, System.DateTime ExpirationDate, string RateType, short PlanType, bool IsMajority, bool TemplateFlag) {
                Rate rowRate = ((Rate)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CSPID,
                        RateCode,
                        Description,
                        EffectiveDate,
                        ExpirationDate,
                        RateType,
                        PlanType,
                        IsMajority,
                        TemplateFlag};
                rowRate.ItemArray = columnValuesArray;
                this.Rows.Add(rowRate);
                return rowRate;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rate FindByRateID(int RateID) {
                return ((Rate)(this.Rows.Find(new object[] {
                            RateID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RatesDataTable cln = ((RatesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RatesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRateID = base.Columns["RateID"];
                this.columnCSPID = base.Columns["CSPID"];
                this.columnRateCode = base.Columns["RateCode"];
                this.columnDescription = base.Columns["RateDesc"];
                this.columnEffectiveDate = base.Columns["EffectiveDate"];
                this.columnExpirationDate = base.Columns["ExpirationDate"];
                this.columnRateType = base.Columns["RateType"];
                this.columnPlanType = base.Columns["PlanType"];
                this.columnIsMajority = base.Columns["IsMajority"];
                this.columnTemplateFlag = base.Columns["TemplateFlag"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRateID = new global::System.Data.DataColumn("RateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRateID);
                this.columnCSPID = new global::System.Data.DataColumn("CSPID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCSPID);
                this.columnRateCode = new global::System.Data.DataColumn("RateCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRateCode);
                this.columnDescription = new global::System.Data.DataColumn("RateDesc", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnDescription.ExtendedProperties.Add("typedName", "Description");
                base.Columns.Add(this.columnDescription);
                this.columnEffectiveDate = new global::System.Data.DataColumn("EffectiveDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEffectiveDate);
                this.columnExpirationDate = new global::System.Data.DataColumn("ExpirationDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpirationDate);
                this.columnRateType = new global::System.Data.DataColumn("RateType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRateType);
                this.columnPlanType = new global::System.Data.DataColumn("PlanType", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlanType);
                this.columnIsMajority = new global::System.Data.DataColumn("IsMajority", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsMajority);
                this.columnTemplateFlag = new global::System.Data.DataColumn("TemplateFlag", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateFlag);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("RatePK", new global::System.Data.DataColumn[] {
                                this.columnRateID}, true));
                this.columnRateID.AutoIncrement = true;
                this.columnRateID.AutoIncrementSeed = -1;
                this.columnRateID.AutoIncrementStep = -1;
                this.columnRateID.AllowDBNull = false;
                this.columnRateID.ReadOnly = true;
                this.columnRateID.Unique = true;
                this.columnRateCode.AllowDBNull = false;
                this.columnEffectiveDate.AllowDBNull = false;
                this.ExtendedProperties.Add("typedName", "Rate");
                this.ExtendedProperties.Add("typedPlural", "Rates");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rate NewRate() {
                return ((Rate)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Rate(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Rate);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RateChanged != null)) {
                    this.RateChanged(this, new RateChangeEvent(((Rate)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RateChanging != null)) {
                    this.RateChanging(this, new RateChangeEvent(((Rate)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RateDeleted != null)) {
                    this.RateDeleted(this, new RateChangeEvent(((Rate)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RateDeleting != null)) {
                    this.RateDeleting(this, new RateChangeEvent(((Rate)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRate(Rate row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RateDS ds = new RateDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RatesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PropertyRatesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRateID;
            
            private global::System.Data.DataColumn columnPropertyID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRatesDataTable() {
                this.TableName = "PropertyRate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PropertyRatesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PropertyRatesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateIDColumn {
                get {
                    return this.columnRateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropertyIDColumn {
                get {
                    return this.columnPropertyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRate this[int index] {
                get {
                    return ((PropertyRate)(this.Rows[index]));
                }
            }
            
            public event PropertyRateChangeEventHandler PropertyRateChanging;
            
            public event PropertyRateChangeEventHandler PropertyRateChanged;
            
            public event PropertyRateChangeEventHandler PropertyRateDeleting;
            
            public event PropertyRateChangeEventHandler PropertyRateDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPropertyRate(PropertyRate row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRate AddPropertyRate(int RateID, int PropertyID) {
                PropertyRate rowPropertyRate = ((PropertyRate)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RateID,
                        PropertyID};
                rowPropertyRate.ItemArray = columnValuesArray;
                this.Rows.Add(rowPropertyRate);
                return rowPropertyRate;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PropertyRatesDataTable cln = ((PropertyRatesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PropertyRatesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRateID = base.Columns["RateID"];
                this.columnPropertyID = base.Columns["PropertyID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRateID = new global::System.Data.DataColumn("RateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRateID);
                this.columnPropertyID = new global::System.Data.DataColumn("PropertyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropertyID);
                this.ExtendedProperties.Add("typedName", "PropertyRate");
                this.ExtendedProperties.Add("typedPlural", "PropertyRates");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRate NewPropertyRate() {
                return ((PropertyRate)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PropertyRate(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PropertyRate);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PropertyRateChanged != null)) {
                    this.PropertyRateChanged(this, new PropertyRateChangeEvent(((PropertyRate)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PropertyRateChanging != null)) {
                    this.PropertyRateChanging(this, new PropertyRateChangeEvent(((PropertyRate)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PropertyRateDeleted != null)) {
                    this.PropertyRateDeleted(this, new PropertyRateChangeEvent(((PropertyRate)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PropertyRateDeleting != null)) {
                    this.PropertyRateDeleting(this, new PropertyRateChangeEvent(((PropertyRate)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePropertyRate(PropertyRate row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RateDS ds = new RateDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PropertyRatesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RateDetailDSRow : global::System.Data.DataRow {
            
            private RateDetailDSDataTable tableRateDetailDS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RateDetailDSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRateDetailDS = ((RateDetailDSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RateDetailDS_Id {
                get {
                    return ((int)(this[this.tableRateDetailDS.RateDetailDS_IdColumn]));
                }
                set {
                    this[this.tableRateDetailDS.RateDetailDS_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateDetail[] GetRateDetails() {
                if ((this.Table.ChildRelations["RateDetailDS_RateDetail"] == null)) {
                    return new RateDetail[0];
                }
                else {
                    return ((RateDetail[])(base.GetChildRows(this.Table.ChildRelations["RateDetailDS_RateDetail"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RateDetail : global::System.Data.DataRow {
            
            private RateDetailsDataTable tableRateDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RateDetail(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRateDetails = ((RateDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RateDetailID {
                get {
                    return ((int)(this[this.tableRateDetails.RateDetailIDColumn]));
                }
                set {
                    this[this.tableRateDetails.RateDetailIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RateID {
                get {
                    return ((int)(this[this.tableRateDetails.RateIDColumn]));
                }
                set {
                    this[this.tableRateDetails.RateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PremiseID {
                get {
                    try {
                        return ((int)(this[this.tableRateDetails.PremiseIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PremiseID\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.PremiseIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CategoryID {
                get {
                    try {
                        return ((int)(this[this.tableRateDetails.CategoryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CategoryID\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.CategoryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TaxCategoryID {
                get {
                    try {
                        return ((int)(this[this.tableRateDetails.TaxCategoryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxCategoryID\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.TaxCategoryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RateTypeID {
                get {
                    try {
                        return ((int)(this[this.tableRateDetails.RateTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RateTypeID\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.RateTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RateDescriptionID {
                get {
                    try {
                        return ((int)(this[this.tableRateDetails.RateDescriptionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RateDescID\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.RateDescriptionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServiceTypeID {
                get {
                    try {
                        return ((int)(this[this.tableRateDetails.ServiceTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ServiceTypeID\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.ServiceTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConsUnitID {
                get {
                    try {
                        return ((int)(this[this.tableRateDetails.ConsUnitIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConsUnitID\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.ConsUnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UtilityID {
                get {
                    try {
                        return ((int)(this[this.tableRateDetails.UtilityIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UtilityID\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.UtilityIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UtilityInvoiceTemplateDetailID {
                get {
                    try {
                        return ((int)(this[this.tableRateDetails.UtilityInvoiceTemplateDetailIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UtilityInvoiceTemplateDetailID\' in table \'RateDetail\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.UtilityInvoiceTemplateDetailIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EffectiveDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableRateDetails.EffectiveDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EffectiveDate\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.EffectiveDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ExpirationDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableRateDetails.ExpirationDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExpirationDate\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.ExpirationDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RateAmount {
                get {
                    return ((decimal)(this[this.tableRateDetails.RateAmountColumn]));
                }
                set {
                    this[this.tableRateDetails.RateAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MinAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableRateDetails.MinAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinDetAmt\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.MinAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MaxAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableRateDetails.MaxAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxDetAmt\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.MaxAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GLAcct {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.GLAcctColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GLAcct\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.GLAcctColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RangeLower {
                get {
                    try {
                        return ((decimal)(this[this.tableRateDetails.RangeLowerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RangeLower\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.RangeLowerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RangeUpper {
                get {
                    try {
                        return ((decimal)(this[this.tableRateDetails.RangeUpperColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RangeUpper\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.RangeUpperColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustType {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.CustTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustType\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.CustTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Graduated {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.GraduatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Graduated\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.GraduatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Progressive {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.ProgressiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Progressive\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.ProgressiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AmountCap {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.AmountCapColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AmountCap\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.AmountCapColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaxRateAmount {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.MaxRateAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxRateAmt\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.MaxRateAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MinRateAmount {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.MinRateAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinRateAmt\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.MinRateAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CategoryRollup {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.CategoryRollupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CategoryRollup\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.CategoryRollupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Taxable {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.TaxableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Taxable\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.TaxableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChargeType {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.ChargeTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChargeType\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.ChargeTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MiscData1 {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.MiscData1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MiscData1\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.MiscData1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Building {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.BuildingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Building\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.BuildingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RateAmount2 {
                get {
                    try {
                        return ((decimal)(this[this.tableRateDetails.RateAmount2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RateAmt2\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.RateAmount2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RateAmount3 {
                get {
                    try {
                        return ((decimal)(this[this.tableRateDetails.RateAmount3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RateAmt3\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.RateAmount3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FixedAdder {
                get {
                    try {
                        return ((decimal)(this[this.tableRateDetails.FixedAdderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FixedAdder\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.FixedAdderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FixedCapRate {
                get {
                    try {
                        return ((decimal)(this[this.tableRateDetails.FixedCapRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FixedCapRate\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.FixedCapRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ScaleFactor1 {
                get {
                    try {
                        return ((decimal)(this[this.tableRateDetails.ScaleFactor1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScaleFactor1\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.ScaleFactor1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ScaleFactor2 {
                get {
                    try {
                        return ((decimal)(this[this.tableRateDetails.ScaleFactor2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScaleFactor2\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.ScaleFactor2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CategoryDescription {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.CategoryDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CatDesc\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.CategoryDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PrintOrder {
                get {
                    try {
                        return ((int)(this[this.tableRateDetails.PrintOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PrintOrder\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.PrintOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RollupFlag {
                get {
                    try {
                        return ((bool)(this[this.tableRateDetails.RollupFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollupFlag\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.RollupFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RateDescriptionType {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.RateDescriptionTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RateDescType\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.RateDescriptionTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RateDescription {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.RateDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RateDescription\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.RateDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GroupCode {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.GroupCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GroupCode\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.GroupCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemCode {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.ItemCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemCode\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.ItemCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RateTypeCategoryID {
                get {
                    try {
                        return ((int)(this[this.tableRateDetails.RateTypeCategoryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RateTypeCategoryID\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.RateTypeCategoryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RateTypeDescription {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.RateTypeDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RateTypeDesc\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.RateTypeDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RateTypeProgID {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.RateTypeProgIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RateTypeProgID\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.RateTypeProgIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RateTypeCategoryDescription {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.RateTypeCategoryDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RateTypeCategoryDescription\' in table \'RateDetail\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.RateTypeCategoryDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServiceTypeCode {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.ServiceTypeCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ServiceTypeCode\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.ServiceTypeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServiceTypeDescription {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.ServiceTypeDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ServiceTypeDescription\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.ServiceTypeDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConsumptionUnit {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.ConsumptionUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Unit\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.ConsumptionUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ConsumptionUnitMultiplier {
                get {
                    try {
                        return ((decimal)(this[this.tableRateDetails.ConsumptionUnitMultiplierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitMultiplier\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.ConsumptionUnitMultiplierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConsumptionStandardUnit {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.ConsumptionStandardUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StandardUnit\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.ConsumptionStandardUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConsumptionUnitDescription {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.ConsumptionUnitDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitDesc\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.ConsumptionUnitDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConsumptionUnitType {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.ConsumptionUnitTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.ConsumptionUnitTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssemblyName {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.AssemblyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssemblyName\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.AssemblyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClassName {
                get {
                    try {
                        return ((string)(this[this.tableRateDetails.ClassNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClassName\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.ClassNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerRate {
                get {
                    try {
                        return ((bool)(this[this.tableRateDetails.IsCustomerRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCustomerRate\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.IsCustomerRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGraduated {
                get {
                    try {
                        return ((bool)(this[this.tableRateDetails.IsGraduatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsGraduated\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.IsGraduatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMajority {
                get {
                    try {
                        return ((bool)(this[this.tableRateDetails.IsMajorityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsMajority\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.IsMajorityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Margin {
                get {
                    try {
                        return ((decimal)(this[this.tableRateDetails.MarginColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Margin\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.MarginColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UsageClassId {
                get {
                    try {
                        return ((int)(this[this.tableRateDetails.UsageClassIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UsageClassId\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.UsageClassIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    try {
                        return ((bool)(this[this.tableRateDetails.ActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Active\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Status {
                get {
                    try {
                        return ((int)(this[this.tableRateDetails.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RateVariableTypeId {
                get {
                    try {
                        return ((int)(this[this.tableRateDetails.RateVariableTypeIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RateVariableTypeId\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.RateVariableTypeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MinDays {
                get {
                    try {
                        return ((int)(this[this.tableRateDetails.MinDaysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinDays\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.MinDaysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaxDays {
                get {
                    try {
                        return ((int)(this[this.tableRateDetails.MaxDaysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxDays\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.MaxDaysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BlockPriceIndicator {
                get {
                    try {
                        return ((int)(this[this.tableRateDetails.BlockPriceIndicatorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BlockPriceIndicator\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.BlockPriceIndicatorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MeterMultiplierFlag {
                get {
                    try {
                        return ((bool)(this[this.tableRateDetails.MeterMultiplierFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeterMultiplierFlag\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.MeterMultiplierFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BlendRatio {
                get {
                    try {
                        return ((decimal)(this[this.tableRateDetails.BlendRatioColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BlendRatio\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.BlendRatioColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RateDetailDS_Id {
                get {
                    try {
                        return ((int)(this[this.tableRateDetails.RateDetailDS_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RateDetailDS_Id\' in table \'RateDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRateDetails.RateDetailDS_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateDetailDSRow RateDetailDSRow {
                get {
                    return ((RateDetailDSRow)(this.GetParentRow(this.Table.ParentRelations["RateDetailDS_RateDetail"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["RateDetailDS_RateDetail"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPremiseIDNull() {
                return this.IsNull(this.tableRateDetails.PremiseIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPremiseIDNull() {
                this[this.tableRateDetails.PremiseIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryIDNull() {
                return this.IsNull(this.tableRateDetails.CategoryIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryIDNull() {
                this[this.tableRateDetails.CategoryIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxCategoryIDNull() {
                return this.IsNull(this.tableRateDetails.TaxCategoryIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxCategoryIDNull() {
                this[this.tableRateDetails.TaxCategoryIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateTypeIDNull() {
                return this.IsNull(this.tableRateDetails.RateTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateTypeIDNull() {
                this[this.tableRateDetails.RateTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateDescriptionIDNull() {
                return this.IsNull(this.tableRateDetails.RateDescriptionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateDescriptionIDNull() {
                this[this.tableRateDetails.RateDescriptionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServiceTypeIDNull() {
                return this.IsNull(this.tableRateDetails.ServiceTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServiceTypeIDNull() {
                this[this.tableRateDetails.ServiceTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsUnitIDNull() {
                return this.IsNull(this.tableRateDetails.ConsUnitIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsUnitIDNull() {
                this[this.tableRateDetails.ConsUnitIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUtilityIDNull() {
                return this.IsNull(this.tableRateDetails.UtilityIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUtilityIDNull() {
                this[this.tableRateDetails.UtilityIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUtilityInvoiceTemplateDetailIDNull() {
                return this.IsNull(this.tableRateDetails.UtilityInvoiceTemplateDetailIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUtilityInvoiceTemplateDetailIDNull() {
                this[this.tableRateDetails.UtilityInvoiceTemplateDetailIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEffectiveDateNull() {
                return this.IsNull(this.tableRateDetails.EffectiveDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEffectiveDateNull() {
                this[this.tableRateDetails.EffectiveDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExpirationDateNull() {
                return this.IsNull(this.tableRateDetails.ExpirationDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExpirationDateNull() {
                this[this.tableRateDetails.ExpirationDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinAmountNull() {
                return this.IsNull(this.tableRateDetails.MinAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinAmountNull() {
                this[this.tableRateDetails.MinAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxAmountNull() {
                return this.IsNull(this.tableRateDetails.MaxAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxAmountNull() {
                this[this.tableRateDetails.MaxAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGLAcctNull() {
                return this.IsNull(this.tableRateDetails.GLAcctColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGLAcctNull() {
                this[this.tableRateDetails.GLAcctColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRangeLowerNull() {
                return this.IsNull(this.tableRateDetails.RangeLowerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRangeLowerNull() {
                this[this.tableRateDetails.RangeLowerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRangeUpperNull() {
                return this.IsNull(this.tableRateDetails.RangeUpperColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRangeUpperNull() {
                this[this.tableRateDetails.RangeUpperColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustTypeNull() {
                return this.IsNull(this.tableRateDetails.CustTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustTypeNull() {
                this[this.tableRateDetails.CustTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGraduatedNull() {
                return this.IsNull(this.tableRateDetails.GraduatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGraduatedNull() {
                this[this.tableRateDetails.GraduatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProgressiveNull() {
                return this.IsNull(this.tableRateDetails.ProgressiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProgressiveNull() {
                this[this.tableRateDetails.ProgressiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountCapNull() {
                return this.IsNull(this.tableRateDetails.AmountCapColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountCapNull() {
                this[this.tableRateDetails.AmountCapColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxRateAmountNull() {
                return this.IsNull(this.tableRateDetails.MaxRateAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxRateAmountNull() {
                this[this.tableRateDetails.MaxRateAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinRateAmountNull() {
                return this.IsNull(this.tableRateDetails.MinRateAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinRateAmountNull() {
                this[this.tableRateDetails.MinRateAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryRollupNull() {
                return this.IsNull(this.tableRateDetails.CategoryRollupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryRollupNull() {
                this[this.tableRateDetails.CategoryRollupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxableNull() {
                return this.IsNull(this.tableRateDetails.TaxableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxableNull() {
                this[this.tableRateDetails.TaxableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChargeTypeNull() {
                return this.IsNull(this.tableRateDetails.ChargeTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChargeTypeNull() {
                this[this.tableRateDetails.ChargeTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMiscData1Null() {
                return this.IsNull(this.tableRateDetails.MiscData1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMiscData1Null() {
                this[this.tableRateDetails.MiscData1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuildingNull() {
                return this.IsNull(this.tableRateDetails.BuildingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuildingNull() {
                this[this.tableRateDetails.BuildingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateAmount2Null() {
                return this.IsNull(this.tableRateDetails.RateAmount2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateAmount2Null() {
                this[this.tableRateDetails.RateAmount2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateAmount3Null() {
                return this.IsNull(this.tableRateDetails.RateAmount3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateAmount3Null() {
                this[this.tableRateDetails.RateAmount3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFixedAdderNull() {
                return this.IsNull(this.tableRateDetails.FixedAdderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFixedAdderNull() {
                this[this.tableRateDetails.FixedAdderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFixedCapRateNull() {
                return this.IsNull(this.tableRateDetails.FixedCapRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFixedCapRateNull() {
                this[this.tableRateDetails.FixedCapRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScaleFactor1Null() {
                return this.IsNull(this.tableRateDetails.ScaleFactor1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScaleFactor1Null() {
                this[this.tableRateDetails.ScaleFactor1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScaleFactor2Null() {
                return this.IsNull(this.tableRateDetails.ScaleFactor2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScaleFactor2Null() {
                this[this.tableRateDetails.ScaleFactor2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryDescriptionNull() {
                return this.IsNull(this.tableRateDetails.CategoryDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryDescriptionNull() {
                this[this.tableRateDetails.CategoryDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrintOrderNull() {
                return this.IsNull(this.tableRateDetails.PrintOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrintOrderNull() {
                this[this.tableRateDetails.PrintOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollupFlagNull() {
                return this.IsNull(this.tableRateDetails.RollupFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollupFlagNull() {
                this[this.tableRateDetails.RollupFlagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateDescriptionTypeNull() {
                return this.IsNull(this.tableRateDetails.RateDescriptionTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateDescriptionTypeNull() {
                this[this.tableRateDetails.RateDescriptionTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateDescriptionNull() {
                return this.IsNull(this.tableRateDetails.RateDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateDescriptionNull() {
                this[this.tableRateDetails.RateDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGroupCodeNull() {
                return this.IsNull(this.tableRateDetails.GroupCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGroupCodeNull() {
                this[this.tableRateDetails.GroupCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemCodeNull() {
                return this.IsNull(this.tableRateDetails.ItemCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemCodeNull() {
                this[this.tableRateDetails.ItemCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateTypeCategoryIDNull() {
                return this.IsNull(this.tableRateDetails.RateTypeCategoryIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateTypeCategoryIDNull() {
                this[this.tableRateDetails.RateTypeCategoryIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateTypeDescriptionNull() {
                return this.IsNull(this.tableRateDetails.RateTypeDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateTypeDescriptionNull() {
                this[this.tableRateDetails.RateTypeDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateTypeProgIDNull() {
                return this.IsNull(this.tableRateDetails.RateTypeProgIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateTypeProgIDNull() {
                this[this.tableRateDetails.RateTypeProgIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateTypeCategoryDescriptionNull() {
                return this.IsNull(this.tableRateDetails.RateTypeCategoryDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateTypeCategoryDescriptionNull() {
                this[this.tableRateDetails.RateTypeCategoryDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServiceTypeCodeNull() {
                return this.IsNull(this.tableRateDetails.ServiceTypeCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServiceTypeCodeNull() {
                this[this.tableRateDetails.ServiceTypeCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServiceTypeDescriptionNull() {
                return this.IsNull(this.tableRateDetails.ServiceTypeDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServiceTypeDescriptionNull() {
                this[this.tableRateDetails.ServiceTypeDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsumptionUnitNull() {
                return this.IsNull(this.tableRateDetails.ConsumptionUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsumptionUnitNull() {
                this[this.tableRateDetails.ConsumptionUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsumptionUnitMultiplierNull() {
                return this.IsNull(this.tableRateDetails.ConsumptionUnitMultiplierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsumptionUnitMultiplierNull() {
                this[this.tableRateDetails.ConsumptionUnitMultiplierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsumptionStandardUnitNull() {
                return this.IsNull(this.tableRateDetails.ConsumptionStandardUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsumptionStandardUnitNull() {
                this[this.tableRateDetails.ConsumptionStandardUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsumptionUnitDescriptionNull() {
                return this.IsNull(this.tableRateDetails.ConsumptionUnitDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsumptionUnitDescriptionNull() {
                this[this.tableRateDetails.ConsumptionUnitDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsumptionUnitTypeNull() {
                return this.IsNull(this.tableRateDetails.ConsumptionUnitTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsumptionUnitTypeNull() {
                this[this.tableRateDetails.ConsumptionUnitTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssemblyNameNull() {
                return this.IsNull(this.tableRateDetails.AssemblyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssemblyNameNull() {
                this[this.tableRateDetails.AssemblyNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClassNameNull() {
                return this.IsNull(this.tableRateDetails.ClassNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClassNameNull() {
                this[this.tableRateDetails.ClassNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCustomerRateNull() {
                return this.IsNull(this.tableRateDetails.IsCustomerRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCustomerRateNull() {
                this[this.tableRateDetails.IsCustomerRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsGraduatedNull() {
                return this.IsNull(this.tableRateDetails.IsGraduatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsGraduatedNull() {
                this[this.tableRateDetails.IsGraduatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsMajorityNull() {
                return this.IsNull(this.tableRateDetails.IsMajorityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsMajorityNull() {
                this[this.tableRateDetails.IsMajorityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMarginNull() {
                return this.IsNull(this.tableRateDetails.MarginColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMarginNull() {
                this[this.tableRateDetails.MarginColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUsageClassIdNull() {
                return this.IsNull(this.tableRateDetails.UsageClassIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUsageClassIdNull() {
                this[this.tableRateDetails.UsageClassIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActiveNull() {
                return this.IsNull(this.tableRateDetails.ActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActiveNull() {
                this[this.tableRateDetails.ActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableRateDetails.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableRateDetails.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateVariableTypeIdNull() {
                return this.IsNull(this.tableRateDetails.RateVariableTypeIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateVariableTypeIdNull() {
                this[this.tableRateDetails.RateVariableTypeIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinDaysNull() {
                return this.IsNull(this.tableRateDetails.MinDaysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinDaysNull() {
                this[this.tableRateDetails.MinDaysColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxDaysNull() {
                return this.IsNull(this.tableRateDetails.MaxDaysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxDaysNull() {
                this[this.tableRateDetails.MaxDaysColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBlockPriceIndicatorNull() {
                return this.IsNull(this.tableRateDetails.BlockPriceIndicatorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBlockPriceIndicatorNull() {
                this[this.tableRateDetails.BlockPriceIndicatorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMeterMultiplierFlagNull() {
                return this.IsNull(this.tableRateDetails.MeterMultiplierFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMeterMultiplierFlagNull() {
                this[this.tableRateDetails.MeterMultiplierFlagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBlendRatioNull() {
                return this.IsNull(this.tableRateDetails.BlendRatioColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBlendRatioNull() {
                this[this.tableRateDetails.BlendRatioColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateDetailDS_IdNull() {
                return this.IsNull(this.tableRateDetails.RateDetailDS_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateDetailDS_IdNull() {
                this[this.tableRateDetails.RateDetailDS_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Rate : global::System.Data.DataRow {
            
            private RatesDataTable tableRates;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Rate(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRates = ((RatesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RateID {
                get {
                    return ((int)(this[this.tableRates.RateIDColumn]));
                }
                set {
                    this[this.tableRates.RateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CSPID {
                get {
                    try {
                        return ((int)(this[this.tableRates.CSPIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CSPID\' in table \'Rate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRates.CSPIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RateCode {
                get {
                    return ((string)(this[this.tableRates.RateCodeColumn]));
                }
                set {
                    this[this.tableRates.RateCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableRates.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RateDesc\' in table \'Rate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRates.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EffectiveDate {
                get {
                    return ((global::System.DateTime)(this[this.tableRates.EffectiveDateColumn]));
                }
                set {
                    this[this.tableRates.EffectiveDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ExpirationDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableRates.ExpirationDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExpirationDate\' in table \'Rate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRates.ExpirationDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RateType {
                get {
                    try {
                        return ((string)(this[this.tableRates.RateTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RateType\' in table \'Rate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRates.RateTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short PlanType {
                get {
                    try {
                        return ((short)(this[this.tableRates.PlanTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PlanType\' in table \'Rate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRates.PlanTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMajority {
                get {
                    try {
                        return ((bool)(this[this.tableRates.IsMajorityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsMajority\' in table \'Rate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRates.IsMajorityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool TemplateFlag {
                get {
                    try {
                        return ((bool)(this[this.tableRates.TemplateFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TemplateFlag\' in table \'Rate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRates.TemplateFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCSPIDNull() {
                return this.IsNull(this.tableRates.CSPIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCSPIDNull() {
                this[this.tableRates.CSPIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableRates.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableRates.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExpirationDateNull() {
                return this.IsNull(this.tableRates.ExpirationDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExpirationDateNull() {
                this[this.tableRates.ExpirationDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateTypeNull() {
                return this.IsNull(this.tableRates.RateTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateTypeNull() {
                this[this.tableRates.RateTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlanTypeNull() {
                return this.IsNull(this.tableRates.PlanTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPlanTypeNull() {
                this[this.tableRates.PlanTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsMajorityNull() {
                return this.IsNull(this.tableRates.IsMajorityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsMajorityNull() {
                this[this.tableRates.IsMajorityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTemplateFlagNull() {
                return this.IsNull(this.tableRates.TemplateFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTemplateFlagNull() {
                this[this.tableRates.TemplateFlagColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PropertyRate : global::System.Data.DataRow {
            
            private PropertyRatesDataTable tablePropertyRates;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PropertyRate(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePropertyRates = ((PropertyRatesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RateID {
                get {
                    try {
                        return ((int)(this[this.tablePropertyRates.RateIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RateID\' in table \'PropertyRate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropertyRates.RateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PropertyID {
                get {
                    try {
                        return ((int)(this[this.tablePropertyRates.PropertyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PropertyID\' in table \'PropertyRate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropertyRates.PropertyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateIDNull() {
                return this.IsNull(this.tablePropertyRates.RateIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateIDNull() {
                this[this.tablePropertyRates.RateIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPropertyIDNull() {
                return this.IsNull(this.tablePropertyRates.PropertyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPropertyIDNull() {
                this[this.tablePropertyRates.PropertyIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RateDetailDSRowChangeEvent : global::System.EventArgs {
            
            private RateDetailDSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateDetailDSRowChangeEvent(RateDetailDSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateDetailDSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RateDetailChangeEvent : global::System.EventArgs {
            
            private RateDetail eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateDetailChangeEvent(RateDetail row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateDetail Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RateChangeEvent : global::System.EventArgs {
            
            private Rate eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RateChangeEvent(Rate row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Rate Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PropertyRateChangeEvent : global::System.EventArgs {
            
            private PropertyRate eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRateChangeEvent(PropertyRate row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRate Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4016")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.ista-billing.com/api")]
    public partial class WSRateIndexType {
        
        private int rateIndexTypeIdField;
        
        private string rateIndexTypeNameField;
        
        private bool isActiveField;
        
        /// <remarks/>
        public int RateIndexTypeId {
            get {
                return this.rateIndexTypeIdField;
            }
            set {
                this.rateIndexTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public string RateIndexTypeName {
            get {
                return this.rateIndexTypeNameField;
            }
            set {
                this.rateIndexTypeNameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsActive {
            get {
                return this.isActiveField;
            }
            set {
                this.isActiveField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4016")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.ista-billing.com/api")]
    public partial class WSConractVolumeDetail {
        
        private System.DateTime intervalStartField;
        
        private decimal expectedVolumeField;
        
        /// <remarks/>
        public System.DateTime IntervalStart {
            get {
                return this.intervalStartField;
            }
            set {
                this.intervalStartField = value;
            }
        }
        
        /// <remarks/>
        public decimal ExpectedVolume {
            get {
                return this.expectedVolumeField;
            }
            set {
                this.expectedVolumeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4016")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.ista-billing.com/api")]
    public partial class WSContractVolume {
        
        private int customerIDField;
        
        private int premiseIDField;
        
        private System.DateTime periodStartField;
        
        private System.DateTime periodEndField;
        
        private int undertakeRateDetailIDField;
        
        private int overtakeRateDetailIDField;
        
        private decimal undertakeCollarPercentField;
        
        private decimal overtakeCollarPercentField;
        
        private ContractVolumeIntervalOptions volumeIntervalField;
        
        private WSConractVolumeDetail[] volumeDetailsField;
        
        /// <remarks/>
        public int CustomerID {
            get {
                return this.customerIDField;
            }
            set {
                this.customerIDField = value;
            }
        }
        
        /// <remarks/>
        public int PremiseID {
            get {
                return this.premiseIDField;
            }
            set {
                this.premiseIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime PeriodStart {
            get {
                return this.periodStartField;
            }
            set {
                this.periodStartField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime PeriodEnd {
            get {
                return this.periodEndField;
            }
            set {
                this.periodEndField = value;
            }
        }
        
        /// <remarks/>
        public int UndertakeRateDetailID {
            get {
                return this.undertakeRateDetailIDField;
            }
            set {
                this.undertakeRateDetailIDField = value;
            }
        }
        
        /// <remarks/>
        public int OvertakeRateDetailID {
            get {
                return this.overtakeRateDetailIDField;
            }
            set {
                this.overtakeRateDetailIDField = value;
            }
        }
        
        /// <remarks/>
        public decimal UndertakeCollarPercent {
            get {
                return this.undertakeCollarPercentField;
            }
            set {
                this.undertakeCollarPercentField = value;
            }
        }
        
        /// <remarks/>
        public decimal OvertakeCollarPercent {
            get {
                return this.overtakeCollarPercentField;
            }
            set {
                this.overtakeCollarPercentField = value;
            }
        }
        
        /// <remarks/>
        public ContractVolumeIntervalOptions VolumeInterval {
            get {
                return this.volumeIntervalField;
            }
            set {
                this.volumeIntervalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public WSConractVolumeDetail[] VolumeDetails {
            get {
                return this.volumeDetailsField;
            }
            set {
                this.volumeDetailsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4016")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.ista-billing.com/api")]
    public enum ContractVolumeIntervalOptions {
        
        /// <remarks/>
        FifteenMinutes = 1,
        
        /// <remarks/>
        ThirtyMinutes = 2,
        
        /// <remarks/>
        Hourly = 4,
        
        /// <remarks/>
        Daily = 8,
        
        /// <remarks/>
        Monthly = 16,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4016")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.ista-billing.com/api")]
    public partial class WSRateForecast {
        
        private int customerIdField;
        
        private System.DateTime dateFromField;
        
        private System.DateTime dateToField;
        
        private int expectedUsageField;
        
        private double usageMinPercentageField;
        
        private double usageMaxPercentageField;
        
        private int overtakeIndexTypeIdField;
        
        private int undertakeIndexTypeIdField;
        
        private double overtakeMarginField;
        
        private double undertakeMarginField;
        
        private bool isActiveField;
        
        /// <remarks/>
        public int CustomerId {
            get {
                return this.customerIdField;
            }
            set {
                this.customerIdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateFrom {
            get {
                return this.dateFromField;
            }
            set {
                this.dateFromField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateTo {
            get {
                return this.dateToField;
            }
            set {
                this.dateToField = value;
            }
        }
        
        /// <remarks/>
        public int ExpectedUsage {
            get {
                return this.expectedUsageField;
            }
            set {
                this.expectedUsageField = value;
            }
        }
        
        /// <remarks/>
        public double UsageMinPercentage {
            get {
                return this.usageMinPercentageField;
            }
            set {
                this.usageMinPercentageField = value;
            }
        }
        
        /// <remarks/>
        public double UsageMaxPercentage {
            get {
                return this.usageMaxPercentageField;
            }
            set {
                this.usageMaxPercentageField = value;
            }
        }
        
        /// <remarks/>
        public int OvertakeIndexTypeId {
            get {
                return this.overtakeIndexTypeIdField;
            }
            set {
                this.overtakeIndexTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public int UndertakeIndexTypeId {
            get {
                return this.undertakeIndexTypeIdField;
            }
            set {
                this.undertakeIndexTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public double OvertakeMargin {
            get {
                return this.overtakeMarginField;
            }
            set {
                this.overtakeMarginField = value;
            }
        }
        
        /// <remarks/>
        public double UndertakeMargin {
            get {
                return this.undertakeMarginField;
            }
            set {
                this.undertakeMarginField = value;
            }
        }
        
        /// <remarks/>
        public bool IsActive {
            get {
                return this.isActiveField;
            }
            set {
                this.isActiveField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4016")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.ista-billing.com/api")]
    public partial class WSRateIndexRange {
        
        private int rateIndexTypeIdField;
        
        private System.DateTime dateFromField;
        
        private System.DateTime dateToField;
        
        private decimal indexRateField;
        
        /// <remarks/>
        public int RateIndexTypeId {
            get {
                return this.rateIndexTypeIdField;
            }
            set {
                this.rateIndexTypeIdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateFrom {
            get {
                return this.dateFromField;
            }
            set {
                this.dateFromField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateTo {
            get {
                return this.dateToField;
            }
            set {
                this.dateToField = value;
            }
        }
        
        /// <remarks/>
        public decimal IndexRate {
            get {
                return this.indexRateField;
            }
            set {
                this.indexRateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    public delegate void IsAliveCompletedEventHandler(object sender, IsAliveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsAliveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsAliveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    public delegate void ListRatesCompletedEventHandler(object sender, ListRatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListRatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListRatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RateDS Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RateDS)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    public delegate void ListRates1CompletedEventHandler(object sender, ListRates1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListRates1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListRates1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RateDS Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RateDS)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    public delegate void ListRateDetailsCompletedEventHandler(object sender, ListRateDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListRateDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListRateDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RateDS Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RateDS)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    public delegate void ListRateDetails1CompletedEventHandler(object sender, ListRateDetails1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListRateDetails1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListRateDetails1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RateDS Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RateDS)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    public delegate void ListRateDetails2CompletedEventHandler(object sender, ListRateDetails2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListRateDetails2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListRateDetails2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RateDS Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RateDS)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    public delegate void ListRateDetails3CompletedEventHandler(object sender, ListRateDetails3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListRateDetails3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListRateDetails3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RateDS Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RateDS)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    public delegate void ListRateReadyCustomersCompletedEventHandler(object sender, ListRateReadyCustomersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListRateReadyCustomersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListRateReadyCustomersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    public delegate void ListUnbilledConsumptionCustomersCompletedEventHandler(object sender, ListUnbilledConsumptionCustomersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListUnbilledConsumptionCustomersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListUnbilledConsumptionCustomersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    public delegate void UpdateRateAmountCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    public delegate void UpdateRateAmount1CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    public delegate void LoadCompletedEventHandler(object sender, LoadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    public delegate void ListRateIndexTypeCompletedEventHandler(object sender, ListRateIndexTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListRateIndexTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListRateIndexTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WSRateIndexType[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WSRateIndexType[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    public delegate void ListRateIndexRangeCompletedEventHandler(object sender, ListRateIndexRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListRateIndexRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListRateIndexRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WSRateIndexRange[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WSRateIndexRange[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    public delegate void CreateNewRateIndexRangeCompletedEventHandler(object sender, CreateNewRateIndexRangeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewRateIndexRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateNewRateIndexRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    public delegate void CreateNewRateForcastEntryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4016")]
    public delegate void CreateContractVolumeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591